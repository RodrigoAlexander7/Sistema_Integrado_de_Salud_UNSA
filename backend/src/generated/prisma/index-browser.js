
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nombreUsuario: 'nombreUsuario',
  contrasenaHash: 'contrasenaHash',
  tipoUsuario: 'tipoUsuario',
  email: 'email',
  ultimoAcceso: 'ultimoAcceso',
  activo: 'activo',
  fechaRegistro: 'fechaRegistro'
};

exports.Prisma.MedicoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  tipoDocumento: 'tipoDocumento',
  numDocumento: 'numDocumento',
  nombres: 'nombres',
  apellidos: 'apellidos',
  numLicencia: 'numLicencia',
  telefono: 'telefono',
  correo: 'correo',
  fechaRegistro: 'fechaRegistro',
  activo: 'activo'
};

exports.Prisma.EnfermeraScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  tipoDocumento: 'tipoDocumento',
  numDocumento: 'numDocumento',
  nombres: 'nombres',
  apellidos: 'apellidos',
  numLicencia: 'numLicencia',
  telefono: 'telefono',
  correo: 'correo',
  fechaRegistro: 'fechaRegistro',
  activo: 'activo'
};

exports.Prisma.AdministradorScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  tipoDocumento: 'tipoDocumento',
  numDocumento: 'numDocumento',
  nombres: 'nombres',
  apellidos: 'apellidos',
  telefono: 'telefono',
  correo: 'correo',
  fechaRegistro: 'fechaRegistro',
  activo: 'activo'
};

exports.Prisma.FacultadScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  codigo: 'codigo',
  descripcion: 'descripcion',
  activo: 'activo'
};

exports.Prisma.ProgramaAcademicoScalarFieldEnum = {
  id: 'id',
  facultadId: 'facultadId',
  nombre: 'nombre',
  codigo: 'codigo',
  descripcion: 'descripcion',
  nivel: 'nivel',
  activo: 'activo'
};

exports.Prisma.SedeScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  direccion: 'direccion',
  telefono: 'telefono',
  horarioAtencion: 'horarioAtencion',
  activo: 'activo'
};

exports.Prisma.ConsultorioScalarFieldEnum = {
  id: 'id',
  sedeId: 'sedeId',
  nombre: 'nombre',
  codigo: 'codigo',
  tipo: 'tipo',
  activo: 'activo'
};

exports.Prisma.EspecialidadScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  codigo: 'codigo',
  activo: 'activo'
};

exports.Prisma.MedicoEspecialidadScalarFieldEnum = {
  id: 'id',
  medicoId: 'medicoId',
  especialidadId: 'especialidadId',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  activo: 'activo'
};

exports.Prisma.PacienteScalarFieldEnum = {
  id: 'id',
  tipoDocumento: 'tipoDocumento',
  numDocumento: 'numDocumento',
  nombres: 'nombres',
  apellidos: 'apellidos',
  fechaNacimiento: 'fechaNacimiento',
  genero: 'genero',
  direccion: 'direccion',
  telefono: 'telefono',
  correo: 'correo',
  grupoSanguineo: 'grupoSanguineo',
  alergias: 'alergias',
  antecedentesFamiliares: 'antecedentesFamiliares',
  estadoCivil: 'estadoCivil',
  fechaRegistro: 'fechaRegistro',
  activo: 'activo',
  programaAcademicoId: 'programaAcademicoId'
};

exports.Prisma.ContactoEmergenciaScalarFieldEnum = {
  id: 'id',
  pacienteId: 'pacienteId',
  nombres: 'nombres',
  apellidos: 'apellidos',
  parentesco: 'parentesco',
  telefonoPrincipal: 'telefonoPrincipal',
  telefonoSecundario: 'telefonoSecundario',
  direccion: 'direccion',
  activo: 'activo'
};

exports.Prisma.HistoriaClinicaScalarFieldEnum = {
  id: 'id',
  pacienteId: 'pacienteId',
  fechaApertura: 'fechaApertura',
  estado: 'estado',
  observacionesGenerales: 'observacionesGenerales',
  ultimaActualizacion: 'ultimaActualizacion'
};

exports.Prisma.EpisodioClincoScalarFieldEnum = {
  id: 'id',
  historiaClinicaId: 'historiaClinicaId',
  especialidadId: 'especialidadId',
  medicoId: 'medicoId',
  enfermeraId: 'enfermeraId',
  consultorioId: 'consultorioId',
  fechaEpisodio: 'fechaEpisodio',
  motivoConsulta: 'motivoConsulta',
  sintomas: 'sintomas',
  tratamiento: 'tratamiento',
  observaciones: 'observaciones'
};

exports.Prisma.SignosVitalesScalarFieldEnum = {
  id: 'id',
  episodioClinicoId: 'episodioClinicoId',
  presionArterial: 'presionArterial',
  temperatura: 'temperatura',
  frecuenciaCardiaca: 'frecuenciaCardiaca',
  frecuenciaRespiratoria: 'frecuenciaRespiratoria',
  saturacionOxigeno: 'saturacionOxigeno',
  peso: 'peso',
  altura: 'altura',
  imc: 'imc',
  fechaRegistro: 'fechaRegistro'
};

exports.Prisma.CodigoCIE10ScalarFieldEnum = {
  codigo: 'codigo',
  descripcion: 'descripcion',
  categoria: 'categoria',
  subcategoria: 'subcategoria',
  activo: 'activo'
};

exports.Prisma.DiagnosticoScalarFieldEnum = {
  id: 'id',
  episodioClinicoId: 'episodioClinicoId',
  codigoCIE10Id: 'codigoCIE10Id',
  tipo: 'tipo',
  descripcionAdicional: 'descripcionAdicional',
  fechaRegistro: 'fechaRegistro'
};

exports.Prisma.PrescripcionScalarFieldEnum = {
  id: 'id',
  episodioClinicoId: 'episodioClinicoId',
  nombreMedicamento: 'nombreMedicamento',
  dosis: 'dosis',
  viaAdministracion: 'viaAdministracion',
  frecuencia: 'frecuencia',
  duracion: 'duracion',
  indicaciones: 'indicaciones',
  fechaPrescripcion: 'fechaPrescripcion'
};

exports.Prisma.DocumentoClinicoScalarFieldEnum = {
  id: 'id',
  episodioClinicoId: 'episodioClinicoId',
  tipoDocumento: 'tipoDocumento',
  titulo: 'titulo',
  rutaArchivo: 'rutaArchivo',
  contenido: 'contenido',
  formato: 'formato',
  fechaDocumento: 'fechaDocumento',
  fechaRegistro: 'fechaRegistro',
  observaciones: 'observaciones'
};

exports.Prisma.ConsentimientoInformadoScalarFieldEnum = {
  id: 'id',
  episodioClinicoId: 'episodioClinicoId',
  tipoProcedimiento: 'tipoProcedimiento',
  contenido: 'contenido',
  fechaFirma: 'fechaFirma',
  firmadoPaciente: 'firmadoPaciente',
  firmadoRepresentante: 'firmadoRepresentante',
  nombreRepresentante: 'nombreRepresentante',
  documentoRepresentante: 'documentoRepresentante',
  documentoDigitalizado: 'documentoDigitalizado'
};

exports.Prisma.OdontologiaDetalleScalarFieldEnum = {
  id: 'id',
  episodioClinicoId: 'episodioClinicoId',
  odontograma: 'odontograma',
  indiceCPOD: 'indiceCPOD',
  observacionesDentales: 'observacionesDentales',
  procedimientosRealizados: 'procedimientosRealizados'
};

exports.Prisma.OftalmologiaDetalleScalarFieldEnum = {
  id: 'id',
  episodioClinicoId: 'episodioClinicoId',
  agudezaVisualOD: 'agudezaVisualOD',
  agudezaVisualOI: 'agudezaVisualOI',
  presionIntraocularOD: 'presionIntraocularOD',
  presionIntraocularOI: 'presionIntraocularOI',
  fondoOjo: 'fondoOjo',
  formulaOptica: 'formulaOptica'
};

exports.Prisma.PsicologiaDetalleScalarFieldEnum = {
  id: 'id',
  episodioClinicoId: 'episodioClinicoId',
  evaluacionMental: 'evaluacionMental',
  testAplicados: 'testAplicados',
  impresionDiagnostica: 'impresionDiagnostica',
  planIntervencion: 'planIntervencion',
  evolucion: 'evolucion'
};

exports.Prisma.TrabajoSocialDetalleScalarFieldEnum = {
  id: 'id',
  episodioClinicoId: 'episodioClinicoId',
  evaluacionSocioeconomica: 'evaluacionSocioeconomica',
  dinamicaFamiliar: 'dinamicaFamiliar',
  redesApoyo: 'redesApoyo',
  intervencionRealizada: 'intervencionRealizada',
  seguimientoCaso: 'seguimientoCaso'
};

exports.Prisma.AuditoriaHistoriaScalarFieldEnum = {
  id: 'id',
  historiaClinicaId: 'historiaClinicaId',
  episodioClinicoId: 'episodioClinicoId',
  usuarioId: 'usuarioId',
  fechaAccion: 'fechaAccion',
  tipoAccion: 'tipoAccion',
  descripcion: 'descripcion',
  tablaAfectada: 'tablaAfectada',
  idRegistro: 'idRegistro',
  datosAntiguos: 'datosAntiguos',
  datosNuevos: 'datosNuevos',
  direccionIp: 'direccionIp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TipoUsuario = exports.$Enums.TipoUsuario = {
  ADMINISTRADOR: 'ADMINISTRADOR',
  MEDICO: 'MEDICO',
  ENFERMERA: 'ENFERMERA'
};

exports.TipoDiagnostico = exports.$Enums.TipoDiagnostico = {
  PRINCIPAL: 'PRINCIPAL',
  SECUNDARIO: 'SECUNDARIO'
};

exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Medico: 'Medico',
  Enfermera: 'Enfermera',
  Administrador: 'Administrador',
  Facultad: 'Facultad',
  ProgramaAcademico: 'ProgramaAcademico',
  Sede: 'Sede',
  Consultorio: 'Consultorio',
  Especialidad: 'Especialidad',
  MedicoEspecialidad: 'MedicoEspecialidad',
  Paciente: 'Paciente',
  ContactoEmergencia: 'ContactoEmergencia',
  HistoriaClinica: 'HistoriaClinica',
  EpisodioClinco: 'EpisodioClinco',
  SignosVitales: 'SignosVitales',
  CodigoCIE10: 'CodigoCIE10',
  Diagnostico: 'Diagnostico',
  Prescripcion: 'Prescripcion',
  DocumentoClinico: 'DocumentoClinico',
  ConsentimientoInformado: 'ConsentimientoInformado',
  OdontologiaDetalle: 'OdontologiaDetalle',
  OftalmologiaDetalle: 'OftalmologiaDetalle',
  PsicologiaDetalle: 'PsicologiaDetalle',
  TrabajoSocialDetalle: 'TrabajoSocialDetalle',
  AuditoriaHistoria: 'AuditoriaHistoria'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
