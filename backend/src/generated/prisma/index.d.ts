
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Medico
 * 
 */
export type Medico = $Result.DefaultSelection<Prisma.$MedicoPayload>
/**
 * Model Enfermera
 * 
 */
export type Enfermera = $Result.DefaultSelection<Prisma.$EnfermeraPayload>
/**
 * Model Facultad
 * 
 */
export type Facultad = $Result.DefaultSelection<Prisma.$FacultadPayload>
/**
 * Model ProgramaAcademico
 * 
 */
export type ProgramaAcademico = $Result.DefaultSelection<Prisma.$ProgramaAcademicoPayload>
/**
 * Model Sede
 * 
 */
export type Sede = $Result.DefaultSelection<Prisma.$SedePayload>
/**
 * Model Consultorio
 * 
 */
export type Consultorio = $Result.DefaultSelection<Prisma.$ConsultorioPayload>
/**
 * Model Especialidad
 * 
 */
export type Especialidad = $Result.DefaultSelection<Prisma.$EspecialidadPayload>
/**
 * Model MedicoEspecialidad
 * 
 */
export type MedicoEspecialidad = $Result.DefaultSelection<Prisma.$MedicoEspecialidadPayload>
/**
 * Model Paciente
 * 
 */
export type Paciente = $Result.DefaultSelection<Prisma.$PacientePayload>
/**
 * Model ContactoEmergencia
 * 
 */
export type ContactoEmergencia = $Result.DefaultSelection<Prisma.$ContactoEmergenciaPayload>
/**
 * Model HistoriaClinica
 * 
 */
export type HistoriaClinica = $Result.DefaultSelection<Prisma.$HistoriaClinicaPayload>
/**
 * Model EpisodioClinco
 * 
 */
export type EpisodioClinco = $Result.DefaultSelection<Prisma.$EpisodioClincoPayload>
/**
 * Model SignosVitales
 * 
 */
export type SignosVitales = $Result.DefaultSelection<Prisma.$SignosVitalesPayload>
/**
 * Model CodigoCIE10
 * 
 */
export type CodigoCIE10 = $Result.DefaultSelection<Prisma.$CodigoCIE10Payload>
/**
 * Model Diagnostico
 * 
 */
export type Diagnostico = $Result.DefaultSelection<Prisma.$DiagnosticoPayload>
/**
 * Model Prescripcion
 * 
 */
export type Prescripcion = $Result.DefaultSelection<Prisma.$PrescripcionPayload>
/**
 * Model DocumentoClinico
 * 
 */
export type DocumentoClinico = $Result.DefaultSelection<Prisma.$DocumentoClinicoPayload>
/**
 * Model ConsentimientoInformado
 * 
 */
export type ConsentimientoInformado = $Result.DefaultSelection<Prisma.$ConsentimientoInformadoPayload>
/**
 * Model OdontologiaDetalle
 * 
 */
export type OdontologiaDetalle = $Result.DefaultSelection<Prisma.$OdontologiaDetallePayload>
/**
 * Model OftalmologiaDetalle
 * 
 */
export type OftalmologiaDetalle = $Result.DefaultSelection<Prisma.$OftalmologiaDetallePayload>
/**
 * Model PsicologiaDetalle
 * 
 */
export type PsicologiaDetalle = $Result.DefaultSelection<Prisma.$PsicologiaDetallePayload>
/**
 * Model TrabajoSocialDetalle
 * 
 */
export type TrabajoSocialDetalle = $Result.DefaultSelection<Prisma.$TrabajoSocialDetallePayload>
/**
 * Model AuditoriaHistoria
 * 
 */
export type AuditoriaHistoria = $Result.DefaultSelection<Prisma.$AuditoriaHistoriaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TipoUsuario: {
  MEDICO: 'MEDICO',
  ENFERMERA: 'ENFERMERA'
};

export type TipoUsuario = (typeof TipoUsuario)[keyof typeof TipoUsuario]


export const TipoDiagnostico: {
  PRINCIPAL: 'PRINCIPAL',
  SECUNDARIO: 'SECUNDARIO'
};

export type TipoDiagnostico = (typeof TipoDiagnostico)[keyof typeof TipoDiagnostico]

}

export type TipoUsuario = $Enums.TipoUsuario

export const TipoUsuario: typeof $Enums.TipoUsuario

export type TipoDiagnostico = $Enums.TipoDiagnostico

export const TipoDiagnostico: typeof $Enums.TipoDiagnostico

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medico`: Exposes CRUD operations for the **Medico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medicos
    * const medicos = await prisma.medico.findMany()
    * ```
    */
  get medico(): Prisma.MedicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.enfermera`: Exposes CRUD operations for the **Enfermera** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enfermeras
    * const enfermeras = await prisma.enfermera.findMany()
    * ```
    */
  get enfermera(): Prisma.EnfermeraDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.facultad`: Exposes CRUD operations for the **Facultad** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Facultads
    * const facultads = await prisma.facultad.findMany()
    * ```
    */
  get facultad(): Prisma.FacultadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.programaAcademico`: Exposes CRUD operations for the **ProgramaAcademico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProgramaAcademicos
    * const programaAcademicos = await prisma.programaAcademico.findMany()
    * ```
    */
  get programaAcademico(): Prisma.ProgramaAcademicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sede`: Exposes CRUD operations for the **Sede** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sedes
    * const sedes = await prisma.sede.findMany()
    * ```
    */
  get sede(): Prisma.SedeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consultorio`: Exposes CRUD operations for the **Consultorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consultorios
    * const consultorios = await prisma.consultorio.findMany()
    * ```
    */
  get consultorio(): Prisma.ConsultorioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.especialidad`: Exposes CRUD operations for the **Especialidad** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Especialidads
    * const especialidads = await prisma.especialidad.findMany()
    * ```
    */
  get especialidad(): Prisma.EspecialidadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medicoEspecialidad`: Exposes CRUD operations for the **MedicoEspecialidad** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicoEspecialidads
    * const medicoEspecialidads = await prisma.medicoEspecialidad.findMany()
    * ```
    */
  get medicoEspecialidad(): Prisma.MedicoEspecialidadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paciente`: Exposes CRUD operations for the **Paciente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pacientes
    * const pacientes = await prisma.paciente.findMany()
    * ```
    */
  get paciente(): Prisma.PacienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactoEmergencia`: Exposes CRUD operations for the **ContactoEmergencia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactoEmergencias
    * const contactoEmergencias = await prisma.contactoEmergencia.findMany()
    * ```
    */
  get contactoEmergencia(): Prisma.ContactoEmergenciaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.historiaClinica`: Exposes CRUD operations for the **HistoriaClinica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HistoriaClinicas
    * const historiaClinicas = await prisma.historiaClinica.findMany()
    * ```
    */
  get historiaClinica(): Prisma.HistoriaClinicaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.episodioClinco`: Exposes CRUD operations for the **EpisodioClinco** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EpisodioClincos
    * const episodioClincos = await prisma.episodioClinco.findMany()
    * ```
    */
  get episodioClinco(): Prisma.EpisodioClincoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.signosVitales`: Exposes CRUD operations for the **SignosVitales** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SignosVitales
    * const signosVitales = await prisma.signosVitales.findMany()
    * ```
    */
  get signosVitales(): Prisma.SignosVitalesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.codigoCIE10`: Exposes CRUD operations for the **CodigoCIE10** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CodigoCIE10s
    * const codigoCIE10s = await prisma.codigoCIE10.findMany()
    * ```
    */
  get codigoCIE10(): Prisma.CodigoCIE10Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.diagnostico`: Exposes CRUD operations for the **Diagnostico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Diagnosticos
    * const diagnosticos = await prisma.diagnostico.findMany()
    * ```
    */
  get diagnostico(): Prisma.DiagnosticoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.prescripcion`: Exposes CRUD operations for the **Prescripcion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prescripcions
    * const prescripcions = await prisma.prescripcion.findMany()
    * ```
    */
  get prescripcion(): Prisma.PrescripcionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentoClinico`: Exposes CRUD operations for the **DocumentoClinico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentoClinicos
    * const documentoClinicos = await prisma.documentoClinico.findMany()
    * ```
    */
  get documentoClinico(): Prisma.DocumentoClinicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consentimientoInformado`: Exposes CRUD operations for the **ConsentimientoInformado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsentimientoInformados
    * const consentimientoInformados = await prisma.consentimientoInformado.findMany()
    * ```
    */
  get consentimientoInformado(): Prisma.ConsentimientoInformadoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.odontologiaDetalle`: Exposes CRUD operations for the **OdontologiaDetalle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OdontologiaDetalles
    * const odontologiaDetalles = await prisma.odontologiaDetalle.findMany()
    * ```
    */
  get odontologiaDetalle(): Prisma.OdontologiaDetalleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oftalmologiaDetalle`: Exposes CRUD operations for the **OftalmologiaDetalle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OftalmologiaDetalles
    * const oftalmologiaDetalles = await prisma.oftalmologiaDetalle.findMany()
    * ```
    */
  get oftalmologiaDetalle(): Prisma.OftalmologiaDetalleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.psicologiaDetalle`: Exposes CRUD operations for the **PsicologiaDetalle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PsicologiaDetalles
    * const psicologiaDetalles = await prisma.psicologiaDetalle.findMany()
    * ```
    */
  get psicologiaDetalle(): Prisma.PsicologiaDetalleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trabajoSocialDetalle`: Exposes CRUD operations for the **TrabajoSocialDetalle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrabajoSocialDetalles
    * const trabajoSocialDetalles = await prisma.trabajoSocialDetalle.findMany()
    * ```
    */
  get trabajoSocialDetalle(): Prisma.TrabajoSocialDetalleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditoriaHistoria`: Exposes CRUD operations for the **AuditoriaHistoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditoriaHistorias
    * const auditoriaHistorias = await prisma.auditoriaHistoria.findMany()
    * ```
    */
  get auditoriaHistoria(): Prisma.AuditoriaHistoriaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Medico: 'Medico',
    Enfermera: 'Enfermera',
    Facultad: 'Facultad',
    ProgramaAcademico: 'ProgramaAcademico',
    Sede: 'Sede',
    Consultorio: 'Consultorio',
    Especialidad: 'Especialidad',
    MedicoEspecialidad: 'MedicoEspecialidad',
    Paciente: 'Paciente',
    ContactoEmergencia: 'ContactoEmergencia',
    HistoriaClinica: 'HistoriaClinica',
    EpisodioClinco: 'EpisodioClinco',
    SignosVitales: 'SignosVitales',
    CodigoCIE10: 'CodigoCIE10',
    Diagnostico: 'Diagnostico',
    Prescripcion: 'Prescripcion',
    DocumentoClinico: 'DocumentoClinico',
    ConsentimientoInformado: 'ConsentimientoInformado',
    OdontologiaDetalle: 'OdontologiaDetalle',
    OftalmologiaDetalle: 'OftalmologiaDetalle',
    PsicologiaDetalle: 'PsicologiaDetalle',
    TrabajoSocialDetalle: 'TrabajoSocialDetalle',
    AuditoriaHistoria: 'AuditoriaHistoria'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "medico" | "enfermera" | "facultad" | "programaAcademico" | "sede" | "consultorio" | "especialidad" | "medicoEspecialidad" | "paciente" | "contactoEmergencia" | "historiaClinica" | "episodioClinco" | "signosVitales" | "codigoCIE10" | "diagnostico" | "prescripcion" | "documentoClinico" | "consentimientoInformado" | "odontologiaDetalle" | "oftalmologiaDetalle" | "psicologiaDetalle" | "trabajoSocialDetalle" | "auditoriaHistoria"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Medico: {
        payload: Prisma.$MedicoPayload<ExtArgs>
        fields: Prisma.MedicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload>
          }
          findFirst: {
            args: Prisma.MedicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload>
          }
          findMany: {
            args: Prisma.MedicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload>[]
          }
          create: {
            args: Prisma.MedicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload>
          }
          createMany: {
            args: Prisma.MedicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload>[]
          }
          delete: {
            args: Prisma.MedicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload>
          }
          update: {
            args: Prisma.MedicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload>
          }
          deleteMany: {
            args: Prisma.MedicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload>[]
          }
          upsert: {
            args: Prisma.MedicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoPayload>
          }
          aggregate: {
            args: Prisma.MedicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedico>
          }
          groupBy: {
            args: Prisma.MedicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicoCountArgs<ExtArgs>
            result: $Utils.Optional<MedicoCountAggregateOutputType> | number
          }
        }
      }
      Enfermera: {
        payload: Prisma.$EnfermeraPayload<ExtArgs>
        fields: Prisma.EnfermeraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnfermeraFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnfermeraFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload>
          }
          findFirst: {
            args: Prisma.EnfermeraFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnfermeraFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload>
          }
          findMany: {
            args: Prisma.EnfermeraFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload>[]
          }
          create: {
            args: Prisma.EnfermeraCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload>
          }
          createMany: {
            args: Prisma.EnfermeraCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnfermeraCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload>[]
          }
          delete: {
            args: Prisma.EnfermeraDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload>
          }
          update: {
            args: Prisma.EnfermeraUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload>
          }
          deleteMany: {
            args: Prisma.EnfermeraDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnfermeraUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EnfermeraUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload>[]
          }
          upsert: {
            args: Prisma.EnfermeraUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnfermeraPayload>
          }
          aggregate: {
            args: Prisma.EnfermeraAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnfermera>
          }
          groupBy: {
            args: Prisma.EnfermeraGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnfermeraGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnfermeraCountArgs<ExtArgs>
            result: $Utils.Optional<EnfermeraCountAggregateOutputType> | number
          }
        }
      }
      Facultad: {
        payload: Prisma.$FacultadPayload<ExtArgs>
        fields: Prisma.FacultadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacultadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacultadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload>
          }
          findFirst: {
            args: Prisma.FacultadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacultadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload>
          }
          findMany: {
            args: Prisma.FacultadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload>[]
          }
          create: {
            args: Prisma.FacultadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload>
          }
          createMany: {
            args: Prisma.FacultadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FacultadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload>[]
          }
          delete: {
            args: Prisma.FacultadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload>
          }
          update: {
            args: Prisma.FacultadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload>
          }
          deleteMany: {
            args: Prisma.FacultadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FacultadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FacultadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload>[]
          }
          upsert: {
            args: Prisma.FacultadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacultadPayload>
          }
          aggregate: {
            args: Prisma.FacultadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFacultad>
          }
          groupBy: {
            args: Prisma.FacultadGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacultadGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacultadCountArgs<ExtArgs>
            result: $Utils.Optional<FacultadCountAggregateOutputType> | number
          }
        }
      }
      ProgramaAcademico: {
        payload: Prisma.$ProgramaAcademicoPayload<ExtArgs>
        fields: Prisma.ProgramaAcademicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProgramaAcademicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProgramaAcademicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload>
          }
          findFirst: {
            args: Prisma.ProgramaAcademicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProgramaAcademicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload>
          }
          findMany: {
            args: Prisma.ProgramaAcademicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload>[]
          }
          create: {
            args: Prisma.ProgramaAcademicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload>
          }
          createMany: {
            args: Prisma.ProgramaAcademicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProgramaAcademicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload>[]
          }
          delete: {
            args: Prisma.ProgramaAcademicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload>
          }
          update: {
            args: Prisma.ProgramaAcademicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload>
          }
          deleteMany: {
            args: Prisma.ProgramaAcademicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProgramaAcademicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProgramaAcademicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload>[]
          }
          upsert: {
            args: Prisma.ProgramaAcademicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramaAcademicoPayload>
          }
          aggregate: {
            args: Prisma.ProgramaAcademicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProgramaAcademico>
          }
          groupBy: {
            args: Prisma.ProgramaAcademicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProgramaAcademicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProgramaAcademicoCountArgs<ExtArgs>
            result: $Utils.Optional<ProgramaAcademicoCountAggregateOutputType> | number
          }
        }
      }
      Sede: {
        payload: Prisma.$SedePayload<ExtArgs>
        fields: Prisma.SedeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SedeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SedeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          findFirst: {
            args: Prisma.SedeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SedeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          findMany: {
            args: Prisma.SedeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>[]
          }
          create: {
            args: Prisma.SedeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          createMany: {
            args: Prisma.SedeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SedeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>[]
          }
          delete: {
            args: Prisma.SedeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          update: {
            args: Prisma.SedeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          deleteMany: {
            args: Prisma.SedeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SedeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SedeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>[]
          }
          upsert: {
            args: Prisma.SedeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SedePayload>
          }
          aggregate: {
            args: Prisma.SedeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSede>
          }
          groupBy: {
            args: Prisma.SedeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SedeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SedeCountArgs<ExtArgs>
            result: $Utils.Optional<SedeCountAggregateOutputType> | number
          }
        }
      }
      Consultorio: {
        payload: Prisma.$ConsultorioPayload<ExtArgs>
        fields: Prisma.ConsultorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsultorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsultorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          findFirst: {
            args: Prisma.ConsultorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsultorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          findMany: {
            args: Prisma.ConsultorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          create: {
            args: Prisma.ConsultorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          createMany: {
            args: Prisma.ConsultorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsultorioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          delete: {
            args: Prisma.ConsultorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          update: {
            args: Prisma.ConsultorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          deleteMany: {
            args: Prisma.ConsultorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsultorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsultorioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          upsert: {
            args: Prisma.ConsultorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          aggregate: {
            args: Prisma.ConsultorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsultorio>
          }
          groupBy: {
            args: Prisma.ConsultorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsultorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsultorioCountArgs<ExtArgs>
            result: $Utils.Optional<ConsultorioCountAggregateOutputType> | number
          }
        }
      }
      Especialidad: {
        payload: Prisma.$EspecialidadPayload<ExtArgs>
        fields: Prisma.EspecialidadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EspecialidadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EspecialidadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload>
          }
          findFirst: {
            args: Prisma.EspecialidadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EspecialidadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload>
          }
          findMany: {
            args: Prisma.EspecialidadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload>[]
          }
          create: {
            args: Prisma.EspecialidadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload>
          }
          createMany: {
            args: Prisma.EspecialidadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EspecialidadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload>[]
          }
          delete: {
            args: Prisma.EspecialidadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload>
          }
          update: {
            args: Prisma.EspecialidadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload>
          }
          deleteMany: {
            args: Prisma.EspecialidadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EspecialidadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EspecialidadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload>[]
          }
          upsert: {
            args: Prisma.EspecialidadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EspecialidadPayload>
          }
          aggregate: {
            args: Prisma.EspecialidadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEspecialidad>
          }
          groupBy: {
            args: Prisma.EspecialidadGroupByArgs<ExtArgs>
            result: $Utils.Optional<EspecialidadGroupByOutputType>[]
          }
          count: {
            args: Prisma.EspecialidadCountArgs<ExtArgs>
            result: $Utils.Optional<EspecialidadCountAggregateOutputType> | number
          }
        }
      }
      MedicoEspecialidad: {
        payload: Prisma.$MedicoEspecialidadPayload<ExtArgs>
        fields: Prisma.MedicoEspecialidadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicoEspecialidadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicoEspecialidadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload>
          }
          findFirst: {
            args: Prisma.MedicoEspecialidadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicoEspecialidadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload>
          }
          findMany: {
            args: Prisma.MedicoEspecialidadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload>[]
          }
          create: {
            args: Prisma.MedicoEspecialidadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload>
          }
          createMany: {
            args: Prisma.MedicoEspecialidadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicoEspecialidadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload>[]
          }
          delete: {
            args: Prisma.MedicoEspecialidadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload>
          }
          update: {
            args: Prisma.MedicoEspecialidadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload>
          }
          deleteMany: {
            args: Prisma.MedicoEspecialidadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicoEspecialidadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicoEspecialidadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload>[]
          }
          upsert: {
            args: Prisma.MedicoEspecialidadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicoEspecialidadPayload>
          }
          aggregate: {
            args: Prisma.MedicoEspecialidadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicoEspecialidad>
          }
          groupBy: {
            args: Prisma.MedicoEspecialidadGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicoEspecialidadGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicoEspecialidadCountArgs<ExtArgs>
            result: $Utils.Optional<MedicoEspecialidadCountAggregateOutputType> | number
          }
        }
      }
      Paciente: {
        payload: Prisma.$PacientePayload<ExtArgs>
        fields: Prisma.PacienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PacienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PacienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          findFirst: {
            args: Prisma.PacienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PacienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          findMany: {
            args: Prisma.PacienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          create: {
            args: Prisma.PacienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          createMany: {
            args: Prisma.PacienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PacienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          delete: {
            args: Prisma.PacienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          update: {
            args: Prisma.PacienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          deleteMany: {
            args: Prisma.PacienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PacienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PacienteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          upsert: {
            args: Prisma.PacienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          aggregate: {
            args: Prisma.PacienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaciente>
          }
          groupBy: {
            args: Prisma.PacienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<PacienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.PacienteCountArgs<ExtArgs>
            result: $Utils.Optional<PacienteCountAggregateOutputType> | number
          }
        }
      }
      ContactoEmergencia: {
        payload: Prisma.$ContactoEmergenciaPayload<ExtArgs>
        fields: Prisma.ContactoEmergenciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactoEmergenciaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactoEmergenciaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload>
          }
          findFirst: {
            args: Prisma.ContactoEmergenciaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactoEmergenciaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload>
          }
          findMany: {
            args: Prisma.ContactoEmergenciaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload>[]
          }
          create: {
            args: Prisma.ContactoEmergenciaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload>
          }
          createMany: {
            args: Prisma.ContactoEmergenciaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactoEmergenciaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload>[]
          }
          delete: {
            args: Prisma.ContactoEmergenciaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload>
          }
          update: {
            args: Prisma.ContactoEmergenciaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload>
          }
          deleteMany: {
            args: Prisma.ContactoEmergenciaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactoEmergenciaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactoEmergenciaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload>[]
          }
          upsert: {
            args: Prisma.ContactoEmergenciaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactoEmergenciaPayload>
          }
          aggregate: {
            args: Prisma.ContactoEmergenciaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactoEmergencia>
          }
          groupBy: {
            args: Prisma.ContactoEmergenciaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactoEmergenciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactoEmergenciaCountArgs<ExtArgs>
            result: $Utils.Optional<ContactoEmergenciaCountAggregateOutputType> | number
          }
        }
      }
      HistoriaClinica: {
        payload: Prisma.$HistoriaClinicaPayload<ExtArgs>
        fields: Prisma.HistoriaClinicaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoriaClinicaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoriaClinicaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload>
          }
          findFirst: {
            args: Prisma.HistoriaClinicaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoriaClinicaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload>
          }
          findMany: {
            args: Prisma.HistoriaClinicaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload>[]
          }
          create: {
            args: Prisma.HistoriaClinicaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload>
          }
          createMany: {
            args: Prisma.HistoriaClinicaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HistoriaClinicaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload>[]
          }
          delete: {
            args: Prisma.HistoriaClinicaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload>
          }
          update: {
            args: Prisma.HistoriaClinicaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload>
          }
          deleteMany: {
            args: Prisma.HistoriaClinicaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistoriaClinicaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HistoriaClinicaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload>[]
          }
          upsert: {
            args: Prisma.HistoriaClinicaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoriaClinicaPayload>
          }
          aggregate: {
            args: Prisma.HistoriaClinicaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistoriaClinica>
          }
          groupBy: {
            args: Prisma.HistoriaClinicaGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistoriaClinicaGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoriaClinicaCountArgs<ExtArgs>
            result: $Utils.Optional<HistoriaClinicaCountAggregateOutputType> | number
          }
        }
      }
      EpisodioClinco: {
        payload: Prisma.$EpisodioClincoPayload<ExtArgs>
        fields: Prisma.EpisodioClincoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EpisodioClincoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EpisodioClincoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload>
          }
          findFirst: {
            args: Prisma.EpisodioClincoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EpisodioClincoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload>
          }
          findMany: {
            args: Prisma.EpisodioClincoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload>[]
          }
          create: {
            args: Prisma.EpisodioClincoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload>
          }
          createMany: {
            args: Prisma.EpisodioClincoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EpisodioClincoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload>[]
          }
          delete: {
            args: Prisma.EpisodioClincoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload>
          }
          update: {
            args: Prisma.EpisodioClincoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload>
          }
          deleteMany: {
            args: Prisma.EpisodioClincoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EpisodioClincoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EpisodioClincoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload>[]
          }
          upsert: {
            args: Prisma.EpisodioClincoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EpisodioClincoPayload>
          }
          aggregate: {
            args: Prisma.EpisodioClincoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEpisodioClinco>
          }
          groupBy: {
            args: Prisma.EpisodioClincoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EpisodioClincoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EpisodioClincoCountArgs<ExtArgs>
            result: $Utils.Optional<EpisodioClincoCountAggregateOutputType> | number
          }
        }
      }
      SignosVitales: {
        payload: Prisma.$SignosVitalesPayload<ExtArgs>
        fields: Prisma.SignosVitalesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SignosVitalesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SignosVitalesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload>
          }
          findFirst: {
            args: Prisma.SignosVitalesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SignosVitalesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload>
          }
          findMany: {
            args: Prisma.SignosVitalesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload>[]
          }
          create: {
            args: Prisma.SignosVitalesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload>
          }
          createMany: {
            args: Prisma.SignosVitalesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SignosVitalesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload>[]
          }
          delete: {
            args: Prisma.SignosVitalesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload>
          }
          update: {
            args: Prisma.SignosVitalesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload>
          }
          deleteMany: {
            args: Prisma.SignosVitalesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SignosVitalesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SignosVitalesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload>[]
          }
          upsert: {
            args: Prisma.SignosVitalesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignosVitalesPayload>
          }
          aggregate: {
            args: Prisma.SignosVitalesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSignosVitales>
          }
          groupBy: {
            args: Prisma.SignosVitalesGroupByArgs<ExtArgs>
            result: $Utils.Optional<SignosVitalesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SignosVitalesCountArgs<ExtArgs>
            result: $Utils.Optional<SignosVitalesCountAggregateOutputType> | number
          }
        }
      }
      CodigoCIE10: {
        payload: Prisma.$CodigoCIE10Payload<ExtArgs>
        fields: Prisma.CodigoCIE10FieldRefs
        operations: {
          findUnique: {
            args: Prisma.CodigoCIE10FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CodigoCIE10FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload>
          }
          findFirst: {
            args: Prisma.CodigoCIE10FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CodigoCIE10FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload>
          }
          findMany: {
            args: Prisma.CodigoCIE10FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload>[]
          }
          create: {
            args: Prisma.CodigoCIE10CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload>
          }
          createMany: {
            args: Prisma.CodigoCIE10CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CodigoCIE10CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload>[]
          }
          delete: {
            args: Prisma.CodigoCIE10DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload>
          }
          update: {
            args: Prisma.CodigoCIE10UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload>
          }
          deleteMany: {
            args: Prisma.CodigoCIE10DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CodigoCIE10UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CodigoCIE10UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload>[]
          }
          upsert: {
            args: Prisma.CodigoCIE10UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodigoCIE10Payload>
          }
          aggregate: {
            args: Prisma.CodigoCIE10AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCodigoCIE10>
          }
          groupBy: {
            args: Prisma.CodigoCIE10GroupByArgs<ExtArgs>
            result: $Utils.Optional<CodigoCIE10GroupByOutputType>[]
          }
          count: {
            args: Prisma.CodigoCIE10CountArgs<ExtArgs>
            result: $Utils.Optional<CodigoCIE10CountAggregateOutputType> | number
          }
        }
      }
      Diagnostico: {
        payload: Prisma.$DiagnosticoPayload<ExtArgs>
        fields: Prisma.DiagnosticoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiagnosticoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiagnosticoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload>
          }
          findFirst: {
            args: Prisma.DiagnosticoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiagnosticoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload>
          }
          findMany: {
            args: Prisma.DiagnosticoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload>[]
          }
          create: {
            args: Prisma.DiagnosticoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload>
          }
          createMany: {
            args: Prisma.DiagnosticoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiagnosticoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload>[]
          }
          delete: {
            args: Prisma.DiagnosticoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload>
          }
          update: {
            args: Prisma.DiagnosticoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload>
          }
          deleteMany: {
            args: Prisma.DiagnosticoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiagnosticoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DiagnosticoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload>[]
          }
          upsert: {
            args: Prisma.DiagnosticoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiagnosticoPayload>
          }
          aggregate: {
            args: Prisma.DiagnosticoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiagnostico>
          }
          groupBy: {
            args: Prisma.DiagnosticoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiagnosticoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiagnosticoCountArgs<ExtArgs>
            result: $Utils.Optional<DiagnosticoCountAggregateOutputType> | number
          }
        }
      }
      Prescripcion: {
        payload: Prisma.$PrescripcionPayload<ExtArgs>
        fields: Prisma.PrescripcionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrescripcionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrescripcionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload>
          }
          findFirst: {
            args: Prisma.PrescripcionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrescripcionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload>
          }
          findMany: {
            args: Prisma.PrescripcionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload>[]
          }
          create: {
            args: Prisma.PrescripcionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload>
          }
          createMany: {
            args: Prisma.PrescripcionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrescripcionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload>[]
          }
          delete: {
            args: Prisma.PrescripcionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload>
          }
          update: {
            args: Prisma.PrescripcionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload>
          }
          deleteMany: {
            args: Prisma.PrescripcionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrescripcionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrescripcionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload>[]
          }
          upsert: {
            args: Prisma.PrescripcionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescripcionPayload>
          }
          aggregate: {
            args: Prisma.PrescripcionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrescripcion>
          }
          groupBy: {
            args: Prisma.PrescripcionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrescripcionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrescripcionCountArgs<ExtArgs>
            result: $Utils.Optional<PrescripcionCountAggregateOutputType> | number
          }
        }
      }
      DocumentoClinico: {
        payload: Prisma.$DocumentoClinicoPayload<ExtArgs>
        fields: Prisma.DocumentoClinicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentoClinicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentoClinicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload>
          }
          findFirst: {
            args: Prisma.DocumentoClinicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentoClinicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload>
          }
          findMany: {
            args: Prisma.DocumentoClinicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload>[]
          }
          create: {
            args: Prisma.DocumentoClinicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload>
          }
          createMany: {
            args: Prisma.DocumentoClinicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentoClinicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload>[]
          }
          delete: {
            args: Prisma.DocumentoClinicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload>
          }
          update: {
            args: Prisma.DocumentoClinicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload>
          }
          deleteMany: {
            args: Prisma.DocumentoClinicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentoClinicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentoClinicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload>[]
          }
          upsert: {
            args: Prisma.DocumentoClinicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoClinicoPayload>
          }
          aggregate: {
            args: Prisma.DocumentoClinicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentoClinico>
          }
          groupBy: {
            args: Prisma.DocumentoClinicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentoClinicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentoClinicoCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentoClinicoCountAggregateOutputType> | number
          }
        }
      }
      ConsentimientoInformado: {
        payload: Prisma.$ConsentimientoInformadoPayload<ExtArgs>
        fields: Prisma.ConsentimientoInformadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsentimientoInformadoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsentimientoInformadoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload>
          }
          findFirst: {
            args: Prisma.ConsentimientoInformadoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsentimientoInformadoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload>
          }
          findMany: {
            args: Prisma.ConsentimientoInformadoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload>[]
          }
          create: {
            args: Prisma.ConsentimientoInformadoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload>
          }
          createMany: {
            args: Prisma.ConsentimientoInformadoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsentimientoInformadoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload>[]
          }
          delete: {
            args: Prisma.ConsentimientoInformadoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload>
          }
          update: {
            args: Prisma.ConsentimientoInformadoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload>
          }
          deleteMany: {
            args: Prisma.ConsentimientoInformadoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsentimientoInformadoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsentimientoInformadoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload>[]
          }
          upsert: {
            args: Prisma.ConsentimientoInformadoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentimientoInformadoPayload>
          }
          aggregate: {
            args: Prisma.ConsentimientoInformadoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsentimientoInformado>
          }
          groupBy: {
            args: Prisma.ConsentimientoInformadoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsentimientoInformadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsentimientoInformadoCountArgs<ExtArgs>
            result: $Utils.Optional<ConsentimientoInformadoCountAggregateOutputType> | number
          }
        }
      }
      OdontologiaDetalle: {
        payload: Prisma.$OdontologiaDetallePayload<ExtArgs>
        fields: Prisma.OdontologiaDetalleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OdontologiaDetalleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OdontologiaDetalleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload>
          }
          findFirst: {
            args: Prisma.OdontologiaDetalleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OdontologiaDetalleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload>
          }
          findMany: {
            args: Prisma.OdontologiaDetalleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload>[]
          }
          create: {
            args: Prisma.OdontologiaDetalleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload>
          }
          createMany: {
            args: Prisma.OdontologiaDetalleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OdontologiaDetalleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload>[]
          }
          delete: {
            args: Prisma.OdontologiaDetalleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload>
          }
          update: {
            args: Prisma.OdontologiaDetalleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload>
          }
          deleteMany: {
            args: Prisma.OdontologiaDetalleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OdontologiaDetalleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OdontologiaDetalleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload>[]
          }
          upsert: {
            args: Prisma.OdontologiaDetalleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OdontologiaDetallePayload>
          }
          aggregate: {
            args: Prisma.OdontologiaDetalleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOdontologiaDetalle>
          }
          groupBy: {
            args: Prisma.OdontologiaDetalleGroupByArgs<ExtArgs>
            result: $Utils.Optional<OdontologiaDetalleGroupByOutputType>[]
          }
          count: {
            args: Prisma.OdontologiaDetalleCountArgs<ExtArgs>
            result: $Utils.Optional<OdontologiaDetalleCountAggregateOutputType> | number
          }
        }
      }
      OftalmologiaDetalle: {
        payload: Prisma.$OftalmologiaDetallePayload<ExtArgs>
        fields: Prisma.OftalmologiaDetalleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OftalmologiaDetalleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OftalmologiaDetalleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload>
          }
          findFirst: {
            args: Prisma.OftalmologiaDetalleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OftalmologiaDetalleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload>
          }
          findMany: {
            args: Prisma.OftalmologiaDetalleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload>[]
          }
          create: {
            args: Prisma.OftalmologiaDetalleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload>
          }
          createMany: {
            args: Prisma.OftalmologiaDetalleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OftalmologiaDetalleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload>[]
          }
          delete: {
            args: Prisma.OftalmologiaDetalleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload>
          }
          update: {
            args: Prisma.OftalmologiaDetalleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload>
          }
          deleteMany: {
            args: Prisma.OftalmologiaDetalleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OftalmologiaDetalleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OftalmologiaDetalleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload>[]
          }
          upsert: {
            args: Prisma.OftalmologiaDetalleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OftalmologiaDetallePayload>
          }
          aggregate: {
            args: Prisma.OftalmologiaDetalleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOftalmologiaDetalle>
          }
          groupBy: {
            args: Prisma.OftalmologiaDetalleGroupByArgs<ExtArgs>
            result: $Utils.Optional<OftalmologiaDetalleGroupByOutputType>[]
          }
          count: {
            args: Prisma.OftalmologiaDetalleCountArgs<ExtArgs>
            result: $Utils.Optional<OftalmologiaDetalleCountAggregateOutputType> | number
          }
        }
      }
      PsicologiaDetalle: {
        payload: Prisma.$PsicologiaDetallePayload<ExtArgs>
        fields: Prisma.PsicologiaDetalleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PsicologiaDetalleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PsicologiaDetalleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload>
          }
          findFirst: {
            args: Prisma.PsicologiaDetalleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PsicologiaDetalleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload>
          }
          findMany: {
            args: Prisma.PsicologiaDetalleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload>[]
          }
          create: {
            args: Prisma.PsicologiaDetalleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload>
          }
          createMany: {
            args: Prisma.PsicologiaDetalleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PsicologiaDetalleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload>[]
          }
          delete: {
            args: Prisma.PsicologiaDetalleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload>
          }
          update: {
            args: Prisma.PsicologiaDetalleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload>
          }
          deleteMany: {
            args: Prisma.PsicologiaDetalleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PsicologiaDetalleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PsicologiaDetalleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload>[]
          }
          upsert: {
            args: Prisma.PsicologiaDetalleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsicologiaDetallePayload>
          }
          aggregate: {
            args: Prisma.PsicologiaDetalleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePsicologiaDetalle>
          }
          groupBy: {
            args: Prisma.PsicologiaDetalleGroupByArgs<ExtArgs>
            result: $Utils.Optional<PsicologiaDetalleGroupByOutputType>[]
          }
          count: {
            args: Prisma.PsicologiaDetalleCountArgs<ExtArgs>
            result: $Utils.Optional<PsicologiaDetalleCountAggregateOutputType> | number
          }
        }
      }
      TrabajoSocialDetalle: {
        payload: Prisma.$TrabajoSocialDetallePayload<ExtArgs>
        fields: Prisma.TrabajoSocialDetalleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrabajoSocialDetalleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrabajoSocialDetalleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload>
          }
          findFirst: {
            args: Prisma.TrabajoSocialDetalleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrabajoSocialDetalleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload>
          }
          findMany: {
            args: Prisma.TrabajoSocialDetalleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload>[]
          }
          create: {
            args: Prisma.TrabajoSocialDetalleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload>
          }
          createMany: {
            args: Prisma.TrabajoSocialDetalleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrabajoSocialDetalleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload>[]
          }
          delete: {
            args: Prisma.TrabajoSocialDetalleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload>
          }
          update: {
            args: Prisma.TrabajoSocialDetalleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload>
          }
          deleteMany: {
            args: Prisma.TrabajoSocialDetalleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrabajoSocialDetalleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrabajoSocialDetalleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload>[]
          }
          upsert: {
            args: Prisma.TrabajoSocialDetalleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrabajoSocialDetallePayload>
          }
          aggregate: {
            args: Prisma.TrabajoSocialDetalleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrabajoSocialDetalle>
          }
          groupBy: {
            args: Prisma.TrabajoSocialDetalleGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrabajoSocialDetalleGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrabajoSocialDetalleCountArgs<ExtArgs>
            result: $Utils.Optional<TrabajoSocialDetalleCountAggregateOutputType> | number
          }
        }
      }
      AuditoriaHistoria: {
        payload: Prisma.$AuditoriaHistoriaPayload<ExtArgs>
        fields: Prisma.AuditoriaHistoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditoriaHistoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditoriaHistoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload>
          }
          findFirst: {
            args: Prisma.AuditoriaHistoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditoriaHistoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload>
          }
          findMany: {
            args: Prisma.AuditoriaHistoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload>[]
          }
          create: {
            args: Prisma.AuditoriaHistoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload>
          }
          createMany: {
            args: Prisma.AuditoriaHistoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditoriaHistoriaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload>[]
          }
          delete: {
            args: Prisma.AuditoriaHistoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload>
          }
          update: {
            args: Prisma.AuditoriaHistoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload>
          }
          deleteMany: {
            args: Prisma.AuditoriaHistoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditoriaHistoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditoriaHistoriaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload>[]
          }
          upsert: {
            args: Prisma.AuditoriaHistoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditoriaHistoriaPayload>
          }
          aggregate: {
            args: Prisma.AuditoriaHistoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditoriaHistoria>
          }
          groupBy: {
            args: Prisma.AuditoriaHistoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditoriaHistoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditoriaHistoriaCountArgs<ExtArgs>
            result: $Utils.Optional<AuditoriaHistoriaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    medico?: MedicoOmit
    enfermera?: EnfermeraOmit
    facultad?: FacultadOmit
    programaAcademico?: ProgramaAcademicoOmit
    sede?: SedeOmit
    consultorio?: ConsultorioOmit
    especialidad?: EspecialidadOmit
    medicoEspecialidad?: MedicoEspecialidadOmit
    paciente?: PacienteOmit
    contactoEmergencia?: ContactoEmergenciaOmit
    historiaClinica?: HistoriaClinicaOmit
    episodioClinco?: EpisodioClincoOmit
    signosVitales?: SignosVitalesOmit
    codigoCIE10?: CodigoCIE10Omit
    diagnostico?: DiagnosticoOmit
    prescripcion?: PrescripcionOmit
    documentoClinico?: DocumentoClinicoOmit
    consentimientoInformado?: ConsentimientoInformadoOmit
    odontologiaDetalle?: OdontologiaDetalleOmit
    oftalmologiaDetalle?: OftalmologiaDetalleOmit
    psicologiaDetalle?: PsicologiaDetalleOmit
    trabajoSocialDetalle?: TrabajoSocialDetalleOmit
    auditoriaHistoria?: AuditoriaHistoriaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    auditorias: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditorias?: boolean | UsuarioCountOutputTypeCountAuditoriasArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountAuditoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditoriaHistoriaWhereInput
  }


  /**
   * Count Type MedicoCountOutputType
   */

  export type MedicoCountOutputType = {
    especialidades: number
    episodiosClinicos: number
  }

  export type MedicoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    especialidades?: boolean | MedicoCountOutputTypeCountEspecialidadesArgs
    episodiosClinicos?: boolean | MedicoCountOutputTypeCountEpisodiosClinicosArgs
  }

  // Custom InputTypes
  /**
   * MedicoCountOutputType without action
   */
  export type MedicoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoCountOutputType
     */
    select?: MedicoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicoCountOutputType without action
   */
  export type MedicoCountOutputTypeCountEspecialidadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicoEspecialidadWhereInput
  }

  /**
   * MedicoCountOutputType without action
   */
  export type MedicoCountOutputTypeCountEpisodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodioClincoWhereInput
  }


  /**
   * Count Type EnfermeraCountOutputType
   */

  export type EnfermeraCountOutputType = {
    episodiosClinicos: number
  }

  export type EnfermeraCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodiosClinicos?: boolean | EnfermeraCountOutputTypeCountEpisodiosClinicosArgs
  }

  // Custom InputTypes
  /**
   * EnfermeraCountOutputType without action
   */
  export type EnfermeraCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnfermeraCountOutputType
     */
    select?: EnfermeraCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EnfermeraCountOutputType without action
   */
  export type EnfermeraCountOutputTypeCountEpisodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodioClincoWhereInput
  }


  /**
   * Count Type FacultadCountOutputType
   */

  export type FacultadCountOutputType = {
    programasAcademicos: number
  }

  export type FacultadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programasAcademicos?: boolean | FacultadCountOutputTypeCountProgramasAcademicosArgs
  }

  // Custom InputTypes
  /**
   * FacultadCountOutputType without action
   */
  export type FacultadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacultadCountOutputType
     */
    select?: FacultadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FacultadCountOutputType without action
   */
  export type FacultadCountOutputTypeCountProgramasAcademicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramaAcademicoWhereInput
  }


  /**
   * Count Type ProgramaAcademicoCountOutputType
   */

  export type ProgramaAcademicoCountOutputType = {
    pacientes: number
  }

  export type ProgramaAcademicoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pacientes?: boolean | ProgramaAcademicoCountOutputTypeCountPacientesArgs
  }

  // Custom InputTypes
  /**
   * ProgramaAcademicoCountOutputType without action
   */
  export type ProgramaAcademicoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademicoCountOutputType
     */
    select?: ProgramaAcademicoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProgramaAcademicoCountOutputType without action
   */
  export type ProgramaAcademicoCountOutputTypeCountPacientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PacienteWhereInput
  }


  /**
   * Count Type SedeCountOutputType
   */

  export type SedeCountOutputType = {
    consultorios: number
  }

  export type SedeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorios?: boolean | SedeCountOutputTypeCountConsultoriosArgs
  }

  // Custom InputTypes
  /**
   * SedeCountOutputType without action
   */
  export type SedeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SedeCountOutputType
     */
    select?: SedeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SedeCountOutputType without action
   */
  export type SedeCountOutputTypeCountConsultoriosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultorioWhereInput
  }


  /**
   * Count Type ConsultorioCountOutputType
   */

  export type ConsultorioCountOutputType = {
    episodiosClinicos: number
  }

  export type ConsultorioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodiosClinicos?: boolean | ConsultorioCountOutputTypeCountEpisodiosClinicosArgs
  }

  // Custom InputTypes
  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultorioCountOutputType
     */
    select?: ConsultorioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountEpisodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodioClincoWhereInput
  }


  /**
   * Count Type EspecialidadCountOutputType
   */

  export type EspecialidadCountOutputType = {
    medicoEspecialidad: number
    episodiosClinicos: number
  }

  export type EspecialidadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicoEspecialidad?: boolean | EspecialidadCountOutputTypeCountMedicoEspecialidadArgs
    episodiosClinicos?: boolean | EspecialidadCountOutputTypeCountEpisodiosClinicosArgs
  }

  // Custom InputTypes
  /**
   * EspecialidadCountOutputType without action
   */
  export type EspecialidadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EspecialidadCountOutputType
     */
    select?: EspecialidadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EspecialidadCountOutputType without action
   */
  export type EspecialidadCountOutputTypeCountMedicoEspecialidadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicoEspecialidadWhereInput
  }

  /**
   * EspecialidadCountOutputType without action
   */
  export type EspecialidadCountOutputTypeCountEpisodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodioClincoWhereInput
  }


  /**
   * Count Type PacienteCountOutputType
   */

  export type PacienteCountOutputType = {
    contactosEmergencia: number
    historiasClinicas: number
  }

  export type PacienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contactosEmergencia?: boolean | PacienteCountOutputTypeCountContactosEmergenciaArgs
    historiasClinicas?: boolean | PacienteCountOutputTypeCountHistoriasClinicasArgs
  }

  // Custom InputTypes
  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PacienteCountOutputType
     */
    select?: PacienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeCountContactosEmergenciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactoEmergenciaWhereInput
  }

  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeCountHistoriasClinicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoriaClinicaWhereInput
  }


  /**
   * Count Type HistoriaClinicaCountOutputType
   */

  export type HistoriaClinicaCountOutputType = {
    episodiosClinicos: number
    auditorias: number
  }

  export type HistoriaClinicaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodiosClinicos?: boolean | HistoriaClinicaCountOutputTypeCountEpisodiosClinicosArgs
    auditorias?: boolean | HistoriaClinicaCountOutputTypeCountAuditoriasArgs
  }

  // Custom InputTypes
  /**
   * HistoriaClinicaCountOutputType without action
   */
  export type HistoriaClinicaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinicaCountOutputType
     */
    select?: HistoriaClinicaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HistoriaClinicaCountOutputType without action
   */
  export type HistoriaClinicaCountOutputTypeCountEpisodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodioClincoWhereInput
  }

  /**
   * HistoriaClinicaCountOutputType without action
   */
  export type HistoriaClinicaCountOutputTypeCountAuditoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditoriaHistoriaWhereInput
  }


  /**
   * Count Type EpisodioClincoCountOutputType
   */

  export type EpisodioClincoCountOutputType = {
    signosVitales: number
    diagnosticos: number
    prescripciones: number
    documentosClinicos: number
    consentimientos: number
    auditorias: number
  }

  export type EpisodioClincoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    signosVitales?: boolean | EpisodioClincoCountOutputTypeCountSignosVitalesArgs
    diagnosticos?: boolean | EpisodioClincoCountOutputTypeCountDiagnosticosArgs
    prescripciones?: boolean | EpisodioClincoCountOutputTypeCountPrescripcionesArgs
    documentosClinicos?: boolean | EpisodioClincoCountOutputTypeCountDocumentosClinicosArgs
    consentimientos?: boolean | EpisodioClincoCountOutputTypeCountConsentimientosArgs
    auditorias?: boolean | EpisodioClincoCountOutputTypeCountAuditoriasArgs
  }

  // Custom InputTypes
  /**
   * EpisodioClincoCountOutputType without action
   */
  export type EpisodioClincoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClincoCountOutputType
     */
    select?: EpisodioClincoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EpisodioClincoCountOutputType without action
   */
  export type EpisodioClincoCountOutputTypeCountSignosVitalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignosVitalesWhereInput
  }

  /**
   * EpisodioClincoCountOutputType without action
   */
  export type EpisodioClincoCountOutputTypeCountDiagnosticosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiagnosticoWhereInput
  }

  /**
   * EpisodioClincoCountOutputType without action
   */
  export type EpisodioClincoCountOutputTypeCountPrescripcionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescripcionWhereInput
  }

  /**
   * EpisodioClincoCountOutputType without action
   */
  export type EpisodioClincoCountOutputTypeCountDocumentosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoClinicoWhereInput
  }

  /**
   * EpisodioClincoCountOutputType without action
   */
  export type EpisodioClincoCountOutputTypeCountConsentimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsentimientoInformadoWhereInput
  }

  /**
   * EpisodioClincoCountOutputType without action
   */
  export type EpisodioClincoCountOutputTypeCountAuditoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditoriaHistoriaWhereInput
  }


  /**
   * Count Type CodigoCIE10CountOutputType
   */

  export type CodigoCIE10CountOutputType = {
    diagnosticos: number
  }

  export type CodigoCIE10CountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    diagnosticos?: boolean | CodigoCIE10CountOutputTypeCountDiagnosticosArgs
  }

  // Custom InputTypes
  /**
   * CodigoCIE10CountOutputType without action
   */
  export type CodigoCIE10CountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10CountOutputType
     */
    select?: CodigoCIE10CountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CodigoCIE10CountOutputType without action
   */
  export type CodigoCIE10CountOutputTypeCountDiagnosticosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiagnosticoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nombreUsuario: string | null
    contrasenaHash: string | null
    tipoUsuario: $Enums.TipoUsuario | null
    email: string | null
    ultimoAcceso: Date | null
    activo: boolean | null
    fechaRegistro: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nombreUsuario: string | null
    contrasenaHash: string | null
    tipoUsuario: $Enums.TipoUsuario | null
    email: string | null
    ultimoAcceso: Date | null
    activo: boolean | null
    fechaRegistro: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nombreUsuario: number
    contrasenaHash: number
    tipoUsuario: number
    email: number
    ultimoAcceso: number
    activo: number
    fechaRegistro: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nombreUsuario?: true
    contrasenaHash?: true
    tipoUsuario?: true
    email?: true
    ultimoAcceso?: true
    activo?: true
    fechaRegistro?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nombreUsuario?: true
    contrasenaHash?: true
    tipoUsuario?: true
    email?: true
    ultimoAcceso?: true
    activo?: true
    fechaRegistro?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nombreUsuario?: true
    contrasenaHash?: true
    tipoUsuario?: true
    email?: true
    ultimoAcceso?: true
    activo?: true
    fechaRegistro?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso: Date | null
    activo: boolean
    fechaRegistro: Date
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreUsuario?: boolean
    contrasenaHash?: boolean
    tipoUsuario?: boolean
    email?: boolean
    ultimoAcceso?: boolean
    activo?: boolean
    fechaRegistro?: boolean
    medico?: boolean | Usuario$medicoArgs<ExtArgs>
    enfermera?: boolean | Usuario$enfermeraArgs<ExtArgs>
    auditorias?: boolean | Usuario$auditoriasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreUsuario?: boolean
    contrasenaHash?: boolean
    tipoUsuario?: boolean
    email?: boolean
    ultimoAcceso?: boolean
    activo?: boolean
    fechaRegistro?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreUsuario?: boolean
    contrasenaHash?: boolean
    tipoUsuario?: boolean
    email?: boolean
    ultimoAcceso?: boolean
    activo?: boolean
    fechaRegistro?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nombreUsuario?: boolean
    contrasenaHash?: boolean
    tipoUsuario?: boolean
    email?: boolean
    ultimoAcceso?: boolean
    activo?: boolean
    fechaRegistro?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombreUsuario" | "contrasenaHash" | "tipoUsuario" | "email" | "ultimoAcceso" | "activo" | "fechaRegistro", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medico?: boolean | Usuario$medicoArgs<ExtArgs>
    enfermera?: boolean | Usuario$enfermeraArgs<ExtArgs>
    auditorias?: boolean | Usuario$auditoriasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      medico: Prisma.$MedicoPayload<ExtArgs> | null
      enfermera: Prisma.$EnfermeraPayload<ExtArgs> | null
      auditorias: Prisma.$AuditoriaHistoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombreUsuario: string
      contrasenaHash: string
      tipoUsuario: $Enums.TipoUsuario
      email: string
      ultimoAcceso: Date | null
      activo: boolean
      fechaRegistro: Date
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medico<T extends Usuario$medicoArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$medicoArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    enfermera<T extends Usuario$enfermeraArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$enfermeraArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    auditorias<T extends Usuario$auditoriasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$auditoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nombreUsuario: FieldRef<"Usuario", 'String'>
    readonly contrasenaHash: FieldRef<"Usuario", 'String'>
    readonly tipoUsuario: FieldRef<"Usuario", 'TipoUsuario'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly ultimoAcceso: FieldRef<"Usuario", 'DateTime'>
    readonly activo: FieldRef<"Usuario", 'Boolean'>
    readonly fechaRegistro: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.medico
   */
  export type Usuario$medicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    where?: MedicoWhereInput
  }

  /**
   * Usuario.enfermera
   */
  export type Usuario$enfermeraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    where?: EnfermeraWhereInput
  }

  /**
   * Usuario.auditorias
   */
  export type Usuario$auditoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    where?: AuditoriaHistoriaWhereInput
    orderBy?: AuditoriaHistoriaOrderByWithRelationInput | AuditoriaHistoriaOrderByWithRelationInput[]
    cursor?: AuditoriaHistoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditoriaHistoriaScalarFieldEnum | AuditoriaHistoriaScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Medico
   */

  export type AggregateMedico = {
    _count: MedicoCountAggregateOutputType | null
    _avg: MedicoAvgAggregateOutputType | null
    _sum: MedicoSumAggregateOutputType | null
    _min: MedicoMinAggregateOutputType | null
    _max: MedicoMaxAggregateOutputType | null
  }

  export type MedicoAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type MedicoSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type MedicoMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    tipoDocumento: string | null
    numDocumento: string | null
    nombres: string | null
    apellidos: string | null
    numLicencia: string | null
    telefono: string | null
    correo: string | null
    fechaRegistro: Date | null
    activo: boolean | null
  }

  export type MedicoMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    tipoDocumento: string | null
    numDocumento: string | null
    nombres: string | null
    apellidos: string | null
    numLicencia: string | null
    telefono: string | null
    correo: string | null
    fechaRegistro: Date | null
    activo: boolean | null
  }

  export type MedicoCountAggregateOutputType = {
    id: number
    usuarioId: number
    tipoDocumento: number
    numDocumento: number
    nombres: number
    apellidos: number
    numLicencia: number
    telefono: number
    correo: number
    fechaRegistro: number
    activo: number
    _all: number
  }


  export type MedicoAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type MedicoSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type MedicoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    tipoDocumento?: true
    numDocumento?: true
    nombres?: true
    apellidos?: true
    numLicencia?: true
    telefono?: true
    correo?: true
    fechaRegistro?: true
    activo?: true
  }

  export type MedicoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    tipoDocumento?: true
    numDocumento?: true
    nombres?: true
    apellidos?: true
    numLicencia?: true
    telefono?: true
    correo?: true
    fechaRegistro?: true
    activo?: true
  }

  export type MedicoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    tipoDocumento?: true
    numDocumento?: true
    nombres?: true
    apellidos?: true
    numLicencia?: true
    telefono?: true
    correo?: true
    fechaRegistro?: true
    activo?: true
    _all?: true
  }

  export type MedicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medico to aggregate.
     */
    where?: MedicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicos to fetch.
     */
    orderBy?: MedicoOrderByWithRelationInput | MedicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medicos
    **/
    _count?: true | MedicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicoMaxAggregateInputType
  }

  export type GetMedicoAggregateType<T extends MedicoAggregateArgs> = {
        [P in keyof T & keyof AggregateMedico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedico[P]>
      : GetScalarType<T[P], AggregateMedico[P]>
  }




  export type MedicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicoWhereInput
    orderBy?: MedicoOrderByWithAggregationInput | MedicoOrderByWithAggregationInput[]
    by: MedicoScalarFieldEnum[] | MedicoScalarFieldEnum
    having?: MedicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicoCountAggregateInputType | true
    _avg?: MedicoAvgAggregateInputType
    _sum?: MedicoSumAggregateInputType
    _min?: MedicoMinAggregateInputType
    _max?: MedicoMaxAggregateInputType
  }

  export type MedicoGroupByOutputType = {
    id: number
    usuarioId: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono: string | null
    correo: string | null
    fechaRegistro: Date
    activo: boolean
    _count: MedicoCountAggregateOutputType | null
    _avg: MedicoAvgAggregateOutputType | null
    _sum: MedicoSumAggregateOutputType | null
    _min: MedicoMinAggregateOutputType | null
    _max: MedicoMaxAggregateOutputType | null
  }

  type GetMedicoGroupByPayload<T extends MedicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicoGroupByOutputType[P]>
            : GetScalarType<T[P], MedicoGroupByOutputType[P]>
        }
      >
    >


  export type MedicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    numLicencia?: boolean
    telefono?: boolean
    correo?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    especialidades?: boolean | Medico$especialidadesArgs<ExtArgs>
    episodiosClinicos?: boolean | Medico$episodiosClinicosArgs<ExtArgs>
    _count?: boolean | MedicoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medico"]>

  export type MedicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    numLicencia?: boolean
    telefono?: boolean
    correo?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medico"]>

  export type MedicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    numLicencia?: boolean
    telefono?: boolean
    correo?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medico"]>

  export type MedicoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    numLicencia?: boolean
    telefono?: boolean
    correo?: boolean
    fechaRegistro?: boolean
    activo?: boolean
  }

  export type MedicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "tipoDocumento" | "numDocumento" | "nombres" | "apellidos" | "numLicencia" | "telefono" | "correo" | "fechaRegistro" | "activo", ExtArgs["result"]["medico"]>
  export type MedicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    especialidades?: boolean | Medico$especialidadesArgs<ExtArgs>
    episodiosClinicos?: boolean | Medico$episodiosClinicosArgs<ExtArgs>
    _count?: boolean | MedicoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type MedicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $MedicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Medico"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      especialidades: Prisma.$MedicoEspecialidadPayload<ExtArgs>[]
      episodiosClinicos: Prisma.$EpisodioClincoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      tipoDocumento: string
      numDocumento: string
      nombres: string
      apellidos: string
      numLicencia: string
      telefono: string | null
      correo: string | null
      fechaRegistro: Date
      activo: boolean
    }, ExtArgs["result"]["medico"]>
    composites: {}
  }

  type MedicoGetPayload<S extends boolean | null | undefined | MedicoDefaultArgs> = $Result.GetResult<Prisma.$MedicoPayload, S>

  type MedicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicoCountAggregateInputType | true
    }

  export interface MedicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medico'], meta: { name: 'Medico' } }
    /**
     * Find zero or one Medico that matches the filter.
     * @param {MedicoFindUniqueArgs} args - Arguments to find a Medico
     * @example
     * // Get one Medico
     * const medico = await prisma.medico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicoFindUniqueArgs>(args: SelectSubset<T, MedicoFindUniqueArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Medico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicoFindUniqueOrThrowArgs} args - Arguments to find a Medico
     * @example
     * // Get one Medico
     * const medico = await prisma.medico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicoFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoFindFirstArgs} args - Arguments to find a Medico
     * @example
     * // Get one Medico
     * const medico = await prisma.medico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicoFindFirstArgs>(args?: SelectSubset<T, MedicoFindFirstArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoFindFirstOrThrowArgs} args - Arguments to find a Medico
     * @example
     * // Get one Medico
     * const medico = await prisma.medico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicoFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Medicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medicos
     * const medicos = await prisma.medico.findMany()
     * 
     * // Get first 10 Medicos
     * const medicos = await prisma.medico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicoWithIdOnly = await prisma.medico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicoFindManyArgs>(args?: SelectSubset<T, MedicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Medico.
     * @param {MedicoCreateArgs} args - Arguments to create a Medico.
     * @example
     * // Create one Medico
     * const Medico = await prisma.medico.create({
     *   data: {
     *     // ... data to create a Medico
     *   }
     * })
     * 
     */
    create<T extends MedicoCreateArgs>(args: SelectSubset<T, MedicoCreateArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Medicos.
     * @param {MedicoCreateManyArgs} args - Arguments to create many Medicos.
     * @example
     * // Create many Medicos
     * const medico = await prisma.medico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicoCreateManyArgs>(args?: SelectSubset<T, MedicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medicos and returns the data saved in the database.
     * @param {MedicoCreateManyAndReturnArgs} args - Arguments to create many Medicos.
     * @example
     * // Create many Medicos
     * const medico = await prisma.medico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medicos and only return the `id`
     * const medicoWithIdOnly = await prisma.medico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicoCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Medico.
     * @param {MedicoDeleteArgs} args - Arguments to delete one Medico.
     * @example
     * // Delete one Medico
     * const Medico = await prisma.medico.delete({
     *   where: {
     *     // ... filter to delete one Medico
     *   }
     * })
     * 
     */
    delete<T extends MedicoDeleteArgs>(args: SelectSubset<T, MedicoDeleteArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Medico.
     * @param {MedicoUpdateArgs} args - Arguments to update one Medico.
     * @example
     * // Update one Medico
     * const medico = await prisma.medico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicoUpdateArgs>(args: SelectSubset<T, MedicoUpdateArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Medicos.
     * @param {MedicoDeleteManyArgs} args - Arguments to filter Medicos to delete.
     * @example
     * // Delete a few Medicos
     * const { count } = await prisma.medico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicoDeleteManyArgs>(args?: SelectSubset<T, MedicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medicos
     * const medico = await prisma.medico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicoUpdateManyArgs>(args: SelectSubset<T, MedicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medicos and returns the data updated in the database.
     * @param {MedicoUpdateManyAndReturnArgs} args - Arguments to update many Medicos.
     * @example
     * // Update many Medicos
     * const medico = await prisma.medico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Medicos and only return the `id`
     * const medicoWithIdOnly = await prisma.medico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicoUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Medico.
     * @param {MedicoUpsertArgs} args - Arguments to update or create a Medico.
     * @example
     * // Update or create a Medico
     * const medico = await prisma.medico.upsert({
     *   create: {
     *     // ... data to create a Medico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medico we want to update
     *   }
     * })
     */
    upsert<T extends MedicoUpsertArgs>(args: SelectSubset<T, MedicoUpsertArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Medicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoCountArgs} args - Arguments to filter Medicos to count.
     * @example
     * // Count the number of Medicos
     * const count = await prisma.medico.count({
     *   where: {
     *     // ... the filter for the Medicos we want to count
     *   }
     * })
    **/
    count<T extends MedicoCountArgs>(
      args?: Subset<T, MedicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicoAggregateArgs>(args: Subset<T, MedicoAggregateArgs>): Prisma.PrismaPromise<GetMedicoAggregateType<T>>

    /**
     * Group by Medico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicoGroupByArgs['orderBy'] }
        : { orderBy?: MedicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Medico model
   */
  readonly fields: MedicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Medico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    especialidades<T extends Medico$especialidadesArgs<ExtArgs> = {}>(args?: Subset<T, Medico$especialidadesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    episodiosClinicos<T extends Medico$episodiosClinicosArgs<ExtArgs> = {}>(args?: Subset<T, Medico$episodiosClinicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Medico model
   */
  interface MedicoFieldRefs {
    readonly id: FieldRef<"Medico", 'Int'>
    readonly usuarioId: FieldRef<"Medico", 'Int'>
    readonly tipoDocumento: FieldRef<"Medico", 'String'>
    readonly numDocumento: FieldRef<"Medico", 'String'>
    readonly nombres: FieldRef<"Medico", 'String'>
    readonly apellidos: FieldRef<"Medico", 'String'>
    readonly numLicencia: FieldRef<"Medico", 'String'>
    readonly telefono: FieldRef<"Medico", 'String'>
    readonly correo: FieldRef<"Medico", 'String'>
    readonly fechaRegistro: FieldRef<"Medico", 'DateTime'>
    readonly activo: FieldRef<"Medico", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Medico findUnique
   */
  export type MedicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    /**
     * Filter, which Medico to fetch.
     */
    where: MedicoWhereUniqueInput
  }

  /**
   * Medico findUniqueOrThrow
   */
  export type MedicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    /**
     * Filter, which Medico to fetch.
     */
    where: MedicoWhereUniqueInput
  }

  /**
   * Medico findFirst
   */
  export type MedicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    /**
     * Filter, which Medico to fetch.
     */
    where?: MedicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicos to fetch.
     */
    orderBy?: MedicoOrderByWithRelationInput | MedicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medicos.
     */
    cursor?: MedicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medicos.
     */
    distinct?: MedicoScalarFieldEnum | MedicoScalarFieldEnum[]
  }

  /**
   * Medico findFirstOrThrow
   */
  export type MedicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    /**
     * Filter, which Medico to fetch.
     */
    where?: MedicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicos to fetch.
     */
    orderBy?: MedicoOrderByWithRelationInput | MedicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medicos.
     */
    cursor?: MedicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medicos.
     */
    distinct?: MedicoScalarFieldEnum | MedicoScalarFieldEnum[]
  }

  /**
   * Medico findMany
   */
  export type MedicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    /**
     * Filter, which Medicos to fetch.
     */
    where?: MedicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicos to fetch.
     */
    orderBy?: MedicoOrderByWithRelationInput | MedicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medicos.
     */
    cursor?: MedicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicos.
     */
    skip?: number
    distinct?: MedicoScalarFieldEnum | MedicoScalarFieldEnum[]
  }

  /**
   * Medico create
   */
  export type MedicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    /**
     * The data needed to create a Medico.
     */
    data: XOR<MedicoCreateInput, MedicoUncheckedCreateInput>
  }

  /**
   * Medico createMany
   */
  export type MedicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Medicos.
     */
    data: MedicoCreateManyInput | MedicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Medico createManyAndReturn
   */
  export type MedicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * The data used to create many Medicos.
     */
    data: MedicoCreateManyInput | MedicoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medico update
   */
  export type MedicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    /**
     * The data needed to update a Medico.
     */
    data: XOR<MedicoUpdateInput, MedicoUncheckedUpdateInput>
    /**
     * Choose, which Medico to update.
     */
    where: MedicoWhereUniqueInput
  }

  /**
   * Medico updateMany
   */
  export type MedicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Medicos.
     */
    data: XOR<MedicoUpdateManyMutationInput, MedicoUncheckedUpdateManyInput>
    /**
     * Filter which Medicos to update
     */
    where?: MedicoWhereInput
    /**
     * Limit how many Medicos to update.
     */
    limit?: number
  }

  /**
   * Medico updateManyAndReturn
   */
  export type MedicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * The data used to update Medicos.
     */
    data: XOR<MedicoUpdateManyMutationInput, MedicoUncheckedUpdateManyInput>
    /**
     * Filter which Medicos to update
     */
    where?: MedicoWhereInput
    /**
     * Limit how many Medicos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medico upsert
   */
  export type MedicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    /**
     * The filter to search for the Medico to update in case it exists.
     */
    where: MedicoWhereUniqueInput
    /**
     * In case the Medico found by the `where` argument doesn't exist, create a new Medico with this data.
     */
    create: XOR<MedicoCreateInput, MedicoUncheckedCreateInput>
    /**
     * In case the Medico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicoUpdateInput, MedicoUncheckedUpdateInput>
  }

  /**
   * Medico delete
   */
  export type MedicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    /**
     * Filter which Medico to delete.
     */
    where: MedicoWhereUniqueInput
  }

  /**
   * Medico deleteMany
   */
  export type MedicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medicos to delete
     */
    where?: MedicoWhereInput
    /**
     * Limit how many Medicos to delete.
     */
    limit?: number
  }

  /**
   * Medico.especialidades
   */
  export type Medico$especialidadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    where?: MedicoEspecialidadWhereInput
    orderBy?: MedicoEspecialidadOrderByWithRelationInput | MedicoEspecialidadOrderByWithRelationInput[]
    cursor?: MedicoEspecialidadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicoEspecialidadScalarFieldEnum | MedicoEspecialidadScalarFieldEnum[]
  }

  /**
   * Medico.episodiosClinicos
   */
  export type Medico$episodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    where?: EpisodioClincoWhereInput
    orderBy?: EpisodioClincoOrderByWithRelationInput | EpisodioClincoOrderByWithRelationInput[]
    cursor?: EpisodioClincoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodioClincoScalarFieldEnum | EpisodioClincoScalarFieldEnum[]
  }

  /**
   * Medico without action
   */
  export type MedicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
  }


  /**
   * Model Enfermera
   */

  export type AggregateEnfermera = {
    _count: EnfermeraCountAggregateOutputType | null
    _avg: EnfermeraAvgAggregateOutputType | null
    _sum: EnfermeraSumAggregateOutputType | null
    _min: EnfermeraMinAggregateOutputType | null
    _max: EnfermeraMaxAggregateOutputType | null
  }

  export type EnfermeraAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type EnfermeraSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type EnfermeraMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    tipoDocumento: string | null
    numDocumento: string | null
    nombres: string | null
    apellidos: string | null
    numLicencia: string | null
    telefono: string | null
    correo: string | null
    fechaRegistro: Date | null
    activo: boolean | null
  }

  export type EnfermeraMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    tipoDocumento: string | null
    numDocumento: string | null
    nombres: string | null
    apellidos: string | null
    numLicencia: string | null
    telefono: string | null
    correo: string | null
    fechaRegistro: Date | null
    activo: boolean | null
  }

  export type EnfermeraCountAggregateOutputType = {
    id: number
    usuarioId: number
    tipoDocumento: number
    numDocumento: number
    nombres: number
    apellidos: number
    numLicencia: number
    telefono: number
    correo: number
    fechaRegistro: number
    activo: number
    _all: number
  }


  export type EnfermeraAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type EnfermeraSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type EnfermeraMinAggregateInputType = {
    id?: true
    usuarioId?: true
    tipoDocumento?: true
    numDocumento?: true
    nombres?: true
    apellidos?: true
    numLicencia?: true
    telefono?: true
    correo?: true
    fechaRegistro?: true
    activo?: true
  }

  export type EnfermeraMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    tipoDocumento?: true
    numDocumento?: true
    nombres?: true
    apellidos?: true
    numLicencia?: true
    telefono?: true
    correo?: true
    fechaRegistro?: true
    activo?: true
  }

  export type EnfermeraCountAggregateInputType = {
    id?: true
    usuarioId?: true
    tipoDocumento?: true
    numDocumento?: true
    nombres?: true
    apellidos?: true
    numLicencia?: true
    telefono?: true
    correo?: true
    fechaRegistro?: true
    activo?: true
    _all?: true
  }

  export type EnfermeraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enfermera to aggregate.
     */
    where?: EnfermeraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enfermeras to fetch.
     */
    orderBy?: EnfermeraOrderByWithRelationInput | EnfermeraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnfermeraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enfermeras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enfermeras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enfermeras
    **/
    _count?: true | EnfermeraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnfermeraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnfermeraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnfermeraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnfermeraMaxAggregateInputType
  }

  export type GetEnfermeraAggregateType<T extends EnfermeraAggregateArgs> = {
        [P in keyof T & keyof AggregateEnfermera]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnfermera[P]>
      : GetScalarType<T[P], AggregateEnfermera[P]>
  }




  export type EnfermeraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnfermeraWhereInput
    orderBy?: EnfermeraOrderByWithAggregationInput | EnfermeraOrderByWithAggregationInput[]
    by: EnfermeraScalarFieldEnum[] | EnfermeraScalarFieldEnum
    having?: EnfermeraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnfermeraCountAggregateInputType | true
    _avg?: EnfermeraAvgAggregateInputType
    _sum?: EnfermeraSumAggregateInputType
    _min?: EnfermeraMinAggregateInputType
    _max?: EnfermeraMaxAggregateInputType
  }

  export type EnfermeraGroupByOutputType = {
    id: number
    usuarioId: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono: string | null
    correo: string | null
    fechaRegistro: Date
    activo: boolean
    _count: EnfermeraCountAggregateOutputType | null
    _avg: EnfermeraAvgAggregateOutputType | null
    _sum: EnfermeraSumAggregateOutputType | null
    _min: EnfermeraMinAggregateOutputType | null
    _max: EnfermeraMaxAggregateOutputType | null
  }

  type GetEnfermeraGroupByPayload<T extends EnfermeraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnfermeraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnfermeraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnfermeraGroupByOutputType[P]>
            : GetScalarType<T[P], EnfermeraGroupByOutputType[P]>
        }
      >
    >


  export type EnfermeraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    numLicencia?: boolean
    telefono?: boolean
    correo?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    episodiosClinicos?: boolean | Enfermera$episodiosClinicosArgs<ExtArgs>
    _count?: boolean | EnfermeraCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enfermera"]>

  export type EnfermeraSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    numLicencia?: boolean
    telefono?: boolean
    correo?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enfermera"]>

  export type EnfermeraSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    numLicencia?: boolean
    telefono?: boolean
    correo?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enfermera"]>

  export type EnfermeraSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    numLicencia?: boolean
    telefono?: boolean
    correo?: boolean
    fechaRegistro?: boolean
    activo?: boolean
  }

  export type EnfermeraOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "tipoDocumento" | "numDocumento" | "nombres" | "apellidos" | "numLicencia" | "telefono" | "correo" | "fechaRegistro" | "activo", ExtArgs["result"]["enfermera"]>
  export type EnfermeraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    episodiosClinicos?: boolean | Enfermera$episodiosClinicosArgs<ExtArgs>
    _count?: boolean | EnfermeraCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EnfermeraIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type EnfermeraIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $EnfermeraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enfermera"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      episodiosClinicos: Prisma.$EpisodioClincoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      tipoDocumento: string
      numDocumento: string
      nombres: string
      apellidos: string
      numLicencia: string
      telefono: string | null
      correo: string | null
      fechaRegistro: Date
      activo: boolean
    }, ExtArgs["result"]["enfermera"]>
    composites: {}
  }

  type EnfermeraGetPayload<S extends boolean | null | undefined | EnfermeraDefaultArgs> = $Result.GetResult<Prisma.$EnfermeraPayload, S>

  type EnfermeraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EnfermeraFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EnfermeraCountAggregateInputType | true
    }

  export interface EnfermeraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enfermera'], meta: { name: 'Enfermera' } }
    /**
     * Find zero or one Enfermera that matches the filter.
     * @param {EnfermeraFindUniqueArgs} args - Arguments to find a Enfermera
     * @example
     * // Get one Enfermera
     * const enfermera = await prisma.enfermera.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnfermeraFindUniqueArgs>(args: SelectSubset<T, EnfermeraFindUniqueArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Enfermera that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EnfermeraFindUniqueOrThrowArgs} args - Arguments to find a Enfermera
     * @example
     * // Get one Enfermera
     * const enfermera = await prisma.enfermera.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnfermeraFindUniqueOrThrowArgs>(args: SelectSubset<T, EnfermeraFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Enfermera that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfermeraFindFirstArgs} args - Arguments to find a Enfermera
     * @example
     * // Get one Enfermera
     * const enfermera = await prisma.enfermera.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnfermeraFindFirstArgs>(args?: SelectSubset<T, EnfermeraFindFirstArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Enfermera that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfermeraFindFirstOrThrowArgs} args - Arguments to find a Enfermera
     * @example
     * // Get one Enfermera
     * const enfermera = await prisma.enfermera.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnfermeraFindFirstOrThrowArgs>(args?: SelectSubset<T, EnfermeraFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Enfermeras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfermeraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enfermeras
     * const enfermeras = await prisma.enfermera.findMany()
     * 
     * // Get first 10 Enfermeras
     * const enfermeras = await prisma.enfermera.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enfermeraWithIdOnly = await prisma.enfermera.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnfermeraFindManyArgs>(args?: SelectSubset<T, EnfermeraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Enfermera.
     * @param {EnfermeraCreateArgs} args - Arguments to create a Enfermera.
     * @example
     * // Create one Enfermera
     * const Enfermera = await prisma.enfermera.create({
     *   data: {
     *     // ... data to create a Enfermera
     *   }
     * })
     * 
     */
    create<T extends EnfermeraCreateArgs>(args: SelectSubset<T, EnfermeraCreateArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Enfermeras.
     * @param {EnfermeraCreateManyArgs} args - Arguments to create many Enfermeras.
     * @example
     * // Create many Enfermeras
     * const enfermera = await prisma.enfermera.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnfermeraCreateManyArgs>(args?: SelectSubset<T, EnfermeraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Enfermeras and returns the data saved in the database.
     * @param {EnfermeraCreateManyAndReturnArgs} args - Arguments to create many Enfermeras.
     * @example
     * // Create many Enfermeras
     * const enfermera = await prisma.enfermera.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Enfermeras and only return the `id`
     * const enfermeraWithIdOnly = await prisma.enfermera.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnfermeraCreateManyAndReturnArgs>(args?: SelectSubset<T, EnfermeraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Enfermera.
     * @param {EnfermeraDeleteArgs} args - Arguments to delete one Enfermera.
     * @example
     * // Delete one Enfermera
     * const Enfermera = await prisma.enfermera.delete({
     *   where: {
     *     // ... filter to delete one Enfermera
     *   }
     * })
     * 
     */
    delete<T extends EnfermeraDeleteArgs>(args: SelectSubset<T, EnfermeraDeleteArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Enfermera.
     * @param {EnfermeraUpdateArgs} args - Arguments to update one Enfermera.
     * @example
     * // Update one Enfermera
     * const enfermera = await prisma.enfermera.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnfermeraUpdateArgs>(args: SelectSubset<T, EnfermeraUpdateArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Enfermeras.
     * @param {EnfermeraDeleteManyArgs} args - Arguments to filter Enfermeras to delete.
     * @example
     * // Delete a few Enfermeras
     * const { count } = await prisma.enfermera.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnfermeraDeleteManyArgs>(args?: SelectSubset<T, EnfermeraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enfermeras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfermeraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enfermeras
     * const enfermera = await prisma.enfermera.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnfermeraUpdateManyArgs>(args: SelectSubset<T, EnfermeraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enfermeras and returns the data updated in the database.
     * @param {EnfermeraUpdateManyAndReturnArgs} args - Arguments to update many Enfermeras.
     * @example
     * // Update many Enfermeras
     * const enfermera = await prisma.enfermera.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Enfermeras and only return the `id`
     * const enfermeraWithIdOnly = await prisma.enfermera.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EnfermeraUpdateManyAndReturnArgs>(args: SelectSubset<T, EnfermeraUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Enfermera.
     * @param {EnfermeraUpsertArgs} args - Arguments to update or create a Enfermera.
     * @example
     * // Update or create a Enfermera
     * const enfermera = await prisma.enfermera.upsert({
     *   create: {
     *     // ... data to create a Enfermera
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enfermera we want to update
     *   }
     * })
     */
    upsert<T extends EnfermeraUpsertArgs>(args: SelectSubset<T, EnfermeraUpsertArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Enfermeras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfermeraCountArgs} args - Arguments to filter Enfermeras to count.
     * @example
     * // Count the number of Enfermeras
     * const count = await prisma.enfermera.count({
     *   where: {
     *     // ... the filter for the Enfermeras we want to count
     *   }
     * })
    **/
    count<T extends EnfermeraCountArgs>(
      args?: Subset<T, EnfermeraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnfermeraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enfermera.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfermeraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnfermeraAggregateArgs>(args: Subset<T, EnfermeraAggregateArgs>): Prisma.PrismaPromise<GetEnfermeraAggregateType<T>>

    /**
     * Group by Enfermera.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfermeraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnfermeraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnfermeraGroupByArgs['orderBy'] }
        : { orderBy?: EnfermeraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnfermeraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnfermeraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enfermera model
   */
  readonly fields: EnfermeraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enfermera.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnfermeraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    episodiosClinicos<T extends Enfermera$episodiosClinicosArgs<ExtArgs> = {}>(args?: Subset<T, Enfermera$episodiosClinicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Enfermera model
   */
  interface EnfermeraFieldRefs {
    readonly id: FieldRef<"Enfermera", 'Int'>
    readonly usuarioId: FieldRef<"Enfermera", 'Int'>
    readonly tipoDocumento: FieldRef<"Enfermera", 'String'>
    readonly numDocumento: FieldRef<"Enfermera", 'String'>
    readonly nombres: FieldRef<"Enfermera", 'String'>
    readonly apellidos: FieldRef<"Enfermera", 'String'>
    readonly numLicencia: FieldRef<"Enfermera", 'String'>
    readonly telefono: FieldRef<"Enfermera", 'String'>
    readonly correo: FieldRef<"Enfermera", 'String'>
    readonly fechaRegistro: FieldRef<"Enfermera", 'DateTime'>
    readonly activo: FieldRef<"Enfermera", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Enfermera findUnique
   */
  export type EnfermeraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    /**
     * Filter, which Enfermera to fetch.
     */
    where: EnfermeraWhereUniqueInput
  }

  /**
   * Enfermera findUniqueOrThrow
   */
  export type EnfermeraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    /**
     * Filter, which Enfermera to fetch.
     */
    where: EnfermeraWhereUniqueInput
  }

  /**
   * Enfermera findFirst
   */
  export type EnfermeraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    /**
     * Filter, which Enfermera to fetch.
     */
    where?: EnfermeraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enfermeras to fetch.
     */
    orderBy?: EnfermeraOrderByWithRelationInput | EnfermeraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enfermeras.
     */
    cursor?: EnfermeraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enfermeras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enfermeras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enfermeras.
     */
    distinct?: EnfermeraScalarFieldEnum | EnfermeraScalarFieldEnum[]
  }

  /**
   * Enfermera findFirstOrThrow
   */
  export type EnfermeraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    /**
     * Filter, which Enfermera to fetch.
     */
    where?: EnfermeraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enfermeras to fetch.
     */
    orderBy?: EnfermeraOrderByWithRelationInput | EnfermeraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enfermeras.
     */
    cursor?: EnfermeraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enfermeras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enfermeras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enfermeras.
     */
    distinct?: EnfermeraScalarFieldEnum | EnfermeraScalarFieldEnum[]
  }

  /**
   * Enfermera findMany
   */
  export type EnfermeraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    /**
     * Filter, which Enfermeras to fetch.
     */
    where?: EnfermeraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enfermeras to fetch.
     */
    orderBy?: EnfermeraOrderByWithRelationInput | EnfermeraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enfermeras.
     */
    cursor?: EnfermeraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enfermeras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enfermeras.
     */
    skip?: number
    distinct?: EnfermeraScalarFieldEnum | EnfermeraScalarFieldEnum[]
  }

  /**
   * Enfermera create
   */
  export type EnfermeraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    /**
     * The data needed to create a Enfermera.
     */
    data: XOR<EnfermeraCreateInput, EnfermeraUncheckedCreateInput>
  }

  /**
   * Enfermera createMany
   */
  export type EnfermeraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enfermeras.
     */
    data: EnfermeraCreateManyInput | EnfermeraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Enfermera createManyAndReturn
   */
  export type EnfermeraCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * The data used to create many Enfermeras.
     */
    data: EnfermeraCreateManyInput | EnfermeraCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enfermera update
   */
  export type EnfermeraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    /**
     * The data needed to update a Enfermera.
     */
    data: XOR<EnfermeraUpdateInput, EnfermeraUncheckedUpdateInput>
    /**
     * Choose, which Enfermera to update.
     */
    where: EnfermeraWhereUniqueInput
  }

  /**
   * Enfermera updateMany
   */
  export type EnfermeraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enfermeras.
     */
    data: XOR<EnfermeraUpdateManyMutationInput, EnfermeraUncheckedUpdateManyInput>
    /**
     * Filter which Enfermeras to update
     */
    where?: EnfermeraWhereInput
    /**
     * Limit how many Enfermeras to update.
     */
    limit?: number
  }

  /**
   * Enfermera updateManyAndReturn
   */
  export type EnfermeraUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * The data used to update Enfermeras.
     */
    data: XOR<EnfermeraUpdateManyMutationInput, EnfermeraUncheckedUpdateManyInput>
    /**
     * Filter which Enfermeras to update
     */
    where?: EnfermeraWhereInput
    /**
     * Limit how many Enfermeras to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enfermera upsert
   */
  export type EnfermeraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    /**
     * The filter to search for the Enfermera to update in case it exists.
     */
    where: EnfermeraWhereUniqueInput
    /**
     * In case the Enfermera found by the `where` argument doesn't exist, create a new Enfermera with this data.
     */
    create: XOR<EnfermeraCreateInput, EnfermeraUncheckedCreateInput>
    /**
     * In case the Enfermera was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnfermeraUpdateInput, EnfermeraUncheckedUpdateInput>
  }

  /**
   * Enfermera delete
   */
  export type EnfermeraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
    /**
     * Filter which Enfermera to delete.
     */
    where: EnfermeraWhereUniqueInput
  }

  /**
   * Enfermera deleteMany
   */
  export type EnfermeraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enfermeras to delete
     */
    where?: EnfermeraWhereInput
    /**
     * Limit how many Enfermeras to delete.
     */
    limit?: number
  }

  /**
   * Enfermera.episodiosClinicos
   */
  export type Enfermera$episodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    where?: EpisodioClincoWhereInput
    orderBy?: EpisodioClincoOrderByWithRelationInput | EpisodioClincoOrderByWithRelationInput[]
    cursor?: EpisodioClincoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodioClincoScalarFieldEnum | EpisodioClincoScalarFieldEnum[]
  }

  /**
   * Enfermera without action
   */
  export type EnfermeraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enfermera
     */
    select?: EnfermeraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enfermera
     */
    omit?: EnfermeraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnfermeraInclude<ExtArgs> | null
  }


  /**
   * Model Facultad
   */

  export type AggregateFacultad = {
    _count: FacultadCountAggregateOutputType | null
    _avg: FacultadAvgAggregateOutputType | null
    _sum: FacultadSumAggregateOutputType | null
    _min: FacultadMinAggregateOutputType | null
    _max: FacultadMaxAggregateOutputType | null
  }

  export type FacultadAvgAggregateOutputType = {
    id: number | null
  }

  export type FacultadSumAggregateOutputType = {
    id: number | null
  }

  export type FacultadMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    codigo: string | null
    descripcion: string | null
    activo: boolean | null
  }

  export type FacultadMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    codigo: string | null
    descripcion: string | null
    activo: boolean | null
  }

  export type FacultadCountAggregateOutputType = {
    id: number
    nombre: number
    codigo: number
    descripcion: number
    activo: number
    _all: number
  }


  export type FacultadAvgAggregateInputType = {
    id?: true
  }

  export type FacultadSumAggregateInputType = {
    id?: true
  }

  export type FacultadMinAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    descripcion?: true
    activo?: true
  }

  export type FacultadMaxAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    descripcion?: true
    activo?: true
  }

  export type FacultadCountAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    descripcion?: true
    activo?: true
    _all?: true
  }

  export type FacultadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Facultad to aggregate.
     */
    where?: FacultadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facultads to fetch.
     */
    orderBy?: FacultadOrderByWithRelationInput | FacultadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacultadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facultads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facultads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Facultads
    **/
    _count?: true | FacultadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacultadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacultadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacultadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacultadMaxAggregateInputType
  }

  export type GetFacultadAggregateType<T extends FacultadAggregateArgs> = {
        [P in keyof T & keyof AggregateFacultad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacultad[P]>
      : GetScalarType<T[P], AggregateFacultad[P]>
  }




  export type FacultadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacultadWhereInput
    orderBy?: FacultadOrderByWithAggregationInput | FacultadOrderByWithAggregationInput[]
    by: FacultadScalarFieldEnum[] | FacultadScalarFieldEnum
    having?: FacultadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacultadCountAggregateInputType | true
    _avg?: FacultadAvgAggregateInputType
    _sum?: FacultadSumAggregateInputType
    _min?: FacultadMinAggregateInputType
    _max?: FacultadMaxAggregateInputType
  }

  export type FacultadGroupByOutputType = {
    id: number
    nombre: string
    codigo: string
    descripcion: string | null
    activo: boolean
    _count: FacultadCountAggregateOutputType | null
    _avg: FacultadAvgAggregateOutputType | null
    _sum: FacultadSumAggregateOutputType | null
    _min: FacultadMinAggregateOutputType | null
    _max: FacultadMaxAggregateOutputType | null
  }

  type GetFacultadGroupByPayload<T extends FacultadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacultadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacultadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacultadGroupByOutputType[P]>
            : GetScalarType<T[P], FacultadGroupByOutputType[P]>
        }
      >
    >


  export type FacultadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    descripcion?: boolean
    activo?: boolean
    programasAcademicos?: boolean | Facultad$programasAcademicosArgs<ExtArgs>
    _count?: boolean | FacultadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["facultad"]>

  export type FacultadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    descripcion?: boolean
    activo?: boolean
  }, ExtArgs["result"]["facultad"]>

  export type FacultadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    descripcion?: boolean
    activo?: boolean
  }, ExtArgs["result"]["facultad"]>

  export type FacultadSelectScalar = {
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    descripcion?: boolean
    activo?: boolean
  }

  export type FacultadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "codigo" | "descripcion" | "activo", ExtArgs["result"]["facultad"]>
  export type FacultadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programasAcademicos?: boolean | Facultad$programasAcademicosArgs<ExtArgs>
    _count?: boolean | FacultadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FacultadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FacultadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FacultadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Facultad"
    objects: {
      programasAcademicos: Prisma.$ProgramaAcademicoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      codigo: string
      descripcion: string | null
      activo: boolean
    }, ExtArgs["result"]["facultad"]>
    composites: {}
  }

  type FacultadGetPayload<S extends boolean | null | undefined | FacultadDefaultArgs> = $Result.GetResult<Prisma.$FacultadPayload, S>

  type FacultadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FacultadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FacultadCountAggregateInputType | true
    }

  export interface FacultadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Facultad'], meta: { name: 'Facultad' } }
    /**
     * Find zero or one Facultad that matches the filter.
     * @param {FacultadFindUniqueArgs} args - Arguments to find a Facultad
     * @example
     * // Get one Facultad
     * const facultad = await prisma.facultad.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FacultadFindUniqueArgs>(args: SelectSubset<T, FacultadFindUniqueArgs<ExtArgs>>): Prisma__FacultadClient<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Facultad that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FacultadFindUniqueOrThrowArgs} args - Arguments to find a Facultad
     * @example
     * // Get one Facultad
     * const facultad = await prisma.facultad.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FacultadFindUniqueOrThrowArgs>(args: SelectSubset<T, FacultadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FacultadClient<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Facultad that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultadFindFirstArgs} args - Arguments to find a Facultad
     * @example
     * // Get one Facultad
     * const facultad = await prisma.facultad.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FacultadFindFirstArgs>(args?: SelectSubset<T, FacultadFindFirstArgs<ExtArgs>>): Prisma__FacultadClient<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Facultad that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultadFindFirstOrThrowArgs} args - Arguments to find a Facultad
     * @example
     * // Get one Facultad
     * const facultad = await prisma.facultad.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FacultadFindFirstOrThrowArgs>(args?: SelectSubset<T, FacultadFindFirstOrThrowArgs<ExtArgs>>): Prisma__FacultadClient<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Facultads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Facultads
     * const facultads = await prisma.facultad.findMany()
     * 
     * // Get first 10 Facultads
     * const facultads = await prisma.facultad.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facultadWithIdOnly = await prisma.facultad.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FacultadFindManyArgs>(args?: SelectSubset<T, FacultadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Facultad.
     * @param {FacultadCreateArgs} args - Arguments to create a Facultad.
     * @example
     * // Create one Facultad
     * const Facultad = await prisma.facultad.create({
     *   data: {
     *     // ... data to create a Facultad
     *   }
     * })
     * 
     */
    create<T extends FacultadCreateArgs>(args: SelectSubset<T, FacultadCreateArgs<ExtArgs>>): Prisma__FacultadClient<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Facultads.
     * @param {FacultadCreateManyArgs} args - Arguments to create many Facultads.
     * @example
     * // Create many Facultads
     * const facultad = await prisma.facultad.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FacultadCreateManyArgs>(args?: SelectSubset<T, FacultadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Facultads and returns the data saved in the database.
     * @param {FacultadCreateManyAndReturnArgs} args - Arguments to create many Facultads.
     * @example
     * // Create many Facultads
     * const facultad = await prisma.facultad.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Facultads and only return the `id`
     * const facultadWithIdOnly = await prisma.facultad.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FacultadCreateManyAndReturnArgs>(args?: SelectSubset<T, FacultadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Facultad.
     * @param {FacultadDeleteArgs} args - Arguments to delete one Facultad.
     * @example
     * // Delete one Facultad
     * const Facultad = await prisma.facultad.delete({
     *   where: {
     *     // ... filter to delete one Facultad
     *   }
     * })
     * 
     */
    delete<T extends FacultadDeleteArgs>(args: SelectSubset<T, FacultadDeleteArgs<ExtArgs>>): Prisma__FacultadClient<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Facultad.
     * @param {FacultadUpdateArgs} args - Arguments to update one Facultad.
     * @example
     * // Update one Facultad
     * const facultad = await prisma.facultad.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FacultadUpdateArgs>(args: SelectSubset<T, FacultadUpdateArgs<ExtArgs>>): Prisma__FacultadClient<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Facultads.
     * @param {FacultadDeleteManyArgs} args - Arguments to filter Facultads to delete.
     * @example
     * // Delete a few Facultads
     * const { count } = await prisma.facultad.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FacultadDeleteManyArgs>(args?: SelectSubset<T, FacultadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Facultads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Facultads
     * const facultad = await prisma.facultad.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FacultadUpdateManyArgs>(args: SelectSubset<T, FacultadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Facultads and returns the data updated in the database.
     * @param {FacultadUpdateManyAndReturnArgs} args - Arguments to update many Facultads.
     * @example
     * // Update many Facultads
     * const facultad = await prisma.facultad.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Facultads and only return the `id`
     * const facultadWithIdOnly = await prisma.facultad.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FacultadUpdateManyAndReturnArgs>(args: SelectSubset<T, FacultadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Facultad.
     * @param {FacultadUpsertArgs} args - Arguments to update or create a Facultad.
     * @example
     * // Update or create a Facultad
     * const facultad = await prisma.facultad.upsert({
     *   create: {
     *     // ... data to create a Facultad
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Facultad we want to update
     *   }
     * })
     */
    upsert<T extends FacultadUpsertArgs>(args: SelectSubset<T, FacultadUpsertArgs<ExtArgs>>): Prisma__FacultadClient<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Facultads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultadCountArgs} args - Arguments to filter Facultads to count.
     * @example
     * // Count the number of Facultads
     * const count = await prisma.facultad.count({
     *   where: {
     *     // ... the filter for the Facultads we want to count
     *   }
     * })
    **/
    count<T extends FacultadCountArgs>(
      args?: Subset<T, FacultadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacultadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Facultad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacultadAggregateArgs>(args: Subset<T, FacultadAggregateArgs>): Prisma.PrismaPromise<GetFacultadAggregateType<T>>

    /**
     * Group by Facultad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacultadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacultadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacultadGroupByArgs['orderBy'] }
        : { orderBy?: FacultadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacultadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacultadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Facultad model
   */
  readonly fields: FacultadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Facultad.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacultadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    programasAcademicos<T extends Facultad$programasAcademicosArgs<ExtArgs> = {}>(args?: Subset<T, Facultad$programasAcademicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Facultad model
   */
  interface FacultadFieldRefs {
    readonly id: FieldRef<"Facultad", 'Int'>
    readonly nombre: FieldRef<"Facultad", 'String'>
    readonly codigo: FieldRef<"Facultad", 'String'>
    readonly descripcion: FieldRef<"Facultad", 'String'>
    readonly activo: FieldRef<"Facultad", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Facultad findUnique
   */
  export type FacultadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
    /**
     * Filter, which Facultad to fetch.
     */
    where: FacultadWhereUniqueInput
  }

  /**
   * Facultad findUniqueOrThrow
   */
  export type FacultadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
    /**
     * Filter, which Facultad to fetch.
     */
    where: FacultadWhereUniqueInput
  }

  /**
   * Facultad findFirst
   */
  export type FacultadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
    /**
     * Filter, which Facultad to fetch.
     */
    where?: FacultadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facultads to fetch.
     */
    orderBy?: FacultadOrderByWithRelationInput | FacultadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Facultads.
     */
    cursor?: FacultadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facultads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facultads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Facultads.
     */
    distinct?: FacultadScalarFieldEnum | FacultadScalarFieldEnum[]
  }

  /**
   * Facultad findFirstOrThrow
   */
  export type FacultadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
    /**
     * Filter, which Facultad to fetch.
     */
    where?: FacultadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facultads to fetch.
     */
    orderBy?: FacultadOrderByWithRelationInput | FacultadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Facultads.
     */
    cursor?: FacultadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facultads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facultads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Facultads.
     */
    distinct?: FacultadScalarFieldEnum | FacultadScalarFieldEnum[]
  }

  /**
   * Facultad findMany
   */
  export type FacultadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
    /**
     * Filter, which Facultads to fetch.
     */
    where?: FacultadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facultads to fetch.
     */
    orderBy?: FacultadOrderByWithRelationInput | FacultadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Facultads.
     */
    cursor?: FacultadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facultads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facultads.
     */
    skip?: number
    distinct?: FacultadScalarFieldEnum | FacultadScalarFieldEnum[]
  }

  /**
   * Facultad create
   */
  export type FacultadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
    /**
     * The data needed to create a Facultad.
     */
    data: XOR<FacultadCreateInput, FacultadUncheckedCreateInput>
  }

  /**
   * Facultad createMany
   */
  export type FacultadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Facultads.
     */
    data: FacultadCreateManyInput | FacultadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Facultad createManyAndReturn
   */
  export type FacultadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * The data used to create many Facultads.
     */
    data: FacultadCreateManyInput | FacultadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Facultad update
   */
  export type FacultadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
    /**
     * The data needed to update a Facultad.
     */
    data: XOR<FacultadUpdateInput, FacultadUncheckedUpdateInput>
    /**
     * Choose, which Facultad to update.
     */
    where: FacultadWhereUniqueInput
  }

  /**
   * Facultad updateMany
   */
  export type FacultadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Facultads.
     */
    data: XOR<FacultadUpdateManyMutationInput, FacultadUncheckedUpdateManyInput>
    /**
     * Filter which Facultads to update
     */
    where?: FacultadWhereInput
    /**
     * Limit how many Facultads to update.
     */
    limit?: number
  }

  /**
   * Facultad updateManyAndReturn
   */
  export type FacultadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * The data used to update Facultads.
     */
    data: XOR<FacultadUpdateManyMutationInput, FacultadUncheckedUpdateManyInput>
    /**
     * Filter which Facultads to update
     */
    where?: FacultadWhereInput
    /**
     * Limit how many Facultads to update.
     */
    limit?: number
  }

  /**
   * Facultad upsert
   */
  export type FacultadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
    /**
     * The filter to search for the Facultad to update in case it exists.
     */
    where: FacultadWhereUniqueInput
    /**
     * In case the Facultad found by the `where` argument doesn't exist, create a new Facultad with this data.
     */
    create: XOR<FacultadCreateInput, FacultadUncheckedCreateInput>
    /**
     * In case the Facultad was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacultadUpdateInput, FacultadUncheckedUpdateInput>
  }

  /**
   * Facultad delete
   */
  export type FacultadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
    /**
     * Filter which Facultad to delete.
     */
    where: FacultadWhereUniqueInput
  }

  /**
   * Facultad deleteMany
   */
  export type FacultadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Facultads to delete
     */
    where?: FacultadWhereInput
    /**
     * Limit how many Facultads to delete.
     */
    limit?: number
  }

  /**
   * Facultad.programasAcademicos
   */
  export type Facultad$programasAcademicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    where?: ProgramaAcademicoWhereInput
    orderBy?: ProgramaAcademicoOrderByWithRelationInput | ProgramaAcademicoOrderByWithRelationInput[]
    cursor?: ProgramaAcademicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgramaAcademicoScalarFieldEnum | ProgramaAcademicoScalarFieldEnum[]
  }

  /**
   * Facultad without action
   */
  export type FacultadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facultad
     */
    select?: FacultadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Facultad
     */
    omit?: FacultadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacultadInclude<ExtArgs> | null
  }


  /**
   * Model ProgramaAcademico
   */

  export type AggregateProgramaAcademico = {
    _count: ProgramaAcademicoCountAggregateOutputType | null
    _avg: ProgramaAcademicoAvgAggregateOutputType | null
    _sum: ProgramaAcademicoSumAggregateOutputType | null
    _min: ProgramaAcademicoMinAggregateOutputType | null
    _max: ProgramaAcademicoMaxAggregateOutputType | null
  }

  export type ProgramaAcademicoAvgAggregateOutputType = {
    id: number | null
    facultadId: number | null
  }

  export type ProgramaAcademicoSumAggregateOutputType = {
    id: number | null
    facultadId: number | null
  }

  export type ProgramaAcademicoMinAggregateOutputType = {
    id: number | null
    facultadId: number | null
    nombre: string | null
    codigo: string | null
    descripcion: string | null
    nivel: string | null
    activo: boolean | null
  }

  export type ProgramaAcademicoMaxAggregateOutputType = {
    id: number | null
    facultadId: number | null
    nombre: string | null
    codigo: string | null
    descripcion: string | null
    nivel: string | null
    activo: boolean | null
  }

  export type ProgramaAcademicoCountAggregateOutputType = {
    id: number
    facultadId: number
    nombre: number
    codigo: number
    descripcion: number
    nivel: number
    activo: number
    _all: number
  }


  export type ProgramaAcademicoAvgAggregateInputType = {
    id?: true
    facultadId?: true
  }

  export type ProgramaAcademicoSumAggregateInputType = {
    id?: true
    facultadId?: true
  }

  export type ProgramaAcademicoMinAggregateInputType = {
    id?: true
    facultadId?: true
    nombre?: true
    codigo?: true
    descripcion?: true
    nivel?: true
    activo?: true
  }

  export type ProgramaAcademicoMaxAggregateInputType = {
    id?: true
    facultadId?: true
    nombre?: true
    codigo?: true
    descripcion?: true
    nivel?: true
    activo?: true
  }

  export type ProgramaAcademicoCountAggregateInputType = {
    id?: true
    facultadId?: true
    nombre?: true
    codigo?: true
    descripcion?: true
    nivel?: true
    activo?: true
    _all?: true
  }

  export type ProgramaAcademicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProgramaAcademico to aggregate.
     */
    where?: ProgramaAcademicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramaAcademicos to fetch.
     */
    orderBy?: ProgramaAcademicoOrderByWithRelationInput | ProgramaAcademicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProgramaAcademicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramaAcademicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramaAcademicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProgramaAcademicos
    **/
    _count?: true | ProgramaAcademicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProgramaAcademicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProgramaAcademicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgramaAcademicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgramaAcademicoMaxAggregateInputType
  }

  export type GetProgramaAcademicoAggregateType<T extends ProgramaAcademicoAggregateArgs> = {
        [P in keyof T & keyof AggregateProgramaAcademico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgramaAcademico[P]>
      : GetScalarType<T[P], AggregateProgramaAcademico[P]>
  }




  export type ProgramaAcademicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramaAcademicoWhereInput
    orderBy?: ProgramaAcademicoOrderByWithAggregationInput | ProgramaAcademicoOrderByWithAggregationInput[]
    by: ProgramaAcademicoScalarFieldEnum[] | ProgramaAcademicoScalarFieldEnum
    having?: ProgramaAcademicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgramaAcademicoCountAggregateInputType | true
    _avg?: ProgramaAcademicoAvgAggregateInputType
    _sum?: ProgramaAcademicoSumAggregateInputType
    _min?: ProgramaAcademicoMinAggregateInputType
    _max?: ProgramaAcademicoMaxAggregateInputType
  }

  export type ProgramaAcademicoGroupByOutputType = {
    id: number
    facultadId: number
    nombre: string
    codigo: string
    descripcion: string | null
    nivel: string
    activo: boolean
    _count: ProgramaAcademicoCountAggregateOutputType | null
    _avg: ProgramaAcademicoAvgAggregateOutputType | null
    _sum: ProgramaAcademicoSumAggregateOutputType | null
    _min: ProgramaAcademicoMinAggregateOutputType | null
    _max: ProgramaAcademicoMaxAggregateOutputType | null
  }

  type GetProgramaAcademicoGroupByPayload<T extends ProgramaAcademicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgramaAcademicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgramaAcademicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgramaAcademicoGroupByOutputType[P]>
            : GetScalarType<T[P], ProgramaAcademicoGroupByOutputType[P]>
        }
      >
    >


  export type ProgramaAcademicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facultadId?: boolean
    nombre?: boolean
    codigo?: boolean
    descripcion?: boolean
    nivel?: boolean
    activo?: boolean
    facultad?: boolean | FacultadDefaultArgs<ExtArgs>
    pacientes?: boolean | ProgramaAcademico$pacientesArgs<ExtArgs>
    _count?: boolean | ProgramaAcademicoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["programaAcademico"]>

  export type ProgramaAcademicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facultadId?: boolean
    nombre?: boolean
    codigo?: boolean
    descripcion?: boolean
    nivel?: boolean
    activo?: boolean
    facultad?: boolean | FacultadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["programaAcademico"]>

  export type ProgramaAcademicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facultadId?: boolean
    nombre?: boolean
    codigo?: boolean
    descripcion?: boolean
    nivel?: boolean
    activo?: boolean
    facultad?: boolean | FacultadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["programaAcademico"]>

  export type ProgramaAcademicoSelectScalar = {
    id?: boolean
    facultadId?: boolean
    nombre?: boolean
    codigo?: boolean
    descripcion?: boolean
    nivel?: boolean
    activo?: boolean
  }

  export type ProgramaAcademicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "facultadId" | "nombre" | "codigo" | "descripcion" | "nivel" | "activo", ExtArgs["result"]["programaAcademico"]>
  export type ProgramaAcademicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facultad?: boolean | FacultadDefaultArgs<ExtArgs>
    pacientes?: boolean | ProgramaAcademico$pacientesArgs<ExtArgs>
    _count?: boolean | ProgramaAcademicoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProgramaAcademicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facultad?: boolean | FacultadDefaultArgs<ExtArgs>
  }
  export type ProgramaAcademicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facultad?: boolean | FacultadDefaultArgs<ExtArgs>
  }

  export type $ProgramaAcademicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProgramaAcademico"
    objects: {
      facultad: Prisma.$FacultadPayload<ExtArgs>
      pacientes: Prisma.$PacientePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      facultadId: number
      nombre: string
      codigo: string
      descripcion: string | null
      nivel: string
      activo: boolean
    }, ExtArgs["result"]["programaAcademico"]>
    composites: {}
  }

  type ProgramaAcademicoGetPayload<S extends boolean | null | undefined | ProgramaAcademicoDefaultArgs> = $Result.GetResult<Prisma.$ProgramaAcademicoPayload, S>

  type ProgramaAcademicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProgramaAcademicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProgramaAcademicoCountAggregateInputType | true
    }

  export interface ProgramaAcademicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProgramaAcademico'], meta: { name: 'ProgramaAcademico' } }
    /**
     * Find zero or one ProgramaAcademico that matches the filter.
     * @param {ProgramaAcademicoFindUniqueArgs} args - Arguments to find a ProgramaAcademico
     * @example
     * // Get one ProgramaAcademico
     * const programaAcademico = await prisma.programaAcademico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProgramaAcademicoFindUniqueArgs>(args: SelectSubset<T, ProgramaAcademicoFindUniqueArgs<ExtArgs>>): Prisma__ProgramaAcademicoClient<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProgramaAcademico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProgramaAcademicoFindUniqueOrThrowArgs} args - Arguments to find a ProgramaAcademico
     * @example
     * // Get one ProgramaAcademico
     * const programaAcademico = await prisma.programaAcademico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProgramaAcademicoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProgramaAcademicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProgramaAcademicoClient<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProgramaAcademico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramaAcademicoFindFirstArgs} args - Arguments to find a ProgramaAcademico
     * @example
     * // Get one ProgramaAcademico
     * const programaAcademico = await prisma.programaAcademico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProgramaAcademicoFindFirstArgs>(args?: SelectSubset<T, ProgramaAcademicoFindFirstArgs<ExtArgs>>): Prisma__ProgramaAcademicoClient<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProgramaAcademico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramaAcademicoFindFirstOrThrowArgs} args - Arguments to find a ProgramaAcademico
     * @example
     * // Get one ProgramaAcademico
     * const programaAcademico = await prisma.programaAcademico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProgramaAcademicoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProgramaAcademicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProgramaAcademicoClient<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProgramaAcademicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramaAcademicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProgramaAcademicos
     * const programaAcademicos = await prisma.programaAcademico.findMany()
     * 
     * // Get first 10 ProgramaAcademicos
     * const programaAcademicos = await prisma.programaAcademico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const programaAcademicoWithIdOnly = await prisma.programaAcademico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProgramaAcademicoFindManyArgs>(args?: SelectSubset<T, ProgramaAcademicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProgramaAcademico.
     * @param {ProgramaAcademicoCreateArgs} args - Arguments to create a ProgramaAcademico.
     * @example
     * // Create one ProgramaAcademico
     * const ProgramaAcademico = await prisma.programaAcademico.create({
     *   data: {
     *     // ... data to create a ProgramaAcademico
     *   }
     * })
     * 
     */
    create<T extends ProgramaAcademicoCreateArgs>(args: SelectSubset<T, ProgramaAcademicoCreateArgs<ExtArgs>>): Prisma__ProgramaAcademicoClient<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProgramaAcademicos.
     * @param {ProgramaAcademicoCreateManyArgs} args - Arguments to create many ProgramaAcademicos.
     * @example
     * // Create many ProgramaAcademicos
     * const programaAcademico = await prisma.programaAcademico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProgramaAcademicoCreateManyArgs>(args?: SelectSubset<T, ProgramaAcademicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProgramaAcademicos and returns the data saved in the database.
     * @param {ProgramaAcademicoCreateManyAndReturnArgs} args - Arguments to create many ProgramaAcademicos.
     * @example
     * // Create many ProgramaAcademicos
     * const programaAcademico = await prisma.programaAcademico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProgramaAcademicos and only return the `id`
     * const programaAcademicoWithIdOnly = await prisma.programaAcademico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProgramaAcademicoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProgramaAcademicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProgramaAcademico.
     * @param {ProgramaAcademicoDeleteArgs} args - Arguments to delete one ProgramaAcademico.
     * @example
     * // Delete one ProgramaAcademico
     * const ProgramaAcademico = await prisma.programaAcademico.delete({
     *   where: {
     *     // ... filter to delete one ProgramaAcademico
     *   }
     * })
     * 
     */
    delete<T extends ProgramaAcademicoDeleteArgs>(args: SelectSubset<T, ProgramaAcademicoDeleteArgs<ExtArgs>>): Prisma__ProgramaAcademicoClient<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProgramaAcademico.
     * @param {ProgramaAcademicoUpdateArgs} args - Arguments to update one ProgramaAcademico.
     * @example
     * // Update one ProgramaAcademico
     * const programaAcademico = await prisma.programaAcademico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProgramaAcademicoUpdateArgs>(args: SelectSubset<T, ProgramaAcademicoUpdateArgs<ExtArgs>>): Prisma__ProgramaAcademicoClient<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProgramaAcademicos.
     * @param {ProgramaAcademicoDeleteManyArgs} args - Arguments to filter ProgramaAcademicos to delete.
     * @example
     * // Delete a few ProgramaAcademicos
     * const { count } = await prisma.programaAcademico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProgramaAcademicoDeleteManyArgs>(args?: SelectSubset<T, ProgramaAcademicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProgramaAcademicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramaAcademicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProgramaAcademicos
     * const programaAcademico = await prisma.programaAcademico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProgramaAcademicoUpdateManyArgs>(args: SelectSubset<T, ProgramaAcademicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProgramaAcademicos and returns the data updated in the database.
     * @param {ProgramaAcademicoUpdateManyAndReturnArgs} args - Arguments to update many ProgramaAcademicos.
     * @example
     * // Update many ProgramaAcademicos
     * const programaAcademico = await prisma.programaAcademico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProgramaAcademicos and only return the `id`
     * const programaAcademicoWithIdOnly = await prisma.programaAcademico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProgramaAcademicoUpdateManyAndReturnArgs>(args: SelectSubset<T, ProgramaAcademicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProgramaAcademico.
     * @param {ProgramaAcademicoUpsertArgs} args - Arguments to update or create a ProgramaAcademico.
     * @example
     * // Update or create a ProgramaAcademico
     * const programaAcademico = await prisma.programaAcademico.upsert({
     *   create: {
     *     // ... data to create a ProgramaAcademico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProgramaAcademico we want to update
     *   }
     * })
     */
    upsert<T extends ProgramaAcademicoUpsertArgs>(args: SelectSubset<T, ProgramaAcademicoUpsertArgs<ExtArgs>>): Prisma__ProgramaAcademicoClient<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProgramaAcademicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramaAcademicoCountArgs} args - Arguments to filter ProgramaAcademicos to count.
     * @example
     * // Count the number of ProgramaAcademicos
     * const count = await prisma.programaAcademico.count({
     *   where: {
     *     // ... the filter for the ProgramaAcademicos we want to count
     *   }
     * })
    **/
    count<T extends ProgramaAcademicoCountArgs>(
      args?: Subset<T, ProgramaAcademicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgramaAcademicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProgramaAcademico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramaAcademicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgramaAcademicoAggregateArgs>(args: Subset<T, ProgramaAcademicoAggregateArgs>): Prisma.PrismaPromise<GetProgramaAcademicoAggregateType<T>>

    /**
     * Group by ProgramaAcademico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramaAcademicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgramaAcademicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgramaAcademicoGroupByArgs['orderBy'] }
        : { orderBy?: ProgramaAcademicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgramaAcademicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgramaAcademicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProgramaAcademico model
   */
  readonly fields: ProgramaAcademicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProgramaAcademico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProgramaAcademicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    facultad<T extends FacultadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FacultadDefaultArgs<ExtArgs>>): Prisma__FacultadClient<$Result.GetResult<Prisma.$FacultadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pacientes<T extends ProgramaAcademico$pacientesArgs<ExtArgs> = {}>(args?: Subset<T, ProgramaAcademico$pacientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProgramaAcademico model
   */
  interface ProgramaAcademicoFieldRefs {
    readonly id: FieldRef<"ProgramaAcademico", 'Int'>
    readonly facultadId: FieldRef<"ProgramaAcademico", 'Int'>
    readonly nombre: FieldRef<"ProgramaAcademico", 'String'>
    readonly codigo: FieldRef<"ProgramaAcademico", 'String'>
    readonly descripcion: FieldRef<"ProgramaAcademico", 'String'>
    readonly nivel: FieldRef<"ProgramaAcademico", 'String'>
    readonly activo: FieldRef<"ProgramaAcademico", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ProgramaAcademico findUnique
   */
  export type ProgramaAcademicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    /**
     * Filter, which ProgramaAcademico to fetch.
     */
    where: ProgramaAcademicoWhereUniqueInput
  }

  /**
   * ProgramaAcademico findUniqueOrThrow
   */
  export type ProgramaAcademicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    /**
     * Filter, which ProgramaAcademico to fetch.
     */
    where: ProgramaAcademicoWhereUniqueInput
  }

  /**
   * ProgramaAcademico findFirst
   */
  export type ProgramaAcademicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    /**
     * Filter, which ProgramaAcademico to fetch.
     */
    where?: ProgramaAcademicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramaAcademicos to fetch.
     */
    orderBy?: ProgramaAcademicoOrderByWithRelationInput | ProgramaAcademicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProgramaAcademicos.
     */
    cursor?: ProgramaAcademicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramaAcademicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramaAcademicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProgramaAcademicos.
     */
    distinct?: ProgramaAcademicoScalarFieldEnum | ProgramaAcademicoScalarFieldEnum[]
  }

  /**
   * ProgramaAcademico findFirstOrThrow
   */
  export type ProgramaAcademicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    /**
     * Filter, which ProgramaAcademico to fetch.
     */
    where?: ProgramaAcademicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramaAcademicos to fetch.
     */
    orderBy?: ProgramaAcademicoOrderByWithRelationInput | ProgramaAcademicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProgramaAcademicos.
     */
    cursor?: ProgramaAcademicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramaAcademicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramaAcademicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProgramaAcademicos.
     */
    distinct?: ProgramaAcademicoScalarFieldEnum | ProgramaAcademicoScalarFieldEnum[]
  }

  /**
   * ProgramaAcademico findMany
   */
  export type ProgramaAcademicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    /**
     * Filter, which ProgramaAcademicos to fetch.
     */
    where?: ProgramaAcademicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProgramaAcademicos to fetch.
     */
    orderBy?: ProgramaAcademicoOrderByWithRelationInput | ProgramaAcademicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProgramaAcademicos.
     */
    cursor?: ProgramaAcademicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProgramaAcademicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProgramaAcademicos.
     */
    skip?: number
    distinct?: ProgramaAcademicoScalarFieldEnum | ProgramaAcademicoScalarFieldEnum[]
  }

  /**
   * ProgramaAcademico create
   */
  export type ProgramaAcademicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    /**
     * The data needed to create a ProgramaAcademico.
     */
    data: XOR<ProgramaAcademicoCreateInput, ProgramaAcademicoUncheckedCreateInput>
  }

  /**
   * ProgramaAcademico createMany
   */
  export type ProgramaAcademicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProgramaAcademicos.
     */
    data: ProgramaAcademicoCreateManyInput | ProgramaAcademicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProgramaAcademico createManyAndReturn
   */
  export type ProgramaAcademicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * The data used to create many ProgramaAcademicos.
     */
    data: ProgramaAcademicoCreateManyInput | ProgramaAcademicoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProgramaAcademico update
   */
  export type ProgramaAcademicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    /**
     * The data needed to update a ProgramaAcademico.
     */
    data: XOR<ProgramaAcademicoUpdateInput, ProgramaAcademicoUncheckedUpdateInput>
    /**
     * Choose, which ProgramaAcademico to update.
     */
    where: ProgramaAcademicoWhereUniqueInput
  }

  /**
   * ProgramaAcademico updateMany
   */
  export type ProgramaAcademicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProgramaAcademicos.
     */
    data: XOR<ProgramaAcademicoUpdateManyMutationInput, ProgramaAcademicoUncheckedUpdateManyInput>
    /**
     * Filter which ProgramaAcademicos to update
     */
    where?: ProgramaAcademicoWhereInput
    /**
     * Limit how many ProgramaAcademicos to update.
     */
    limit?: number
  }

  /**
   * ProgramaAcademico updateManyAndReturn
   */
  export type ProgramaAcademicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * The data used to update ProgramaAcademicos.
     */
    data: XOR<ProgramaAcademicoUpdateManyMutationInput, ProgramaAcademicoUncheckedUpdateManyInput>
    /**
     * Filter which ProgramaAcademicos to update
     */
    where?: ProgramaAcademicoWhereInput
    /**
     * Limit how many ProgramaAcademicos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProgramaAcademico upsert
   */
  export type ProgramaAcademicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    /**
     * The filter to search for the ProgramaAcademico to update in case it exists.
     */
    where: ProgramaAcademicoWhereUniqueInput
    /**
     * In case the ProgramaAcademico found by the `where` argument doesn't exist, create a new ProgramaAcademico with this data.
     */
    create: XOR<ProgramaAcademicoCreateInput, ProgramaAcademicoUncheckedCreateInput>
    /**
     * In case the ProgramaAcademico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProgramaAcademicoUpdateInput, ProgramaAcademicoUncheckedUpdateInput>
  }

  /**
   * ProgramaAcademico delete
   */
  export type ProgramaAcademicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
    /**
     * Filter which ProgramaAcademico to delete.
     */
    where: ProgramaAcademicoWhereUniqueInput
  }

  /**
   * ProgramaAcademico deleteMany
   */
  export type ProgramaAcademicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProgramaAcademicos to delete
     */
    where?: ProgramaAcademicoWhereInput
    /**
     * Limit how many ProgramaAcademicos to delete.
     */
    limit?: number
  }

  /**
   * ProgramaAcademico.pacientes
   */
  export type ProgramaAcademico$pacientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    where?: PacienteWhereInput
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    cursor?: PacienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * ProgramaAcademico without action
   */
  export type ProgramaAcademicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramaAcademico
     */
    select?: ProgramaAcademicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProgramaAcademico
     */
    omit?: ProgramaAcademicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramaAcademicoInclude<ExtArgs> | null
  }


  /**
   * Model Sede
   */

  export type AggregateSede = {
    _count: SedeCountAggregateOutputType | null
    _avg: SedeAvgAggregateOutputType | null
    _sum: SedeSumAggregateOutputType | null
    _min: SedeMinAggregateOutputType | null
    _max: SedeMaxAggregateOutputType | null
  }

  export type SedeAvgAggregateOutputType = {
    id: number | null
  }

  export type SedeSumAggregateOutputType = {
    id: number | null
  }

  export type SedeMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion: string | null
    telefono: string | null
    horarioAtencion: string | null
    activo: boolean | null
  }

  export type SedeMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion: string | null
    telefono: string | null
    horarioAtencion: string | null
    activo: boolean | null
  }

  export type SedeCountAggregateOutputType = {
    id: number
    nombre: number
    direccion: number
    telefono: number
    horarioAtencion: number
    activo: number
    _all: number
  }


  export type SedeAvgAggregateInputType = {
    id?: true
  }

  export type SedeSumAggregateInputType = {
    id?: true
  }

  export type SedeMinAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    horarioAtencion?: true
    activo?: true
  }

  export type SedeMaxAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    horarioAtencion?: true
    activo?: true
  }

  export type SedeCountAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    horarioAtencion?: true
    activo?: true
    _all?: true
  }

  export type SedeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sede to aggregate.
     */
    where?: SedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sedes to fetch.
     */
    orderBy?: SedeOrderByWithRelationInput | SedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sedes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sedes
    **/
    _count?: true | SedeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SedeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SedeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SedeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SedeMaxAggregateInputType
  }

  export type GetSedeAggregateType<T extends SedeAggregateArgs> = {
        [P in keyof T & keyof AggregateSede]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSede[P]>
      : GetScalarType<T[P], AggregateSede[P]>
  }




  export type SedeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SedeWhereInput
    orderBy?: SedeOrderByWithAggregationInput | SedeOrderByWithAggregationInput[]
    by: SedeScalarFieldEnum[] | SedeScalarFieldEnum
    having?: SedeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SedeCountAggregateInputType | true
    _avg?: SedeAvgAggregateInputType
    _sum?: SedeSumAggregateInputType
    _min?: SedeMinAggregateInputType
    _max?: SedeMaxAggregateInputType
  }

  export type SedeGroupByOutputType = {
    id: number
    nombre: string
    direccion: string
    telefono: string | null
    horarioAtencion: string | null
    activo: boolean
    _count: SedeCountAggregateOutputType | null
    _avg: SedeAvgAggregateOutputType | null
    _sum: SedeSumAggregateOutputType | null
    _min: SedeMinAggregateOutputType | null
    _max: SedeMaxAggregateOutputType | null
  }

  type GetSedeGroupByPayload<T extends SedeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SedeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SedeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SedeGroupByOutputType[P]>
            : GetScalarType<T[P], SedeGroupByOutputType[P]>
        }
      >
    >


  export type SedeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    horarioAtencion?: boolean
    activo?: boolean
    consultorios?: boolean | Sede$consultoriosArgs<ExtArgs>
    _count?: boolean | SedeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sede"]>

  export type SedeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    horarioAtencion?: boolean
    activo?: boolean
  }, ExtArgs["result"]["sede"]>

  export type SedeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    horarioAtencion?: boolean
    activo?: boolean
  }, ExtArgs["result"]["sede"]>

  export type SedeSelectScalar = {
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    horarioAtencion?: boolean
    activo?: boolean
  }

  export type SedeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "direccion" | "telefono" | "horarioAtencion" | "activo", ExtArgs["result"]["sede"]>
  export type SedeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorios?: boolean | Sede$consultoriosArgs<ExtArgs>
    _count?: boolean | SedeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SedeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SedeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SedePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sede"
    objects: {
      consultorios: Prisma.$ConsultorioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      direccion: string
      telefono: string | null
      horarioAtencion: string | null
      activo: boolean
    }, ExtArgs["result"]["sede"]>
    composites: {}
  }

  type SedeGetPayload<S extends boolean | null | undefined | SedeDefaultArgs> = $Result.GetResult<Prisma.$SedePayload, S>

  type SedeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SedeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SedeCountAggregateInputType | true
    }

  export interface SedeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sede'], meta: { name: 'Sede' } }
    /**
     * Find zero or one Sede that matches the filter.
     * @param {SedeFindUniqueArgs} args - Arguments to find a Sede
     * @example
     * // Get one Sede
     * const sede = await prisma.sede.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SedeFindUniqueArgs>(args: SelectSubset<T, SedeFindUniqueArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sede that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SedeFindUniqueOrThrowArgs} args - Arguments to find a Sede
     * @example
     * // Get one Sede
     * const sede = await prisma.sede.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SedeFindUniqueOrThrowArgs>(args: SelectSubset<T, SedeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sede that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeFindFirstArgs} args - Arguments to find a Sede
     * @example
     * // Get one Sede
     * const sede = await prisma.sede.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SedeFindFirstArgs>(args?: SelectSubset<T, SedeFindFirstArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sede that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeFindFirstOrThrowArgs} args - Arguments to find a Sede
     * @example
     * // Get one Sede
     * const sede = await prisma.sede.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SedeFindFirstOrThrowArgs>(args?: SelectSubset<T, SedeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sedes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sedes
     * const sedes = await prisma.sede.findMany()
     * 
     * // Get first 10 Sedes
     * const sedes = await prisma.sede.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sedeWithIdOnly = await prisma.sede.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SedeFindManyArgs>(args?: SelectSubset<T, SedeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sede.
     * @param {SedeCreateArgs} args - Arguments to create a Sede.
     * @example
     * // Create one Sede
     * const Sede = await prisma.sede.create({
     *   data: {
     *     // ... data to create a Sede
     *   }
     * })
     * 
     */
    create<T extends SedeCreateArgs>(args: SelectSubset<T, SedeCreateArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sedes.
     * @param {SedeCreateManyArgs} args - Arguments to create many Sedes.
     * @example
     * // Create many Sedes
     * const sede = await prisma.sede.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SedeCreateManyArgs>(args?: SelectSubset<T, SedeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sedes and returns the data saved in the database.
     * @param {SedeCreateManyAndReturnArgs} args - Arguments to create many Sedes.
     * @example
     * // Create many Sedes
     * const sede = await prisma.sede.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sedes and only return the `id`
     * const sedeWithIdOnly = await prisma.sede.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SedeCreateManyAndReturnArgs>(args?: SelectSubset<T, SedeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sede.
     * @param {SedeDeleteArgs} args - Arguments to delete one Sede.
     * @example
     * // Delete one Sede
     * const Sede = await prisma.sede.delete({
     *   where: {
     *     // ... filter to delete one Sede
     *   }
     * })
     * 
     */
    delete<T extends SedeDeleteArgs>(args: SelectSubset<T, SedeDeleteArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sede.
     * @param {SedeUpdateArgs} args - Arguments to update one Sede.
     * @example
     * // Update one Sede
     * const sede = await prisma.sede.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SedeUpdateArgs>(args: SelectSubset<T, SedeUpdateArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sedes.
     * @param {SedeDeleteManyArgs} args - Arguments to filter Sedes to delete.
     * @example
     * // Delete a few Sedes
     * const { count } = await prisma.sede.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SedeDeleteManyArgs>(args?: SelectSubset<T, SedeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sedes
     * const sede = await prisma.sede.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SedeUpdateManyArgs>(args: SelectSubset<T, SedeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sedes and returns the data updated in the database.
     * @param {SedeUpdateManyAndReturnArgs} args - Arguments to update many Sedes.
     * @example
     * // Update many Sedes
     * const sede = await prisma.sede.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sedes and only return the `id`
     * const sedeWithIdOnly = await prisma.sede.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SedeUpdateManyAndReturnArgs>(args: SelectSubset<T, SedeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sede.
     * @param {SedeUpsertArgs} args - Arguments to update or create a Sede.
     * @example
     * // Update or create a Sede
     * const sede = await prisma.sede.upsert({
     *   create: {
     *     // ... data to create a Sede
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sede we want to update
     *   }
     * })
     */
    upsert<T extends SedeUpsertArgs>(args: SelectSubset<T, SedeUpsertArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeCountArgs} args - Arguments to filter Sedes to count.
     * @example
     * // Count the number of Sedes
     * const count = await prisma.sede.count({
     *   where: {
     *     // ... the filter for the Sedes we want to count
     *   }
     * })
    **/
    count<T extends SedeCountArgs>(
      args?: Subset<T, SedeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SedeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sede.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SedeAggregateArgs>(args: Subset<T, SedeAggregateArgs>): Prisma.PrismaPromise<GetSedeAggregateType<T>>

    /**
     * Group by Sede.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SedeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SedeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SedeGroupByArgs['orderBy'] }
        : { orderBy?: SedeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SedeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSedeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sede model
   */
  readonly fields: SedeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sede.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SedeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultorios<T extends Sede$consultoriosArgs<ExtArgs> = {}>(args?: Subset<T, Sede$consultoriosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sede model
   */
  interface SedeFieldRefs {
    readonly id: FieldRef<"Sede", 'Int'>
    readonly nombre: FieldRef<"Sede", 'String'>
    readonly direccion: FieldRef<"Sede", 'String'>
    readonly telefono: FieldRef<"Sede", 'String'>
    readonly horarioAtencion: FieldRef<"Sede", 'String'>
    readonly activo: FieldRef<"Sede", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Sede findUnique
   */
  export type SedeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sede to fetch.
     */
    where: SedeWhereUniqueInput
  }

  /**
   * Sede findUniqueOrThrow
   */
  export type SedeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sede to fetch.
     */
    where: SedeWhereUniqueInput
  }

  /**
   * Sede findFirst
   */
  export type SedeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sede to fetch.
     */
    where?: SedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sedes to fetch.
     */
    orderBy?: SedeOrderByWithRelationInput | SedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sedes.
     */
    cursor?: SedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sedes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sedes.
     */
    distinct?: SedeScalarFieldEnum | SedeScalarFieldEnum[]
  }

  /**
   * Sede findFirstOrThrow
   */
  export type SedeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sede to fetch.
     */
    where?: SedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sedes to fetch.
     */
    orderBy?: SedeOrderByWithRelationInput | SedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sedes.
     */
    cursor?: SedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sedes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sedes.
     */
    distinct?: SedeScalarFieldEnum | SedeScalarFieldEnum[]
  }

  /**
   * Sede findMany
   */
  export type SedeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter, which Sedes to fetch.
     */
    where?: SedeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sedes to fetch.
     */
    orderBy?: SedeOrderByWithRelationInput | SedeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sedes.
     */
    cursor?: SedeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sedes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sedes.
     */
    skip?: number
    distinct?: SedeScalarFieldEnum | SedeScalarFieldEnum[]
  }

  /**
   * Sede create
   */
  export type SedeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * The data needed to create a Sede.
     */
    data: XOR<SedeCreateInput, SedeUncheckedCreateInput>
  }

  /**
   * Sede createMany
   */
  export type SedeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sedes.
     */
    data: SedeCreateManyInput | SedeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sede createManyAndReturn
   */
  export type SedeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * The data used to create many Sedes.
     */
    data: SedeCreateManyInput | SedeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sede update
   */
  export type SedeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * The data needed to update a Sede.
     */
    data: XOR<SedeUpdateInput, SedeUncheckedUpdateInput>
    /**
     * Choose, which Sede to update.
     */
    where: SedeWhereUniqueInput
  }

  /**
   * Sede updateMany
   */
  export type SedeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sedes.
     */
    data: XOR<SedeUpdateManyMutationInput, SedeUncheckedUpdateManyInput>
    /**
     * Filter which Sedes to update
     */
    where?: SedeWhereInput
    /**
     * Limit how many Sedes to update.
     */
    limit?: number
  }

  /**
   * Sede updateManyAndReturn
   */
  export type SedeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * The data used to update Sedes.
     */
    data: XOR<SedeUpdateManyMutationInput, SedeUncheckedUpdateManyInput>
    /**
     * Filter which Sedes to update
     */
    where?: SedeWhereInput
    /**
     * Limit how many Sedes to update.
     */
    limit?: number
  }

  /**
   * Sede upsert
   */
  export type SedeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * The filter to search for the Sede to update in case it exists.
     */
    where: SedeWhereUniqueInput
    /**
     * In case the Sede found by the `where` argument doesn't exist, create a new Sede with this data.
     */
    create: XOR<SedeCreateInput, SedeUncheckedCreateInput>
    /**
     * In case the Sede was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SedeUpdateInput, SedeUncheckedUpdateInput>
  }

  /**
   * Sede delete
   */
  export type SedeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
    /**
     * Filter which Sede to delete.
     */
    where: SedeWhereUniqueInput
  }

  /**
   * Sede deleteMany
   */
  export type SedeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sedes to delete
     */
    where?: SedeWhereInput
    /**
     * Limit how many Sedes to delete.
     */
    limit?: number
  }

  /**
   * Sede.consultorios
   */
  export type Sede$consultoriosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    where?: ConsultorioWhereInput
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    cursor?: ConsultorioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Sede without action
   */
  export type SedeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sede
     */
    select?: SedeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sede
     */
    omit?: SedeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SedeInclude<ExtArgs> | null
  }


  /**
   * Model Consultorio
   */

  export type AggregateConsultorio = {
    _count: ConsultorioCountAggregateOutputType | null
    _avg: ConsultorioAvgAggregateOutputType | null
    _sum: ConsultorioSumAggregateOutputType | null
    _min: ConsultorioMinAggregateOutputType | null
    _max: ConsultorioMaxAggregateOutputType | null
  }

  export type ConsultorioAvgAggregateOutputType = {
    id: number | null
    sedeId: number | null
  }

  export type ConsultorioSumAggregateOutputType = {
    id: number | null
    sedeId: number | null
  }

  export type ConsultorioMinAggregateOutputType = {
    id: number | null
    sedeId: number | null
    nombre: string | null
    codigo: string | null
    tipo: string | null
    activo: boolean | null
  }

  export type ConsultorioMaxAggregateOutputType = {
    id: number | null
    sedeId: number | null
    nombre: string | null
    codigo: string | null
    tipo: string | null
    activo: boolean | null
  }

  export type ConsultorioCountAggregateOutputType = {
    id: number
    sedeId: number
    nombre: number
    codigo: number
    tipo: number
    activo: number
    _all: number
  }


  export type ConsultorioAvgAggregateInputType = {
    id?: true
    sedeId?: true
  }

  export type ConsultorioSumAggregateInputType = {
    id?: true
    sedeId?: true
  }

  export type ConsultorioMinAggregateInputType = {
    id?: true
    sedeId?: true
    nombre?: true
    codigo?: true
    tipo?: true
    activo?: true
  }

  export type ConsultorioMaxAggregateInputType = {
    id?: true
    sedeId?: true
    nombre?: true
    codigo?: true
    tipo?: true
    activo?: true
  }

  export type ConsultorioCountAggregateInputType = {
    id?: true
    sedeId?: true
    nombre?: true
    codigo?: true
    tipo?: true
    activo?: true
    _all?: true
  }

  export type ConsultorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultorio to aggregate.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consultorios
    **/
    _count?: true | ConsultorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsultorioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsultorioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsultorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsultorioMaxAggregateInputType
  }

  export type GetConsultorioAggregateType<T extends ConsultorioAggregateArgs> = {
        [P in keyof T & keyof AggregateConsultorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsultorio[P]>
      : GetScalarType<T[P], AggregateConsultorio[P]>
  }




  export type ConsultorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultorioWhereInput
    orderBy?: ConsultorioOrderByWithAggregationInput | ConsultorioOrderByWithAggregationInput[]
    by: ConsultorioScalarFieldEnum[] | ConsultorioScalarFieldEnum
    having?: ConsultorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsultorioCountAggregateInputType | true
    _avg?: ConsultorioAvgAggregateInputType
    _sum?: ConsultorioSumAggregateInputType
    _min?: ConsultorioMinAggregateInputType
    _max?: ConsultorioMaxAggregateInputType
  }

  export type ConsultorioGroupByOutputType = {
    id: number
    sedeId: number
    nombre: string
    codigo: string
    tipo: string
    activo: boolean
    _count: ConsultorioCountAggregateOutputType | null
    _avg: ConsultorioAvgAggregateOutputType | null
    _sum: ConsultorioSumAggregateOutputType | null
    _min: ConsultorioMinAggregateOutputType | null
    _max: ConsultorioMaxAggregateOutputType | null
  }

  type GetConsultorioGroupByPayload<T extends ConsultorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsultorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsultorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsultorioGroupByOutputType[P]>
            : GetScalarType<T[P], ConsultorioGroupByOutputType[P]>
        }
      >
    >


  export type ConsultorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sedeId?: boolean
    nombre?: boolean
    codigo?: boolean
    tipo?: boolean
    activo?: boolean
    sede?: boolean | SedeDefaultArgs<ExtArgs>
    episodiosClinicos?: boolean | Consultorio$episodiosClinicosArgs<ExtArgs>
    _count?: boolean | ConsultorioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sedeId?: boolean
    nombre?: boolean
    codigo?: boolean
    tipo?: boolean
    activo?: boolean
    sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sedeId?: boolean
    nombre?: boolean
    codigo?: boolean
    tipo?: boolean
    activo?: boolean
    sede?: boolean | SedeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectScalar = {
    id?: boolean
    sedeId?: boolean
    nombre?: boolean
    codigo?: boolean
    tipo?: boolean
    activo?: boolean
  }

  export type ConsultorioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sedeId" | "nombre" | "codigo" | "tipo" | "activo", ExtArgs["result"]["consultorio"]>
  export type ConsultorioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sede?: boolean | SedeDefaultArgs<ExtArgs>
    episodiosClinicos?: boolean | Consultorio$episodiosClinicosArgs<ExtArgs>
    _count?: boolean | ConsultorioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConsultorioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sede?: boolean | SedeDefaultArgs<ExtArgs>
  }
  export type ConsultorioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sede?: boolean | SedeDefaultArgs<ExtArgs>
  }

  export type $ConsultorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consultorio"
    objects: {
      sede: Prisma.$SedePayload<ExtArgs>
      episodiosClinicos: Prisma.$EpisodioClincoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sedeId: number
      nombre: string
      codigo: string
      tipo: string
      activo: boolean
    }, ExtArgs["result"]["consultorio"]>
    composites: {}
  }

  type ConsultorioGetPayload<S extends boolean | null | undefined | ConsultorioDefaultArgs> = $Result.GetResult<Prisma.$ConsultorioPayload, S>

  type ConsultorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsultorioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsultorioCountAggregateInputType | true
    }

  export interface ConsultorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consultorio'], meta: { name: 'Consultorio' } }
    /**
     * Find zero or one Consultorio that matches the filter.
     * @param {ConsultorioFindUniqueArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsultorioFindUniqueArgs>(args: SelectSubset<T, ConsultorioFindUniqueArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Consultorio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsultorioFindUniqueOrThrowArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsultorioFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsultorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consultorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindFirstArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsultorioFindFirstArgs>(args?: SelectSubset<T, ConsultorioFindFirstArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consultorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindFirstOrThrowArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsultorioFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsultorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Consultorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consultorios
     * const consultorios = await prisma.consultorio.findMany()
     * 
     * // Get first 10 Consultorios
     * const consultorios = await prisma.consultorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsultorioFindManyArgs>(args?: SelectSubset<T, ConsultorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Consultorio.
     * @param {ConsultorioCreateArgs} args - Arguments to create a Consultorio.
     * @example
     * // Create one Consultorio
     * const Consultorio = await prisma.consultorio.create({
     *   data: {
     *     // ... data to create a Consultorio
     *   }
     * })
     * 
     */
    create<T extends ConsultorioCreateArgs>(args: SelectSubset<T, ConsultorioCreateArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Consultorios.
     * @param {ConsultorioCreateManyArgs} args - Arguments to create many Consultorios.
     * @example
     * // Create many Consultorios
     * const consultorio = await prisma.consultorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsultorioCreateManyArgs>(args?: SelectSubset<T, ConsultorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consultorios and returns the data saved in the database.
     * @param {ConsultorioCreateManyAndReturnArgs} args - Arguments to create many Consultorios.
     * @example
     * // Create many Consultorios
     * const consultorio = await prisma.consultorio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consultorios and only return the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsultorioCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsultorioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Consultorio.
     * @param {ConsultorioDeleteArgs} args - Arguments to delete one Consultorio.
     * @example
     * // Delete one Consultorio
     * const Consultorio = await prisma.consultorio.delete({
     *   where: {
     *     // ... filter to delete one Consultorio
     *   }
     * })
     * 
     */
    delete<T extends ConsultorioDeleteArgs>(args: SelectSubset<T, ConsultorioDeleteArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Consultorio.
     * @param {ConsultorioUpdateArgs} args - Arguments to update one Consultorio.
     * @example
     * // Update one Consultorio
     * const consultorio = await prisma.consultorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsultorioUpdateArgs>(args: SelectSubset<T, ConsultorioUpdateArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Consultorios.
     * @param {ConsultorioDeleteManyArgs} args - Arguments to filter Consultorios to delete.
     * @example
     * // Delete a few Consultorios
     * const { count } = await prisma.consultorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsultorioDeleteManyArgs>(args?: SelectSubset<T, ConsultorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consultorios
     * const consultorio = await prisma.consultorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsultorioUpdateManyArgs>(args: SelectSubset<T, ConsultorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultorios and returns the data updated in the database.
     * @param {ConsultorioUpdateManyAndReturnArgs} args - Arguments to update many Consultorios.
     * @example
     * // Update many Consultorios
     * const consultorio = await prisma.consultorio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Consultorios and only return the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsultorioUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsultorioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Consultorio.
     * @param {ConsultorioUpsertArgs} args - Arguments to update or create a Consultorio.
     * @example
     * // Update or create a Consultorio
     * const consultorio = await prisma.consultorio.upsert({
     *   create: {
     *     // ... data to create a Consultorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consultorio we want to update
     *   }
     * })
     */
    upsert<T extends ConsultorioUpsertArgs>(args: SelectSubset<T, ConsultorioUpsertArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Consultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioCountArgs} args - Arguments to filter Consultorios to count.
     * @example
     * // Count the number of Consultorios
     * const count = await prisma.consultorio.count({
     *   where: {
     *     // ... the filter for the Consultorios we want to count
     *   }
     * })
    **/
    count<T extends ConsultorioCountArgs>(
      args?: Subset<T, ConsultorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultorioAggregateArgs>(args: Subset<T, ConsultorioAggregateArgs>): Prisma.PrismaPromise<GetConsultorioAggregateType<T>>

    /**
     * Group by Consultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsultorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsultorioGroupByArgs['orderBy'] }
        : { orderBy?: ConsultorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsultorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsultorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consultorio model
   */
  readonly fields: ConsultorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consultorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsultorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sede<T extends SedeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SedeDefaultArgs<ExtArgs>>): Prisma__SedeClient<$Result.GetResult<Prisma.$SedePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    episodiosClinicos<T extends Consultorio$episodiosClinicosArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$episodiosClinicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consultorio model
   */
  interface ConsultorioFieldRefs {
    readonly id: FieldRef<"Consultorio", 'Int'>
    readonly sedeId: FieldRef<"Consultorio", 'Int'>
    readonly nombre: FieldRef<"Consultorio", 'String'>
    readonly codigo: FieldRef<"Consultorio", 'String'>
    readonly tipo: FieldRef<"Consultorio", 'String'>
    readonly activo: FieldRef<"Consultorio", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Consultorio findUnique
   */
  export type ConsultorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio findUniqueOrThrow
   */
  export type ConsultorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio findFirst
   */
  export type ConsultorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultorios.
     */
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio findFirstOrThrow
   */
  export type ConsultorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultorios.
     */
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio findMany
   */
  export type ConsultorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorios to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio create
   */
  export type ConsultorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to create a Consultorio.
     */
    data: XOR<ConsultorioCreateInput, ConsultorioUncheckedCreateInput>
  }

  /**
   * Consultorio createMany
   */
  export type ConsultorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consultorios.
     */
    data: ConsultorioCreateManyInput | ConsultorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consultorio createManyAndReturn
   */
  export type ConsultorioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * The data used to create many Consultorios.
     */
    data: ConsultorioCreateManyInput | ConsultorioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consultorio update
   */
  export type ConsultorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to update a Consultorio.
     */
    data: XOR<ConsultorioUpdateInput, ConsultorioUncheckedUpdateInput>
    /**
     * Choose, which Consultorio to update.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio updateMany
   */
  export type ConsultorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consultorios.
     */
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which Consultorios to update
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to update.
     */
    limit?: number
  }

  /**
   * Consultorio updateManyAndReturn
   */
  export type ConsultorioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * The data used to update Consultorios.
     */
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which Consultorios to update
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consultorio upsert
   */
  export type ConsultorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The filter to search for the Consultorio to update in case it exists.
     */
    where: ConsultorioWhereUniqueInput
    /**
     * In case the Consultorio found by the `where` argument doesn't exist, create a new Consultorio with this data.
     */
    create: XOR<ConsultorioCreateInput, ConsultorioUncheckedCreateInput>
    /**
     * In case the Consultorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsultorioUpdateInput, ConsultorioUncheckedUpdateInput>
  }

  /**
   * Consultorio delete
   */
  export type ConsultorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter which Consultorio to delete.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio deleteMany
   */
  export type ConsultorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultorios to delete
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to delete.
     */
    limit?: number
  }

  /**
   * Consultorio.episodiosClinicos
   */
  export type Consultorio$episodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    where?: EpisodioClincoWhereInput
    orderBy?: EpisodioClincoOrderByWithRelationInput | EpisodioClincoOrderByWithRelationInput[]
    cursor?: EpisodioClincoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodioClincoScalarFieldEnum | EpisodioClincoScalarFieldEnum[]
  }

  /**
   * Consultorio without action
   */
  export type ConsultorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
  }


  /**
   * Model Especialidad
   */

  export type AggregateEspecialidad = {
    _count: EspecialidadCountAggregateOutputType | null
    _avg: EspecialidadAvgAggregateOutputType | null
    _sum: EspecialidadSumAggregateOutputType | null
    _min: EspecialidadMinAggregateOutputType | null
    _max: EspecialidadMaxAggregateOutputType | null
  }

  export type EspecialidadAvgAggregateOutputType = {
    id: number | null
  }

  export type EspecialidadSumAggregateOutputType = {
    id: number | null
  }

  export type EspecialidadMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    codigo: string | null
    activo: boolean | null
  }

  export type EspecialidadMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    codigo: string | null
    activo: boolean | null
  }

  export type EspecialidadCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    codigo: number
    activo: number
    _all: number
  }


  export type EspecialidadAvgAggregateInputType = {
    id?: true
  }

  export type EspecialidadSumAggregateInputType = {
    id?: true
  }

  export type EspecialidadMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    codigo?: true
    activo?: true
  }

  export type EspecialidadMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    codigo?: true
    activo?: true
  }

  export type EspecialidadCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    codigo?: true
    activo?: true
    _all?: true
  }

  export type EspecialidadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Especialidad to aggregate.
     */
    where?: EspecialidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Especialidads to fetch.
     */
    orderBy?: EspecialidadOrderByWithRelationInput | EspecialidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EspecialidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Especialidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Especialidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Especialidads
    **/
    _count?: true | EspecialidadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EspecialidadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EspecialidadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EspecialidadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EspecialidadMaxAggregateInputType
  }

  export type GetEspecialidadAggregateType<T extends EspecialidadAggregateArgs> = {
        [P in keyof T & keyof AggregateEspecialidad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEspecialidad[P]>
      : GetScalarType<T[P], AggregateEspecialidad[P]>
  }




  export type EspecialidadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EspecialidadWhereInput
    orderBy?: EspecialidadOrderByWithAggregationInput | EspecialidadOrderByWithAggregationInput[]
    by: EspecialidadScalarFieldEnum[] | EspecialidadScalarFieldEnum
    having?: EspecialidadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EspecialidadCountAggregateInputType | true
    _avg?: EspecialidadAvgAggregateInputType
    _sum?: EspecialidadSumAggregateInputType
    _min?: EspecialidadMinAggregateInputType
    _max?: EspecialidadMaxAggregateInputType
  }

  export type EspecialidadGroupByOutputType = {
    id: number
    nombre: string
    descripcion: string | null
    codigo: string
    activo: boolean
    _count: EspecialidadCountAggregateOutputType | null
    _avg: EspecialidadAvgAggregateOutputType | null
    _sum: EspecialidadSumAggregateOutputType | null
    _min: EspecialidadMinAggregateOutputType | null
    _max: EspecialidadMaxAggregateOutputType | null
  }

  type GetEspecialidadGroupByPayload<T extends EspecialidadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EspecialidadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EspecialidadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EspecialidadGroupByOutputType[P]>
            : GetScalarType<T[P], EspecialidadGroupByOutputType[P]>
        }
      >
    >


  export type EspecialidadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    codigo?: boolean
    activo?: boolean
    medicoEspecialidad?: boolean | Especialidad$medicoEspecialidadArgs<ExtArgs>
    episodiosClinicos?: boolean | Especialidad$episodiosClinicosArgs<ExtArgs>
    _count?: boolean | EspecialidadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["especialidad"]>

  export type EspecialidadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    codigo?: boolean
    activo?: boolean
  }, ExtArgs["result"]["especialidad"]>

  export type EspecialidadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    codigo?: boolean
    activo?: boolean
  }, ExtArgs["result"]["especialidad"]>

  export type EspecialidadSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    codigo?: boolean
    activo?: boolean
  }

  export type EspecialidadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "descripcion" | "codigo" | "activo", ExtArgs["result"]["especialidad"]>
  export type EspecialidadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicoEspecialidad?: boolean | Especialidad$medicoEspecialidadArgs<ExtArgs>
    episodiosClinicos?: boolean | Especialidad$episodiosClinicosArgs<ExtArgs>
    _count?: boolean | EspecialidadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EspecialidadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EspecialidadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EspecialidadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Especialidad"
    objects: {
      medicoEspecialidad: Prisma.$MedicoEspecialidadPayload<ExtArgs>[]
      episodiosClinicos: Prisma.$EpisodioClincoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      descripcion: string | null
      codigo: string
      activo: boolean
    }, ExtArgs["result"]["especialidad"]>
    composites: {}
  }

  type EspecialidadGetPayload<S extends boolean | null | undefined | EspecialidadDefaultArgs> = $Result.GetResult<Prisma.$EspecialidadPayload, S>

  type EspecialidadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EspecialidadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EspecialidadCountAggregateInputType | true
    }

  export interface EspecialidadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Especialidad'], meta: { name: 'Especialidad' } }
    /**
     * Find zero or one Especialidad that matches the filter.
     * @param {EspecialidadFindUniqueArgs} args - Arguments to find a Especialidad
     * @example
     * // Get one Especialidad
     * const especialidad = await prisma.especialidad.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EspecialidadFindUniqueArgs>(args: SelectSubset<T, EspecialidadFindUniqueArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Especialidad that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EspecialidadFindUniqueOrThrowArgs} args - Arguments to find a Especialidad
     * @example
     * // Get one Especialidad
     * const especialidad = await prisma.especialidad.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EspecialidadFindUniqueOrThrowArgs>(args: SelectSubset<T, EspecialidadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Especialidad that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EspecialidadFindFirstArgs} args - Arguments to find a Especialidad
     * @example
     * // Get one Especialidad
     * const especialidad = await prisma.especialidad.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EspecialidadFindFirstArgs>(args?: SelectSubset<T, EspecialidadFindFirstArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Especialidad that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EspecialidadFindFirstOrThrowArgs} args - Arguments to find a Especialidad
     * @example
     * // Get one Especialidad
     * const especialidad = await prisma.especialidad.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EspecialidadFindFirstOrThrowArgs>(args?: SelectSubset<T, EspecialidadFindFirstOrThrowArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Especialidads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EspecialidadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Especialidads
     * const especialidads = await prisma.especialidad.findMany()
     * 
     * // Get first 10 Especialidads
     * const especialidads = await prisma.especialidad.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const especialidadWithIdOnly = await prisma.especialidad.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EspecialidadFindManyArgs>(args?: SelectSubset<T, EspecialidadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Especialidad.
     * @param {EspecialidadCreateArgs} args - Arguments to create a Especialidad.
     * @example
     * // Create one Especialidad
     * const Especialidad = await prisma.especialidad.create({
     *   data: {
     *     // ... data to create a Especialidad
     *   }
     * })
     * 
     */
    create<T extends EspecialidadCreateArgs>(args: SelectSubset<T, EspecialidadCreateArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Especialidads.
     * @param {EspecialidadCreateManyArgs} args - Arguments to create many Especialidads.
     * @example
     * // Create many Especialidads
     * const especialidad = await prisma.especialidad.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EspecialidadCreateManyArgs>(args?: SelectSubset<T, EspecialidadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Especialidads and returns the data saved in the database.
     * @param {EspecialidadCreateManyAndReturnArgs} args - Arguments to create many Especialidads.
     * @example
     * // Create many Especialidads
     * const especialidad = await prisma.especialidad.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Especialidads and only return the `id`
     * const especialidadWithIdOnly = await prisma.especialidad.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EspecialidadCreateManyAndReturnArgs>(args?: SelectSubset<T, EspecialidadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Especialidad.
     * @param {EspecialidadDeleteArgs} args - Arguments to delete one Especialidad.
     * @example
     * // Delete one Especialidad
     * const Especialidad = await prisma.especialidad.delete({
     *   where: {
     *     // ... filter to delete one Especialidad
     *   }
     * })
     * 
     */
    delete<T extends EspecialidadDeleteArgs>(args: SelectSubset<T, EspecialidadDeleteArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Especialidad.
     * @param {EspecialidadUpdateArgs} args - Arguments to update one Especialidad.
     * @example
     * // Update one Especialidad
     * const especialidad = await prisma.especialidad.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EspecialidadUpdateArgs>(args: SelectSubset<T, EspecialidadUpdateArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Especialidads.
     * @param {EspecialidadDeleteManyArgs} args - Arguments to filter Especialidads to delete.
     * @example
     * // Delete a few Especialidads
     * const { count } = await prisma.especialidad.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EspecialidadDeleteManyArgs>(args?: SelectSubset<T, EspecialidadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Especialidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EspecialidadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Especialidads
     * const especialidad = await prisma.especialidad.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EspecialidadUpdateManyArgs>(args: SelectSubset<T, EspecialidadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Especialidads and returns the data updated in the database.
     * @param {EspecialidadUpdateManyAndReturnArgs} args - Arguments to update many Especialidads.
     * @example
     * // Update many Especialidads
     * const especialidad = await prisma.especialidad.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Especialidads and only return the `id`
     * const especialidadWithIdOnly = await prisma.especialidad.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EspecialidadUpdateManyAndReturnArgs>(args: SelectSubset<T, EspecialidadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Especialidad.
     * @param {EspecialidadUpsertArgs} args - Arguments to update or create a Especialidad.
     * @example
     * // Update or create a Especialidad
     * const especialidad = await prisma.especialidad.upsert({
     *   create: {
     *     // ... data to create a Especialidad
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Especialidad we want to update
     *   }
     * })
     */
    upsert<T extends EspecialidadUpsertArgs>(args: SelectSubset<T, EspecialidadUpsertArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Especialidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EspecialidadCountArgs} args - Arguments to filter Especialidads to count.
     * @example
     * // Count the number of Especialidads
     * const count = await prisma.especialidad.count({
     *   where: {
     *     // ... the filter for the Especialidads we want to count
     *   }
     * })
    **/
    count<T extends EspecialidadCountArgs>(
      args?: Subset<T, EspecialidadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EspecialidadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Especialidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EspecialidadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EspecialidadAggregateArgs>(args: Subset<T, EspecialidadAggregateArgs>): Prisma.PrismaPromise<GetEspecialidadAggregateType<T>>

    /**
     * Group by Especialidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EspecialidadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EspecialidadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EspecialidadGroupByArgs['orderBy'] }
        : { orderBy?: EspecialidadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EspecialidadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEspecialidadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Especialidad model
   */
  readonly fields: EspecialidadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Especialidad.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EspecialidadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medicoEspecialidad<T extends Especialidad$medicoEspecialidadArgs<ExtArgs> = {}>(args?: Subset<T, Especialidad$medicoEspecialidadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    episodiosClinicos<T extends Especialidad$episodiosClinicosArgs<ExtArgs> = {}>(args?: Subset<T, Especialidad$episodiosClinicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Especialidad model
   */
  interface EspecialidadFieldRefs {
    readonly id: FieldRef<"Especialidad", 'Int'>
    readonly nombre: FieldRef<"Especialidad", 'String'>
    readonly descripcion: FieldRef<"Especialidad", 'String'>
    readonly codigo: FieldRef<"Especialidad", 'String'>
    readonly activo: FieldRef<"Especialidad", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Especialidad findUnique
   */
  export type EspecialidadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which Especialidad to fetch.
     */
    where: EspecialidadWhereUniqueInput
  }

  /**
   * Especialidad findUniqueOrThrow
   */
  export type EspecialidadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which Especialidad to fetch.
     */
    where: EspecialidadWhereUniqueInput
  }

  /**
   * Especialidad findFirst
   */
  export type EspecialidadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which Especialidad to fetch.
     */
    where?: EspecialidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Especialidads to fetch.
     */
    orderBy?: EspecialidadOrderByWithRelationInput | EspecialidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Especialidads.
     */
    cursor?: EspecialidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Especialidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Especialidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Especialidads.
     */
    distinct?: EspecialidadScalarFieldEnum | EspecialidadScalarFieldEnum[]
  }

  /**
   * Especialidad findFirstOrThrow
   */
  export type EspecialidadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which Especialidad to fetch.
     */
    where?: EspecialidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Especialidads to fetch.
     */
    orderBy?: EspecialidadOrderByWithRelationInput | EspecialidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Especialidads.
     */
    cursor?: EspecialidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Especialidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Especialidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Especialidads.
     */
    distinct?: EspecialidadScalarFieldEnum | EspecialidadScalarFieldEnum[]
  }

  /**
   * Especialidad findMany
   */
  export type EspecialidadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which Especialidads to fetch.
     */
    where?: EspecialidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Especialidads to fetch.
     */
    orderBy?: EspecialidadOrderByWithRelationInput | EspecialidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Especialidads.
     */
    cursor?: EspecialidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Especialidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Especialidads.
     */
    skip?: number
    distinct?: EspecialidadScalarFieldEnum | EspecialidadScalarFieldEnum[]
  }

  /**
   * Especialidad create
   */
  export type EspecialidadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
    /**
     * The data needed to create a Especialidad.
     */
    data: XOR<EspecialidadCreateInput, EspecialidadUncheckedCreateInput>
  }

  /**
   * Especialidad createMany
   */
  export type EspecialidadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Especialidads.
     */
    data: EspecialidadCreateManyInput | EspecialidadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Especialidad createManyAndReturn
   */
  export type EspecialidadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * The data used to create many Especialidads.
     */
    data: EspecialidadCreateManyInput | EspecialidadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Especialidad update
   */
  export type EspecialidadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
    /**
     * The data needed to update a Especialidad.
     */
    data: XOR<EspecialidadUpdateInput, EspecialidadUncheckedUpdateInput>
    /**
     * Choose, which Especialidad to update.
     */
    where: EspecialidadWhereUniqueInput
  }

  /**
   * Especialidad updateMany
   */
  export type EspecialidadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Especialidads.
     */
    data: XOR<EspecialidadUpdateManyMutationInput, EspecialidadUncheckedUpdateManyInput>
    /**
     * Filter which Especialidads to update
     */
    where?: EspecialidadWhereInput
    /**
     * Limit how many Especialidads to update.
     */
    limit?: number
  }

  /**
   * Especialidad updateManyAndReturn
   */
  export type EspecialidadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * The data used to update Especialidads.
     */
    data: XOR<EspecialidadUpdateManyMutationInput, EspecialidadUncheckedUpdateManyInput>
    /**
     * Filter which Especialidads to update
     */
    where?: EspecialidadWhereInput
    /**
     * Limit how many Especialidads to update.
     */
    limit?: number
  }

  /**
   * Especialidad upsert
   */
  export type EspecialidadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
    /**
     * The filter to search for the Especialidad to update in case it exists.
     */
    where: EspecialidadWhereUniqueInput
    /**
     * In case the Especialidad found by the `where` argument doesn't exist, create a new Especialidad with this data.
     */
    create: XOR<EspecialidadCreateInput, EspecialidadUncheckedCreateInput>
    /**
     * In case the Especialidad was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EspecialidadUpdateInput, EspecialidadUncheckedUpdateInput>
  }

  /**
   * Especialidad delete
   */
  export type EspecialidadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
    /**
     * Filter which Especialidad to delete.
     */
    where: EspecialidadWhereUniqueInput
  }

  /**
   * Especialidad deleteMany
   */
  export type EspecialidadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Especialidads to delete
     */
    where?: EspecialidadWhereInput
    /**
     * Limit how many Especialidads to delete.
     */
    limit?: number
  }

  /**
   * Especialidad.medicoEspecialidad
   */
  export type Especialidad$medicoEspecialidadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    where?: MedicoEspecialidadWhereInput
    orderBy?: MedicoEspecialidadOrderByWithRelationInput | MedicoEspecialidadOrderByWithRelationInput[]
    cursor?: MedicoEspecialidadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicoEspecialidadScalarFieldEnum | MedicoEspecialidadScalarFieldEnum[]
  }

  /**
   * Especialidad.episodiosClinicos
   */
  export type Especialidad$episodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    where?: EpisodioClincoWhereInput
    orderBy?: EpisodioClincoOrderByWithRelationInput | EpisodioClincoOrderByWithRelationInput[]
    cursor?: EpisodioClincoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodioClincoScalarFieldEnum | EpisodioClincoScalarFieldEnum[]
  }

  /**
   * Especialidad without action
   */
  export type EspecialidadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Especialidad
     */
    select?: EspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Especialidad
     */
    omit?: EspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EspecialidadInclude<ExtArgs> | null
  }


  /**
   * Model MedicoEspecialidad
   */

  export type AggregateMedicoEspecialidad = {
    _count: MedicoEspecialidadCountAggregateOutputType | null
    _avg: MedicoEspecialidadAvgAggregateOutputType | null
    _sum: MedicoEspecialidadSumAggregateOutputType | null
    _min: MedicoEspecialidadMinAggregateOutputType | null
    _max: MedicoEspecialidadMaxAggregateOutputType | null
  }

  export type MedicoEspecialidadAvgAggregateOutputType = {
    id: number | null
    medicoId: number | null
    especialidadId: number | null
  }

  export type MedicoEspecialidadSumAggregateOutputType = {
    id: number | null
    medicoId: number | null
    especialidadId: number | null
  }

  export type MedicoEspecialidadMinAggregateOutputType = {
    id: number | null
    medicoId: number | null
    especialidadId: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    activo: boolean | null
  }

  export type MedicoEspecialidadMaxAggregateOutputType = {
    id: number | null
    medicoId: number | null
    especialidadId: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    activo: boolean | null
  }

  export type MedicoEspecialidadCountAggregateOutputType = {
    id: number
    medicoId: number
    especialidadId: number
    fechaInicio: number
    fechaFin: number
    activo: number
    _all: number
  }


  export type MedicoEspecialidadAvgAggregateInputType = {
    id?: true
    medicoId?: true
    especialidadId?: true
  }

  export type MedicoEspecialidadSumAggregateInputType = {
    id?: true
    medicoId?: true
    especialidadId?: true
  }

  export type MedicoEspecialidadMinAggregateInputType = {
    id?: true
    medicoId?: true
    especialidadId?: true
    fechaInicio?: true
    fechaFin?: true
    activo?: true
  }

  export type MedicoEspecialidadMaxAggregateInputType = {
    id?: true
    medicoId?: true
    especialidadId?: true
    fechaInicio?: true
    fechaFin?: true
    activo?: true
  }

  export type MedicoEspecialidadCountAggregateInputType = {
    id?: true
    medicoId?: true
    especialidadId?: true
    fechaInicio?: true
    fechaFin?: true
    activo?: true
    _all?: true
  }

  export type MedicoEspecialidadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicoEspecialidad to aggregate.
     */
    where?: MedicoEspecialidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicoEspecialidads to fetch.
     */
    orderBy?: MedicoEspecialidadOrderByWithRelationInput | MedicoEspecialidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicoEspecialidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicoEspecialidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicoEspecialidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicoEspecialidads
    **/
    _count?: true | MedicoEspecialidadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicoEspecialidadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicoEspecialidadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicoEspecialidadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicoEspecialidadMaxAggregateInputType
  }

  export type GetMedicoEspecialidadAggregateType<T extends MedicoEspecialidadAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicoEspecialidad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicoEspecialidad[P]>
      : GetScalarType<T[P], AggregateMedicoEspecialidad[P]>
  }




  export type MedicoEspecialidadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicoEspecialidadWhereInput
    orderBy?: MedicoEspecialidadOrderByWithAggregationInput | MedicoEspecialidadOrderByWithAggregationInput[]
    by: MedicoEspecialidadScalarFieldEnum[] | MedicoEspecialidadScalarFieldEnum
    having?: MedicoEspecialidadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicoEspecialidadCountAggregateInputType | true
    _avg?: MedicoEspecialidadAvgAggregateInputType
    _sum?: MedicoEspecialidadSumAggregateInputType
    _min?: MedicoEspecialidadMinAggregateInputType
    _max?: MedicoEspecialidadMaxAggregateInputType
  }

  export type MedicoEspecialidadGroupByOutputType = {
    id: number
    medicoId: number
    especialidadId: number
    fechaInicio: Date
    fechaFin: Date | null
    activo: boolean
    _count: MedicoEspecialidadCountAggregateOutputType | null
    _avg: MedicoEspecialidadAvgAggregateOutputType | null
    _sum: MedicoEspecialidadSumAggregateOutputType | null
    _min: MedicoEspecialidadMinAggregateOutputType | null
    _max: MedicoEspecialidadMaxAggregateOutputType | null
  }

  type GetMedicoEspecialidadGroupByPayload<T extends MedicoEspecialidadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicoEspecialidadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicoEspecialidadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicoEspecialidadGroupByOutputType[P]>
            : GetScalarType<T[P], MedicoEspecialidadGroupByOutputType[P]>
        }
      >
    >


  export type MedicoEspecialidadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicoId?: boolean
    especialidadId?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    activo?: boolean
    medico?: boolean | MedicoDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicoEspecialidad"]>

  export type MedicoEspecialidadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicoId?: boolean
    especialidadId?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    activo?: boolean
    medico?: boolean | MedicoDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicoEspecialidad"]>

  export type MedicoEspecialidadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicoId?: boolean
    especialidadId?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    activo?: boolean
    medico?: boolean | MedicoDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicoEspecialidad"]>

  export type MedicoEspecialidadSelectScalar = {
    id?: boolean
    medicoId?: boolean
    especialidadId?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    activo?: boolean
  }

  export type MedicoEspecialidadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "medicoId" | "especialidadId" | "fechaInicio" | "fechaFin" | "activo", ExtArgs["result"]["medicoEspecialidad"]>
  export type MedicoEspecialidadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medico?: boolean | MedicoDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
  }
  export type MedicoEspecialidadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medico?: boolean | MedicoDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
  }
  export type MedicoEspecialidadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medico?: boolean | MedicoDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
  }

  export type $MedicoEspecialidadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicoEspecialidad"
    objects: {
      medico: Prisma.$MedicoPayload<ExtArgs>
      especialidad: Prisma.$EspecialidadPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      medicoId: number
      especialidadId: number
      fechaInicio: Date
      fechaFin: Date | null
      activo: boolean
    }, ExtArgs["result"]["medicoEspecialidad"]>
    composites: {}
  }

  type MedicoEspecialidadGetPayload<S extends boolean | null | undefined | MedicoEspecialidadDefaultArgs> = $Result.GetResult<Prisma.$MedicoEspecialidadPayload, S>

  type MedicoEspecialidadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicoEspecialidadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicoEspecialidadCountAggregateInputType | true
    }

  export interface MedicoEspecialidadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicoEspecialidad'], meta: { name: 'MedicoEspecialidad' } }
    /**
     * Find zero or one MedicoEspecialidad that matches the filter.
     * @param {MedicoEspecialidadFindUniqueArgs} args - Arguments to find a MedicoEspecialidad
     * @example
     * // Get one MedicoEspecialidad
     * const medicoEspecialidad = await prisma.medicoEspecialidad.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicoEspecialidadFindUniqueArgs>(args: SelectSubset<T, MedicoEspecialidadFindUniqueArgs<ExtArgs>>): Prisma__MedicoEspecialidadClient<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MedicoEspecialidad that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicoEspecialidadFindUniqueOrThrowArgs} args - Arguments to find a MedicoEspecialidad
     * @example
     * // Get one MedicoEspecialidad
     * const medicoEspecialidad = await prisma.medicoEspecialidad.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicoEspecialidadFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicoEspecialidadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicoEspecialidadClient<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicoEspecialidad that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoEspecialidadFindFirstArgs} args - Arguments to find a MedicoEspecialidad
     * @example
     * // Get one MedicoEspecialidad
     * const medicoEspecialidad = await prisma.medicoEspecialidad.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicoEspecialidadFindFirstArgs>(args?: SelectSubset<T, MedicoEspecialidadFindFirstArgs<ExtArgs>>): Prisma__MedicoEspecialidadClient<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicoEspecialidad that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoEspecialidadFindFirstOrThrowArgs} args - Arguments to find a MedicoEspecialidad
     * @example
     * // Get one MedicoEspecialidad
     * const medicoEspecialidad = await prisma.medicoEspecialidad.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicoEspecialidadFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicoEspecialidadFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicoEspecialidadClient<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MedicoEspecialidads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoEspecialidadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicoEspecialidads
     * const medicoEspecialidads = await prisma.medicoEspecialidad.findMany()
     * 
     * // Get first 10 MedicoEspecialidads
     * const medicoEspecialidads = await prisma.medicoEspecialidad.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicoEspecialidadWithIdOnly = await prisma.medicoEspecialidad.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicoEspecialidadFindManyArgs>(args?: SelectSubset<T, MedicoEspecialidadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MedicoEspecialidad.
     * @param {MedicoEspecialidadCreateArgs} args - Arguments to create a MedicoEspecialidad.
     * @example
     * // Create one MedicoEspecialidad
     * const MedicoEspecialidad = await prisma.medicoEspecialidad.create({
     *   data: {
     *     // ... data to create a MedicoEspecialidad
     *   }
     * })
     * 
     */
    create<T extends MedicoEspecialidadCreateArgs>(args: SelectSubset<T, MedicoEspecialidadCreateArgs<ExtArgs>>): Prisma__MedicoEspecialidadClient<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MedicoEspecialidads.
     * @param {MedicoEspecialidadCreateManyArgs} args - Arguments to create many MedicoEspecialidads.
     * @example
     * // Create many MedicoEspecialidads
     * const medicoEspecialidad = await prisma.medicoEspecialidad.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicoEspecialidadCreateManyArgs>(args?: SelectSubset<T, MedicoEspecialidadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicoEspecialidads and returns the data saved in the database.
     * @param {MedicoEspecialidadCreateManyAndReturnArgs} args - Arguments to create many MedicoEspecialidads.
     * @example
     * // Create many MedicoEspecialidads
     * const medicoEspecialidad = await prisma.medicoEspecialidad.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicoEspecialidads and only return the `id`
     * const medicoEspecialidadWithIdOnly = await prisma.medicoEspecialidad.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicoEspecialidadCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicoEspecialidadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MedicoEspecialidad.
     * @param {MedicoEspecialidadDeleteArgs} args - Arguments to delete one MedicoEspecialidad.
     * @example
     * // Delete one MedicoEspecialidad
     * const MedicoEspecialidad = await prisma.medicoEspecialidad.delete({
     *   where: {
     *     // ... filter to delete one MedicoEspecialidad
     *   }
     * })
     * 
     */
    delete<T extends MedicoEspecialidadDeleteArgs>(args: SelectSubset<T, MedicoEspecialidadDeleteArgs<ExtArgs>>): Prisma__MedicoEspecialidadClient<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MedicoEspecialidad.
     * @param {MedicoEspecialidadUpdateArgs} args - Arguments to update one MedicoEspecialidad.
     * @example
     * // Update one MedicoEspecialidad
     * const medicoEspecialidad = await prisma.medicoEspecialidad.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicoEspecialidadUpdateArgs>(args: SelectSubset<T, MedicoEspecialidadUpdateArgs<ExtArgs>>): Prisma__MedicoEspecialidadClient<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MedicoEspecialidads.
     * @param {MedicoEspecialidadDeleteManyArgs} args - Arguments to filter MedicoEspecialidads to delete.
     * @example
     * // Delete a few MedicoEspecialidads
     * const { count } = await prisma.medicoEspecialidad.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicoEspecialidadDeleteManyArgs>(args?: SelectSubset<T, MedicoEspecialidadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicoEspecialidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoEspecialidadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicoEspecialidads
     * const medicoEspecialidad = await prisma.medicoEspecialidad.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicoEspecialidadUpdateManyArgs>(args: SelectSubset<T, MedicoEspecialidadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicoEspecialidads and returns the data updated in the database.
     * @param {MedicoEspecialidadUpdateManyAndReturnArgs} args - Arguments to update many MedicoEspecialidads.
     * @example
     * // Update many MedicoEspecialidads
     * const medicoEspecialidad = await prisma.medicoEspecialidad.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MedicoEspecialidads and only return the `id`
     * const medicoEspecialidadWithIdOnly = await prisma.medicoEspecialidad.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicoEspecialidadUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicoEspecialidadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MedicoEspecialidad.
     * @param {MedicoEspecialidadUpsertArgs} args - Arguments to update or create a MedicoEspecialidad.
     * @example
     * // Update or create a MedicoEspecialidad
     * const medicoEspecialidad = await prisma.medicoEspecialidad.upsert({
     *   create: {
     *     // ... data to create a MedicoEspecialidad
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicoEspecialidad we want to update
     *   }
     * })
     */
    upsert<T extends MedicoEspecialidadUpsertArgs>(args: SelectSubset<T, MedicoEspecialidadUpsertArgs<ExtArgs>>): Prisma__MedicoEspecialidadClient<$Result.GetResult<Prisma.$MedicoEspecialidadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MedicoEspecialidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoEspecialidadCountArgs} args - Arguments to filter MedicoEspecialidads to count.
     * @example
     * // Count the number of MedicoEspecialidads
     * const count = await prisma.medicoEspecialidad.count({
     *   where: {
     *     // ... the filter for the MedicoEspecialidads we want to count
     *   }
     * })
    **/
    count<T extends MedicoEspecialidadCountArgs>(
      args?: Subset<T, MedicoEspecialidadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicoEspecialidadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicoEspecialidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoEspecialidadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicoEspecialidadAggregateArgs>(args: Subset<T, MedicoEspecialidadAggregateArgs>): Prisma.PrismaPromise<GetMedicoEspecialidadAggregateType<T>>

    /**
     * Group by MedicoEspecialidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicoEspecialidadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicoEspecialidadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicoEspecialidadGroupByArgs['orderBy'] }
        : { orderBy?: MedicoEspecialidadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicoEspecialidadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicoEspecialidadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicoEspecialidad model
   */
  readonly fields: MedicoEspecialidadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicoEspecialidad.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicoEspecialidadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medico<T extends MedicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicoDefaultArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    especialidad<T extends EspecialidadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EspecialidadDefaultArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicoEspecialidad model
   */
  interface MedicoEspecialidadFieldRefs {
    readonly id: FieldRef<"MedicoEspecialidad", 'Int'>
    readonly medicoId: FieldRef<"MedicoEspecialidad", 'Int'>
    readonly especialidadId: FieldRef<"MedicoEspecialidad", 'Int'>
    readonly fechaInicio: FieldRef<"MedicoEspecialidad", 'DateTime'>
    readonly fechaFin: FieldRef<"MedicoEspecialidad", 'DateTime'>
    readonly activo: FieldRef<"MedicoEspecialidad", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * MedicoEspecialidad findUnique
   */
  export type MedicoEspecialidadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which MedicoEspecialidad to fetch.
     */
    where: MedicoEspecialidadWhereUniqueInput
  }

  /**
   * MedicoEspecialidad findUniqueOrThrow
   */
  export type MedicoEspecialidadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which MedicoEspecialidad to fetch.
     */
    where: MedicoEspecialidadWhereUniqueInput
  }

  /**
   * MedicoEspecialidad findFirst
   */
  export type MedicoEspecialidadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which MedicoEspecialidad to fetch.
     */
    where?: MedicoEspecialidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicoEspecialidads to fetch.
     */
    orderBy?: MedicoEspecialidadOrderByWithRelationInput | MedicoEspecialidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicoEspecialidads.
     */
    cursor?: MedicoEspecialidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicoEspecialidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicoEspecialidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicoEspecialidads.
     */
    distinct?: MedicoEspecialidadScalarFieldEnum | MedicoEspecialidadScalarFieldEnum[]
  }

  /**
   * MedicoEspecialidad findFirstOrThrow
   */
  export type MedicoEspecialidadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which MedicoEspecialidad to fetch.
     */
    where?: MedicoEspecialidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicoEspecialidads to fetch.
     */
    orderBy?: MedicoEspecialidadOrderByWithRelationInput | MedicoEspecialidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicoEspecialidads.
     */
    cursor?: MedicoEspecialidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicoEspecialidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicoEspecialidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicoEspecialidads.
     */
    distinct?: MedicoEspecialidadScalarFieldEnum | MedicoEspecialidadScalarFieldEnum[]
  }

  /**
   * MedicoEspecialidad findMany
   */
  export type MedicoEspecialidadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    /**
     * Filter, which MedicoEspecialidads to fetch.
     */
    where?: MedicoEspecialidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicoEspecialidads to fetch.
     */
    orderBy?: MedicoEspecialidadOrderByWithRelationInput | MedicoEspecialidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicoEspecialidads.
     */
    cursor?: MedicoEspecialidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicoEspecialidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicoEspecialidads.
     */
    skip?: number
    distinct?: MedicoEspecialidadScalarFieldEnum | MedicoEspecialidadScalarFieldEnum[]
  }

  /**
   * MedicoEspecialidad create
   */
  export type MedicoEspecialidadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicoEspecialidad.
     */
    data: XOR<MedicoEspecialidadCreateInput, MedicoEspecialidadUncheckedCreateInput>
  }

  /**
   * MedicoEspecialidad createMany
   */
  export type MedicoEspecialidadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicoEspecialidads.
     */
    data: MedicoEspecialidadCreateManyInput | MedicoEspecialidadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicoEspecialidad createManyAndReturn
   */
  export type MedicoEspecialidadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * The data used to create many MedicoEspecialidads.
     */
    data: MedicoEspecialidadCreateManyInput | MedicoEspecialidadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicoEspecialidad update
   */
  export type MedicoEspecialidadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicoEspecialidad.
     */
    data: XOR<MedicoEspecialidadUpdateInput, MedicoEspecialidadUncheckedUpdateInput>
    /**
     * Choose, which MedicoEspecialidad to update.
     */
    where: MedicoEspecialidadWhereUniqueInput
  }

  /**
   * MedicoEspecialidad updateMany
   */
  export type MedicoEspecialidadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicoEspecialidads.
     */
    data: XOR<MedicoEspecialidadUpdateManyMutationInput, MedicoEspecialidadUncheckedUpdateManyInput>
    /**
     * Filter which MedicoEspecialidads to update
     */
    where?: MedicoEspecialidadWhereInput
    /**
     * Limit how many MedicoEspecialidads to update.
     */
    limit?: number
  }

  /**
   * MedicoEspecialidad updateManyAndReturn
   */
  export type MedicoEspecialidadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * The data used to update MedicoEspecialidads.
     */
    data: XOR<MedicoEspecialidadUpdateManyMutationInput, MedicoEspecialidadUncheckedUpdateManyInput>
    /**
     * Filter which MedicoEspecialidads to update
     */
    where?: MedicoEspecialidadWhereInput
    /**
     * Limit how many MedicoEspecialidads to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicoEspecialidad upsert
   */
  export type MedicoEspecialidadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicoEspecialidad to update in case it exists.
     */
    where: MedicoEspecialidadWhereUniqueInput
    /**
     * In case the MedicoEspecialidad found by the `where` argument doesn't exist, create a new MedicoEspecialidad with this data.
     */
    create: XOR<MedicoEspecialidadCreateInput, MedicoEspecialidadUncheckedCreateInput>
    /**
     * In case the MedicoEspecialidad was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicoEspecialidadUpdateInput, MedicoEspecialidadUncheckedUpdateInput>
  }

  /**
   * MedicoEspecialidad delete
   */
  export type MedicoEspecialidadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
    /**
     * Filter which MedicoEspecialidad to delete.
     */
    where: MedicoEspecialidadWhereUniqueInput
  }

  /**
   * MedicoEspecialidad deleteMany
   */
  export type MedicoEspecialidadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicoEspecialidads to delete
     */
    where?: MedicoEspecialidadWhereInput
    /**
     * Limit how many MedicoEspecialidads to delete.
     */
    limit?: number
  }

  /**
   * MedicoEspecialidad without action
   */
  export type MedicoEspecialidadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicoEspecialidad
     */
    select?: MedicoEspecialidadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicoEspecialidad
     */
    omit?: MedicoEspecialidadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoEspecialidadInclude<ExtArgs> | null
  }


  /**
   * Model Paciente
   */

  export type AggregatePaciente = {
    _count: PacienteCountAggregateOutputType | null
    _avg: PacienteAvgAggregateOutputType | null
    _sum: PacienteSumAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  export type PacienteAvgAggregateOutputType = {
    id: number | null
    programaAcademicoId: number | null
  }

  export type PacienteSumAggregateOutputType = {
    id: number | null
    programaAcademicoId: number | null
  }

  export type PacienteMinAggregateOutputType = {
    id: number | null
    tipoDocumento: string | null
    numDocumento: string | null
    nombres: string | null
    apellidos: string | null
    fechaNacimiento: Date | null
    genero: string | null
    direccion: string | null
    telefono: string | null
    correo: string | null
    grupoSanguineo: string | null
    alergias: string | null
    antecedentesFamiliares: string | null
    estadoCivil: string | null
    fechaRegistro: Date | null
    activo: boolean | null
    programaAcademicoId: number | null
  }

  export type PacienteMaxAggregateOutputType = {
    id: number | null
    tipoDocumento: string | null
    numDocumento: string | null
    nombres: string | null
    apellidos: string | null
    fechaNacimiento: Date | null
    genero: string | null
    direccion: string | null
    telefono: string | null
    correo: string | null
    grupoSanguineo: string | null
    alergias: string | null
    antecedentesFamiliares: string | null
    estadoCivil: string | null
    fechaRegistro: Date | null
    activo: boolean | null
    programaAcademicoId: number | null
  }

  export type PacienteCountAggregateOutputType = {
    id: number
    tipoDocumento: number
    numDocumento: number
    nombres: number
    apellidos: number
    fechaNacimiento: number
    genero: number
    direccion: number
    telefono: number
    correo: number
    grupoSanguineo: number
    alergias: number
    antecedentesFamiliares: number
    estadoCivil: number
    fechaRegistro: number
    activo: number
    programaAcademicoId: number
    _all: number
  }


  export type PacienteAvgAggregateInputType = {
    id?: true
    programaAcademicoId?: true
  }

  export type PacienteSumAggregateInputType = {
    id?: true
    programaAcademicoId?: true
  }

  export type PacienteMinAggregateInputType = {
    id?: true
    tipoDocumento?: true
    numDocumento?: true
    nombres?: true
    apellidos?: true
    fechaNacimiento?: true
    genero?: true
    direccion?: true
    telefono?: true
    correo?: true
    grupoSanguineo?: true
    alergias?: true
    antecedentesFamiliares?: true
    estadoCivil?: true
    fechaRegistro?: true
    activo?: true
    programaAcademicoId?: true
  }

  export type PacienteMaxAggregateInputType = {
    id?: true
    tipoDocumento?: true
    numDocumento?: true
    nombres?: true
    apellidos?: true
    fechaNacimiento?: true
    genero?: true
    direccion?: true
    telefono?: true
    correo?: true
    grupoSanguineo?: true
    alergias?: true
    antecedentesFamiliares?: true
    estadoCivil?: true
    fechaRegistro?: true
    activo?: true
    programaAcademicoId?: true
  }

  export type PacienteCountAggregateInputType = {
    id?: true
    tipoDocumento?: true
    numDocumento?: true
    nombres?: true
    apellidos?: true
    fechaNacimiento?: true
    genero?: true
    direccion?: true
    telefono?: true
    correo?: true
    grupoSanguineo?: true
    alergias?: true
    antecedentesFamiliares?: true
    estadoCivil?: true
    fechaRegistro?: true
    activo?: true
    programaAcademicoId?: true
    _all?: true
  }

  export type PacienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paciente to aggregate.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pacientes
    **/
    _count?: true | PacienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PacienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PacienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PacienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PacienteMaxAggregateInputType
  }

  export type GetPacienteAggregateType<T extends PacienteAggregateArgs> = {
        [P in keyof T & keyof AggregatePaciente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaciente[P]>
      : GetScalarType<T[P], AggregatePaciente[P]>
  }




  export type PacienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PacienteWhereInput
    orderBy?: PacienteOrderByWithAggregationInput | PacienteOrderByWithAggregationInput[]
    by: PacienteScalarFieldEnum[] | PacienteScalarFieldEnum
    having?: PacienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PacienteCountAggregateInputType | true
    _avg?: PacienteAvgAggregateInputType
    _sum?: PacienteSumAggregateInputType
    _min?: PacienteMinAggregateInputType
    _max?: PacienteMaxAggregateInputType
  }

  export type PacienteGroupByOutputType = {
    id: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date
    genero: string
    direccion: string | null
    telefono: string | null
    correo: string | null
    grupoSanguineo: string | null
    alergias: string | null
    antecedentesFamiliares: string | null
    estadoCivil: string | null
    fechaRegistro: Date
    activo: boolean
    programaAcademicoId: number
    _count: PacienteCountAggregateOutputType | null
    _avg: PacienteAvgAggregateOutputType | null
    _sum: PacienteSumAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  type GetPacienteGroupByPayload<T extends PacienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PacienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PacienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PacienteGroupByOutputType[P]>
            : GetScalarType<T[P], PacienteGroupByOutputType[P]>
        }
      >
    >


  export type PacienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    fechaNacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    correo?: boolean
    grupoSanguineo?: boolean
    alergias?: boolean
    antecedentesFamiliares?: boolean
    estadoCivil?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    programaAcademicoId?: boolean
    programaAcademico?: boolean | ProgramaAcademicoDefaultArgs<ExtArgs>
    contactosEmergencia?: boolean | Paciente$contactosEmergenciaArgs<ExtArgs>
    historiasClinicas?: boolean | Paciente$historiasClinicasArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    fechaNacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    correo?: boolean
    grupoSanguineo?: boolean
    alergias?: boolean
    antecedentesFamiliares?: boolean
    estadoCivil?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    programaAcademicoId?: boolean
    programaAcademico?: boolean | ProgramaAcademicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    fechaNacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    correo?: boolean
    grupoSanguineo?: boolean
    alergias?: boolean
    antecedentesFamiliares?: boolean
    estadoCivil?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    programaAcademicoId?: boolean
    programaAcademico?: boolean | ProgramaAcademicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectScalar = {
    id?: boolean
    tipoDocumento?: boolean
    numDocumento?: boolean
    nombres?: boolean
    apellidos?: boolean
    fechaNacimiento?: boolean
    genero?: boolean
    direccion?: boolean
    telefono?: boolean
    correo?: boolean
    grupoSanguineo?: boolean
    alergias?: boolean
    antecedentesFamiliares?: boolean
    estadoCivil?: boolean
    fechaRegistro?: boolean
    activo?: boolean
    programaAcademicoId?: boolean
  }

  export type PacienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tipoDocumento" | "numDocumento" | "nombres" | "apellidos" | "fechaNacimiento" | "genero" | "direccion" | "telefono" | "correo" | "grupoSanguineo" | "alergias" | "antecedentesFamiliares" | "estadoCivil" | "fechaRegistro" | "activo" | "programaAcademicoId", ExtArgs["result"]["paciente"]>
  export type PacienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programaAcademico?: boolean | ProgramaAcademicoDefaultArgs<ExtArgs>
    contactosEmergencia?: boolean | Paciente$contactosEmergenciaArgs<ExtArgs>
    historiasClinicas?: boolean | Paciente$historiasClinicasArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PacienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programaAcademico?: boolean | ProgramaAcademicoDefaultArgs<ExtArgs>
  }
  export type PacienteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    programaAcademico?: boolean | ProgramaAcademicoDefaultArgs<ExtArgs>
  }

  export type $PacientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Paciente"
    objects: {
      programaAcademico: Prisma.$ProgramaAcademicoPayload<ExtArgs>
      contactosEmergencia: Prisma.$ContactoEmergenciaPayload<ExtArgs>[]
      historiasClinicas: Prisma.$HistoriaClinicaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipoDocumento: string
      numDocumento: string
      nombres: string
      apellidos: string
      fechaNacimiento: Date
      genero: string
      direccion: string | null
      telefono: string | null
      correo: string | null
      grupoSanguineo: string | null
      alergias: string | null
      antecedentesFamiliares: string | null
      estadoCivil: string | null
      fechaRegistro: Date
      activo: boolean
      programaAcademicoId: number
    }, ExtArgs["result"]["paciente"]>
    composites: {}
  }

  type PacienteGetPayload<S extends boolean | null | undefined | PacienteDefaultArgs> = $Result.GetResult<Prisma.$PacientePayload, S>

  type PacienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PacienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PacienteCountAggregateInputType | true
    }

  export interface PacienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Paciente'], meta: { name: 'Paciente' } }
    /**
     * Find zero or one Paciente that matches the filter.
     * @param {PacienteFindUniqueArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PacienteFindUniqueArgs>(args: SelectSubset<T, PacienteFindUniqueArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Paciente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PacienteFindUniqueOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PacienteFindUniqueOrThrowArgs>(args: SelectSubset<T, PacienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paciente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindFirstArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PacienteFindFirstArgs>(args?: SelectSubset<T, PacienteFindFirstArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paciente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindFirstOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PacienteFindFirstOrThrowArgs>(args?: SelectSubset<T, PacienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pacientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pacientes
     * const pacientes = await prisma.paciente.findMany()
     * 
     * // Get first 10 Pacientes
     * const pacientes = await prisma.paciente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pacienteWithIdOnly = await prisma.paciente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PacienteFindManyArgs>(args?: SelectSubset<T, PacienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Paciente.
     * @param {PacienteCreateArgs} args - Arguments to create a Paciente.
     * @example
     * // Create one Paciente
     * const Paciente = await prisma.paciente.create({
     *   data: {
     *     // ... data to create a Paciente
     *   }
     * })
     * 
     */
    create<T extends PacienteCreateArgs>(args: SelectSubset<T, PacienteCreateArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pacientes.
     * @param {PacienteCreateManyArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PacienteCreateManyArgs>(args?: SelectSubset<T, PacienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pacientes and returns the data saved in the database.
     * @param {PacienteCreateManyAndReturnArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pacientes and only return the `id`
     * const pacienteWithIdOnly = await prisma.paciente.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PacienteCreateManyAndReturnArgs>(args?: SelectSubset<T, PacienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Paciente.
     * @param {PacienteDeleteArgs} args - Arguments to delete one Paciente.
     * @example
     * // Delete one Paciente
     * const Paciente = await prisma.paciente.delete({
     *   where: {
     *     // ... filter to delete one Paciente
     *   }
     * })
     * 
     */
    delete<T extends PacienteDeleteArgs>(args: SelectSubset<T, PacienteDeleteArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Paciente.
     * @param {PacienteUpdateArgs} args - Arguments to update one Paciente.
     * @example
     * // Update one Paciente
     * const paciente = await prisma.paciente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PacienteUpdateArgs>(args: SelectSubset<T, PacienteUpdateArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pacientes.
     * @param {PacienteDeleteManyArgs} args - Arguments to filter Pacientes to delete.
     * @example
     * // Delete a few Pacientes
     * const { count } = await prisma.paciente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PacienteDeleteManyArgs>(args?: SelectSubset<T, PacienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pacientes
     * const paciente = await prisma.paciente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PacienteUpdateManyArgs>(args: SelectSubset<T, PacienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pacientes and returns the data updated in the database.
     * @param {PacienteUpdateManyAndReturnArgs} args - Arguments to update many Pacientes.
     * @example
     * // Update many Pacientes
     * const paciente = await prisma.paciente.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pacientes and only return the `id`
     * const pacienteWithIdOnly = await prisma.paciente.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PacienteUpdateManyAndReturnArgs>(args: SelectSubset<T, PacienteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Paciente.
     * @param {PacienteUpsertArgs} args - Arguments to update or create a Paciente.
     * @example
     * // Update or create a Paciente
     * const paciente = await prisma.paciente.upsert({
     *   create: {
     *     // ... data to create a Paciente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paciente we want to update
     *   }
     * })
     */
    upsert<T extends PacienteUpsertArgs>(args: SelectSubset<T, PacienteUpsertArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteCountArgs} args - Arguments to filter Pacientes to count.
     * @example
     * // Count the number of Pacientes
     * const count = await prisma.paciente.count({
     *   where: {
     *     // ... the filter for the Pacientes we want to count
     *   }
     * })
    **/
    count<T extends PacienteCountArgs>(
      args?: Subset<T, PacienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PacienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PacienteAggregateArgs>(args: Subset<T, PacienteAggregateArgs>): Prisma.PrismaPromise<GetPacienteAggregateType<T>>

    /**
     * Group by Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PacienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PacienteGroupByArgs['orderBy'] }
        : { orderBy?: PacienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PacienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPacienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Paciente model
   */
  readonly fields: PacienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Paciente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PacienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    programaAcademico<T extends ProgramaAcademicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProgramaAcademicoDefaultArgs<ExtArgs>>): Prisma__ProgramaAcademicoClient<$Result.GetResult<Prisma.$ProgramaAcademicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contactosEmergencia<T extends Paciente$contactosEmergenciaArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$contactosEmergenciaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    historiasClinicas<T extends Paciente$historiasClinicasArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$historiasClinicasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Paciente model
   */
  interface PacienteFieldRefs {
    readonly id: FieldRef<"Paciente", 'Int'>
    readonly tipoDocumento: FieldRef<"Paciente", 'String'>
    readonly numDocumento: FieldRef<"Paciente", 'String'>
    readonly nombres: FieldRef<"Paciente", 'String'>
    readonly apellidos: FieldRef<"Paciente", 'String'>
    readonly fechaNacimiento: FieldRef<"Paciente", 'DateTime'>
    readonly genero: FieldRef<"Paciente", 'String'>
    readonly direccion: FieldRef<"Paciente", 'String'>
    readonly telefono: FieldRef<"Paciente", 'String'>
    readonly correo: FieldRef<"Paciente", 'String'>
    readonly grupoSanguineo: FieldRef<"Paciente", 'String'>
    readonly alergias: FieldRef<"Paciente", 'String'>
    readonly antecedentesFamiliares: FieldRef<"Paciente", 'String'>
    readonly estadoCivil: FieldRef<"Paciente", 'String'>
    readonly fechaRegistro: FieldRef<"Paciente", 'DateTime'>
    readonly activo: FieldRef<"Paciente", 'Boolean'>
    readonly programaAcademicoId: FieldRef<"Paciente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Paciente findUnique
   */
  export type PacienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente findUniqueOrThrow
   */
  export type PacienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente findFirst
   */
  export type PacienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente findFirstOrThrow
   */
  export type PacienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente findMany
   */
  export type PacienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Pacientes to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente create
   */
  export type PacienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Paciente.
     */
    data: XOR<PacienteCreateInput, PacienteUncheckedCreateInput>
  }

  /**
   * Paciente createMany
   */
  export type PacienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pacientes.
     */
    data: PacienteCreateManyInput | PacienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Paciente createManyAndReturn
   */
  export type PacienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * The data used to create many Pacientes.
     */
    data: PacienteCreateManyInput | PacienteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Paciente update
   */
  export type PacienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Paciente.
     */
    data: XOR<PacienteUpdateInput, PacienteUncheckedUpdateInput>
    /**
     * Choose, which Paciente to update.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente updateMany
   */
  export type PacienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pacientes.
     */
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyInput>
    /**
     * Filter which Pacientes to update
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to update.
     */
    limit?: number
  }

  /**
   * Paciente updateManyAndReturn
   */
  export type PacienteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * The data used to update Pacientes.
     */
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyInput>
    /**
     * Filter which Pacientes to update
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Paciente upsert
   */
  export type PacienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Paciente to update in case it exists.
     */
    where: PacienteWhereUniqueInput
    /**
     * In case the Paciente found by the `where` argument doesn't exist, create a new Paciente with this data.
     */
    create: XOR<PacienteCreateInput, PacienteUncheckedCreateInput>
    /**
     * In case the Paciente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PacienteUpdateInput, PacienteUncheckedUpdateInput>
  }

  /**
   * Paciente delete
   */
  export type PacienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter which Paciente to delete.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente deleteMany
   */
  export type PacienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pacientes to delete
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to delete.
     */
    limit?: number
  }

  /**
   * Paciente.contactosEmergencia
   */
  export type Paciente$contactosEmergenciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    where?: ContactoEmergenciaWhereInput
    orderBy?: ContactoEmergenciaOrderByWithRelationInput | ContactoEmergenciaOrderByWithRelationInput[]
    cursor?: ContactoEmergenciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactoEmergenciaScalarFieldEnum | ContactoEmergenciaScalarFieldEnum[]
  }

  /**
   * Paciente.historiasClinicas
   */
  export type Paciente$historiasClinicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    where?: HistoriaClinicaWhereInput
    orderBy?: HistoriaClinicaOrderByWithRelationInput | HistoriaClinicaOrderByWithRelationInput[]
    cursor?: HistoriaClinicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoriaClinicaScalarFieldEnum | HistoriaClinicaScalarFieldEnum[]
  }

  /**
   * Paciente without action
   */
  export type PacienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
  }


  /**
   * Model ContactoEmergencia
   */

  export type AggregateContactoEmergencia = {
    _count: ContactoEmergenciaCountAggregateOutputType | null
    _avg: ContactoEmergenciaAvgAggregateOutputType | null
    _sum: ContactoEmergenciaSumAggregateOutputType | null
    _min: ContactoEmergenciaMinAggregateOutputType | null
    _max: ContactoEmergenciaMaxAggregateOutputType | null
  }

  export type ContactoEmergenciaAvgAggregateOutputType = {
    id: number | null
    pacienteId: number | null
  }

  export type ContactoEmergenciaSumAggregateOutputType = {
    id: number | null
    pacienteId: number | null
  }

  export type ContactoEmergenciaMinAggregateOutputType = {
    id: number | null
    pacienteId: number | null
    nombres: string | null
    apellidos: string | null
    parentesco: string | null
    telefonoPrincipal: string | null
    telefonoSecundario: string | null
    direccion: string | null
    activo: boolean | null
  }

  export type ContactoEmergenciaMaxAggregateOutputType = {
    id: number | null
    pacienteId: number | null
    nombres: string | null
    apellidos: string | null
    parentesco: string | null
    telefonoPrincipal: string | null
    telefonoSecundario: string | null
    direccion: string | null
    activo: boolean | null
  }

  export type ContactoEmergenciaCountAggregateOutputType = {
    id: number
    pacienteId: number
    nombres: number
    apellidos: number
    parentesco: number
    telefonoPrincipal: number
    telefonoSecundario: number
    direccion: number
    activo: number
    _all: number
  }


  export type ContactoEmergenciaAvgAggregateInputType = {
    id?: true
    pacienteId?: true
  }

  export type ContactoEmergenciaSumAggregateInputType = {
    id?: true
    pacienteId?: true
  }

  export type ContactoEmergenciaMinAggregateInputType = {
    id?: true
    pacienteId?: true
    nombres?: true
    apellidos?: true
    parentesco?: true
    telefonoPrincipal?: true
    telefonoSecundario?: true
    direccion?: true
    activo?: true
  }

  export type ContactoEmergenciaMaxAggregateInputType = {
    id?: true
    pacienteId?: true
    nombres?: true
    apellidos?: true
    parentesco?: true
    telefonoPrincipal?: true
    telefonoSecundario?: true
    direccion?: true
    activo?: true
  }

  export type ContactoEmergenciaCountAggregateInputType = {
    id?: true
    pacienteId?: true
    nombres?: true
    apellidos?: true
    parentesco?: true
    telefonoPrincipal?: true
    telefonoSecundario?: true
    direccion?: true
    activo?: true
    _all?: true
  }

  export type ContactoEmergenciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactoEmergencia to aggregate.
     */
    where?: ContactoEmergenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactoEmergencias to fetch.
     */
    orderBy?: ContactoEmergenciaOrderByWithRelationInput | ContactoEmergenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactoEmergenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactoEmergencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactoEmergencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactoEmergencias
    **/
    _count?: true | ContactoEmergenciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactoEmergenciaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactoEmergenciaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactoEmergenciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactoEmergenciaMaxAggregateInputType
  }

  export type GetContactoEmergenciaAggregateType<T extends ContactoEmergenciaAggregateArgs> = {
        [P in keyof T & keyof AggregateContactoEmergencia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactoEmergencia[P]>
      : GetScalarType<T[P], AggregateContactoEmergencia[P]>
  }




  export type ContactoEmergenciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactoEmergenciaWhereInput
    orderBy?: ContactoEmergenciaOrderByWithAggregationInput | ContactoEmergenciaOrderByWithAggregationInput[]
    by: ContactoEmergenciaScalarFieldEnum[] | ContactoEmergenciaScalarFieldEnum
    having?: ContactoEmergenciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactoEmergenciaCountAggregateInputType | true
    _avg?: ContactoEmergenciaAvgAggregateInputType
    _sum?: ContactoEmergenciaSumAggregateInputType
    _min?: ContactoEmergenciaMinAggregateInputType
    _max?: ContactoEmergenciaMaxAggregateInputType
  }

  export type ContactoEmergenciaGroupByOutputType = {
    id: number
    pacienteId: number
    nombres: string
    apellidos: string
    parentesco: string
    telefonoPrincipal: string
    telefonoSecundario: string | null
    direccion: string | null
    activo: boolean
    _count: ContactoEmergenciaCountAggregateOutputType | null
    _avg: ContactoEmergenciaAvgAggregateOutputType | null
    _sum: ContactoEmergenciaSumAggregateOutputType | null
    _min: ContactoEmergenciaMinAggregateOutputType | null
    _max: ContactoEmergenciaMaxAggregateOutputType | null
  }

  type GetContactoEmergenciaGroupByPayload<T extends ContactoEmergenciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactoEmergenciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactoEmergenciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactoEmergenciaGroupByOutputType[P]>
            : GetScalarType<T[P], ContactoEmergenciaGroupByOutputType[P]>
        }
      >
    >


  export type ContactoEmergenciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    nombres?: boolean
    apellidos?: boolean
    parentesco?: boolean
    telefonoPrincipal?: boolean
    telefonoSecundario?: boolean
    direccion?: boolean
    activo?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactoEmergencia"]>

  export type ContactoEmergenciaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    nombres?: boolean
    apellidos?: boolean
    parentesco?: boolean
    telefonoPrincipal?: boolean
    telefonoSecundario?: boolean
    direccion?: boolean
    activo?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactoEmergencia"]>

  export type ContactoEmergenciaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    nombres?: boolean
    apellidos?: boolean
    parentesco?: boolean
    telefonoPrincipal?: boolean
    telefonoSecundario?: boolean
    direccion?: boolean
    activo?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactoEmergencia"]>

  export type ContactoEmergenciaSelectScalar = {
    id?: boolean
    pacienteId?: boolean
    nombres?: boolean
    apellidos?: boolean
    parentesco?: boolean
    telefonoPrincipal?: boolean
    telefonoSecundario?: boolean
    direccion?: boolean
    activo?: boolean
  }

  export type ContactoEmergenciaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "pacienteId" | "nombres" | "apellidos" | "parentesco" | "telefonoPrincipal" | "telefonoSecundario" | "direccion" | "activo", ExtArgs["result"]["contactoEmergencia"]>
  export type ContactoEmergenciaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }
  export type ContactoEmergenciaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }
  export type ContactoEmergenciaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }

  export type $ContactoEmergenciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactoEmergencia"
    objects: {
      paciente: Prisma.$PacientePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pacienteId: number
      nombres: string
      apellidos: string
      parentesco: string
      telefonoPrincipal: string
      telefonoSecundario: string | null
      direccion: string | null
      activo: boolean
    }, ExtArgs["result"]["contactoEmergencia"]>
    composites: {}
  }

  type ContactoEmergenciaGetPayload<S extends boolean | null | undefined | ContactoEmergenciaDefaultArgs> = $Result.GetResult<Prisma.$ContactoEmergenciaPayload, S>

  type ContactoEmergenciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactoEmergenciaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactoEmergenciaCountAggregateInputType | true
    }

  export interface ContactoEmergenciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactoEmergencia'], meta: { name: 'ContactoEmergencia' } }
    /**
     * Find zero or one ContactoEmergencia that matches the filter.
     * @param {ContactoEmergenciaFindUniqueArgs} args - Arguments to find a ContactoEmergencia
     * @example
     * // Get one ContactoEmergencia
     * const contactoEmergencia = await prisma.contactoEmergencia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactoEmergenciaFindUniqueArgs>(args: SelectSubset<T, ContactoEmergenciaFindUniqueArgs<ExtArgs>>): Prisma__ContactoEmergenciaClient<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactoEmergencia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactoEmergenciaFindUniqueOrThrowArgs} args - Arguments to find a ContactoEmergencia
     * @example
     * // Get one ContactoEmergencia
     * const contactoEmergencia = await prisma.contactoEmergencia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactoEmergenciaFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactoEmergenciaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactoEmergenciaClient<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactoEmergencia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactoEmergenciaFindFirstArgs} args - Arguments to find a ContactoEmergencia
     * @example
     * // Get one ContactoEmergencia
     * const contactoEmergencia = await prisma.contactoEmergencia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactoEmergenciaFindFirstArgs>(args?: SelectSubset<T, ContactoEmergenciaFindFirstArgs<ExtArgs>>): Prisma__ContactoEmergenciaClient<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactoEmergencia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactoEmergenciaFindFirstOrThrowArgs} args - Arguments to find a ContactoEmergencia
     * @example
     * // Get one ContactoEmergencia
     * const contactoEmergencia = await prisma.contactoEmergencia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactoEmergenciaFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactoEmergenciaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactoEmergenciaClient<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactoEmergencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactoEmergenciaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactoEmergencias
     * const contactoEmergencias = await prisma.contactoEmergencia.findMany()
     * 
     * // Get first 10 ContactoEmergencias
     * const contactoEmergencias = await prisma.contactoEmergencia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactoEmergenciaWithIdOnly = await prisma.contactoEmergencia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactoEmergenciaFindManyArgs>(args?: SelectSubset<T, ContactoEmergenciaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactoEmergencia.
     * @param {ContactoEmergenciaCreateArgs} args - Arguments to create a ContactoEmergencia.
     * @example
     * // Create one ContactoEmergencia
     * const ContactoEmergencia = await prisma.contactoEmergencia.create({
     *   data: {
     *     // ... data to create a ContactoEmergencia
     *   }
     * })
     * 
     */
    create<T extends ContactoEmergenciaCreateArgs>(args: SelectSubset<T, ContactoEmergenciaCreateArgs<ExtArgs>>): Prisma__ContactoEmergenciaClient<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactoEmergencias.
     * @param {ContactoEmergenciaCreateManyArgs} args - Arguments to create many ContactoEmergencias.
     * @example
     * // Create many ContactoEmergencias
     * const contactoEmergencia = await prisma.contactoEmergencia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactoEmergenciaCreateManyArgs>(args?: SelectSubset<T, ContactoEmergenciaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactoEmergencias and returns the data saved in the database.
     * @param {ContactoEmergenciaCreateManyAndReturnArgs} args - Arguments to create many ContactoEmergencias.
     * @example
     * // Create many ContactoEmergencias
     * const contactoEmergencia = await prisma.contactoEmergencia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactoEmergencias and only return the `id`
     * const contactoEmergenciaWithIdOnly = await prisma.contactoEmergencia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactoEmergenciaCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactoEmergenciaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactoEmergencia.
     * @param {ContactoEmergenciaDeleteArgs} args - Arguments to delete one ContactoEmergencia.
     * @example
     * // Delete one ContactoEmergencia
     * const ContactoEmergencia = await prisma.contactoEmergencia.delete({
     *   where: {
     *     // ... filter to delete one ContactoEmergencia
     *   }
     * })
     * 
     */
    delete<T extends ContactoEmergenciaDeleteArgs>(args: SelectSubset<T, ContactoEmergenciaDeleteArgs<ExtArgs>>): Prisma__ContactoEmergenciaClient<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactoEmergencia.
     * @param {ContactoEmergenciaUpdateArgs} args - Arguments to update one ContactoEmergencia.
     * @example
     * // Update one ContactoEmergencia
     * const contactoEmergencia = await prisma.contactoEmergencia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactoEmergenciaUpdateArgs>(args: SelectSubset<T, ContactoEmergenciaUpdateArgs<ExtArgs>>): Prisma__ContactoEmergenciaClient<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactoEmergencias.
     * @param {ContactoEmergenciaDeleteManyArgs} args - Arguments to filter ContactoEmergencias to delete.
     * @example
     * // Delete a few ContactoEmergencias
     * const { count } = await prisma.contactoEmergencia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactoEmergenciaDeleteManyArgs>(args?: SelectSubset<T, ContactoEmergenciaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactoEmergencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactoEmergenciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactoEmergencias
     * const contactoEmergencia = await prisma.contactoEmergencia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactoEmergenciaUpdateManyArgs>(args: SelectSubset<T, ContactoEmergenciaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactoEmergencias and returns the data updated in the database.
     * @param {ContactoEmergenciaUpdateManyAndReturnArgs} args - Arguments to update many ContactoEmergencias.
     * @example
     * // Update many ContactoEmergencias
     * const contactoEmergencia = await prisma.contactoEmergencia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactoEmergencias and only return the `id`
     * const contactoEmergenciaWithIdOnly = await prisma.contactoEmergencia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactoEmergenciaUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactoEmergenciaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactoEmergencia.
     * @param {ContactoEmergenciaUpsertArgs} args - Arguments to update or create a ContactoEmergencia.
     * @example
     * // Update or create a ContactoEmergencia
     * const contactoEmergencia = await prisma.contactoEmergencia.upsert({
     *   create: {
     *     // ... data to create a ContactoEmergencia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactoEmergencia we want to update
     *   }
     * })
     */
    upsert<T extends ContactoEmergenciaUpsertArgs>(args: SelectSubset<T, ContactoEmergenciaUpsertArgs<ExtArgs>>): Prisma__ContactoEmergenciaClient<$Result.GetResult<Prisma.$ContactoEmergenciaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactoEmergencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactoEmergenciaCountArgs} args - Arguments to filter ContactoEmergencias to count.
     * @example
     * // Count the number of ContactoEmergencias
     * const count = await prisma.contactoEmergencia.count({
     *   where: {
     *     // ... the filter for the ContactoEmergencias we want to count
     *   }
     * })
    **/
    count<T extends ContactoEmergenciaCountArgs>(
      args?: Subset<T, ContactoEmergenciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactoEmergenciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactoEmergencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactoEmergenciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactoEmergenciaAggregateArgs>(args: Subset<T, ContactoEmergenciaAggregateArgs>): Prisma.PrismaPromise<GetContactoEmergenciaAggregateType<T>>

    /**
     * Group by ContactoEmergencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactoEmergenciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactoEmergenciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactoEmergenciaGroupByArgs['orderBy'] }
        : { orderBy?: ContactoEmergenciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactoEmergenciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactoEmergenciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactoEmergencia model
   */
  readonly fields: ContactoEmergenciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactoEmergencia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactoEmergenciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    paciente<T extends PacienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PacienteDefaultArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactoEmergencia model
   */
  interface ContactoEmergenciaFieldRefs {
    readonly id: FieldRef<"ContactoEmergencia", 'Int'>
    readonly pacienteId: FieldRef<"ContactoEmergencia", 'Int'>
    readonly nombres: FieldRef<"ContactoEmergencia", 'String'>
    readonly apellidos: FieldRef<"ContactoEmergencia", 'String'>
    readonly parentesco: FieldRef<"ContactoEmergencia", 'String'>
    readonly telefonoPrincipal: FieldRef<"ContactoEmergencia", 'String'>
    readonly telefonoSecundario: FieldRef<"ContactoEmergencia", 'String'>
    readonly direccion: FieldRef<"ContactoEmergencia", 'String'>
    readonly activo: FieldRef<"ContactoEmergencia", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ContactoEmergencia findUnique
   */
  export type ContactoEmergenciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    /**
     * Filter, which ContactoEmergencia to fetch.
     */
    where: ContactoEmergenciaWhereUniqueInput
  }

  /**
   * ContactoEmergencia findUniqueOrThrow
   */
  export type ContactoEmergenciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    /**
     * Filter, which ContactoEmergencia to fetch.
     */
    where: ContactoEmergenciaWhereUniqueInput
  }

  /**
   * ContactoEmergencia findFirst
   */
  export type ContactoEmergenciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    /**
     * Filter, which ContactoEmergencia to fetch.
     */
    where?: ContactoEmergenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactoEmergencias to fetch.
     */
    orderBy?: ContactoEmergenciaOrderByWithRelationInput | ContactoEmergenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactoEmergencias.
     */
    cursor?: ContactoEmergenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactoEmergencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactoEmergencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactoEmergencias.
     */
    distinct?: ContactoEmergenciaScalarFieldEnum | ContactoEmergenciaScalarFieldEnum[]
  }

  /**
   * ContactoEmergencia findFirstOrThrow
   */
  export type ContactoEmergenciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    /**
     * Filter, which ContactoEmergencia to fetch.
     */
    where?: ContactoEmergenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactoEmergencias to fetch.
     */
    orderBy?: ContactoEmergenciaOrderByWithRelationInput | ContactoEmergenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactoEmergencias.
     */
    cursor?: ContactoEmergenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactoEmergencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactoEmergencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactoEmergencias.
     */
    distinct?: ContactoEmergenciaScalarFieldEnum | ContactoEmergenciaScalarFieldEnum[]
  }

  /**
   * ContactoEmergencia findMany
   */
  export type ContactoEmergenciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    /**
     * Filter, which ContactoEmergencias to fetch.
     */
    where?: ContactoEmergenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactoEmergencias to fetch.
     */
    orderBy?: ContactoEmergenciaOrderByWithRelationInput | ContactoEmergenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactoEmergencias.
     */
    cursor?: ContactoEmergenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactoEmergencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactoEmergencias.
     */
    skip?: number
    distinct?: ContactoEmergenciaScalarFieldEnum | ContactoEmergenciaScalarFieldEnum[]
  }

  /**
   * ContactoEmergencia create
   */
  export type ContactoEmergenciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    /**
     * The data needed to create a ContactoEmergencia.
     */
    data: XOR<ContactoEmergenciaCreateInput, ContactoEmergenciaUncheckedCreateInput>
  }

  /**
   * ContactoEmergencia createMany
   */
  export type ContactoEmergenciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactoEmergencias.
     */
    data: ContactoEmergenciaCreateManyInput | ContactoEmergenciaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactoEmergencia createManyAndReturn
   */
  export type ContactoEmergenciaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * The data used to create many ContactoEmergencias.
     */
    data: ContactoEmergenciaCreateManyInput | ContactoEmergenciaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactoEmergencia update
   */
  export type ContactoEmergenciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    /**
     * The data needed to update a ContactoEmergencia.
     */
    data: XOR<ContactoEmergenciaUpdateInput, ContactoEmergenciaUncheckedUpdateInput>
    /**
     * Choose, which ContactoEmergencia to update.
     */
    where: ContactoEmergenciaWhereUniqueInput
  }

  /**
   * ContactoEmergencia updateMany
   */
  export type ContactoEmergenciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactoEmergencias.
     */
    data: XOR<ContactoEmergenciaUpdateManyMutationInput, ContactoEmergenciaUncheckedUpdateManyInput>
    /**
     * Filter which ContactoEmergencias to update
     */
    where?: ContactoEmergenciaWhereInput
    /**
     * Limit how many ContactoEmergencias to update.
     */
    limit?: number
  }

  /**
   * ContactoEmergencia updateManyAndReturn
   */
  export type ContactoEmergenciaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * The data used to update ContactoEmergencias.
     */
    data: XOR<ContactoEmergenciaUpdateManyMutationInput, ContactoEmergenciaUncheckedUpdateManyInput>
    /**
     * Filter which ContactoEmergencias to update
     */
    where?: ContactoEmergenciaWhereInput
    /**
     * Limit how many ContactoEmergencias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactoEmergencia upsert
   */
  export type ContactoEmergenciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    /**
     * The filter to search for the ContactoEmergencia to update in case it exists.
     */
    where: ContactoEmergenciaWhereUniqueInput
    /**
     * In case the ContactoEmergencia found by the `where` argument doesn't exist, create a new ContactoEmergencia with this data.
     */
    create: XOR<ContactoEmergenciaCreateInput, ContactoEmergenciaUncheckedCreateInput>
    /**
     * In case the ContactoEmergencia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactoEmergenciaUpdateInput, ContactoEmergenciaUncheckedUpdateInput>
  }

  /**
   * ContactoEmergencia delete
   */
  export type ContactoEmergenciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
    /**
     * Filter which ContactoEmergencia to delete.
     */
    where: ContactoEmergenciaWhereUniqueInput
  }

  /**
   * ContactoEmergencia deleteMany
   */
  export type ContactoEmergenciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactoEmergencias to delete
     */
    where?: ContactoEmergenciaWhereInput
    /**
     * Limit how many ContactoEmergencias to delete.
     */
    limit?: number
  }

  /**
   * ContactoEmergencia without action
   */
  export type ContactoEmergenciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactoEmergencia
     */
    select?: ContactoEmergenciaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactoEmergencia
     */
    omit?: ContactoEmergenciaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactoEmergenciaInclude<ExtArgs> | null
  }


  /**
   * Model HistoriaClinica
   */

  export type AggregateHistoriaClinica = {
    _count: HistoriaClinicaCountAggregateOutputType | null
    _avg: HistoriaClinicaAvgAggregateOutputType | null
    _sum: HistoriaClinicaSumAggregateOutputType | null
    _min: HistoriaClinicaMinAggregateOutputType | null
    _max: HistoriaClinicaMaxAggregateOutputType | null
  }

  export type HistoriaClinicaAvgAggregateOutputType = {
    id: number | null
    pacienteId: number | null
  }

  export type HistoriaClinicaSumAggregateOutputType = {
    id: number | null
    pacienteId: number | null
  }

  export type HistoriaClinicaMinAggregateOutputType = {
    id: number | null
    pacienteId: number | null
    fechaApertura: Date | null
    estado: string | null
    observacionesGenerales: string | null
    ultimaActualizacion: Date | null
  }

  export type HistoriaClinicaMaxAggregateOutputType = {
    id: number | null
    pacienteId: number | null
    fechaApertura: Date | null
    estado: string | null
    observacionesGenerales: string | null
    ultimaActualizacion: Date | null
  }

  export type HistoriaClinicaCountAggregateOutputType = {
    id: number
    pacienteId: number
    fechaApertura: number
    estado: number
    observacionesGenerales: number
    ultimaActualizacion: number
    _all: number
  }


  export type HistoriaClinicaAvgAggregateInputType = {
    id?: true
    pacienteId?: true
  }

  export type HistoriaClinicaSumAggregateInputType = {
    id?: true
    pacienteId?: true
  }

  export type HistoriaClinicaMinAggregateInputType = {
    id?: true
    pacienteId?: true
    fechaApertura?: true
    estado?: true
    observacionesGenerales?: true
    ultimaActualizacion?: true
  }

  export type HistoriaClinicaMaxAggregateInputType = {
    id?: true
    pacienteId?: true
    fechaApertura?: true
    estado?: true
    observacionesGenerales?: true
    ultimaActualizacion?: true
  }

  export type HistoriaClinicaCountAggregateInputType = {
    id?: true
    pacienteId?: true
    fechaApertura?: true
    estado?: true
    observacionesGenerales?: true
    ultimaActualizacion?: true
    _all?: true
  }

  export type HistoriaClinicaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoriaClinica to aggregate.
     */
    where?: HistoriaClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoriaClinicas to fetch.
     */
    orderBy?: HistoriaClinicaOrderByWithRelationInput | HistoriaClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoriaClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoriaClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoriaClinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HistoriaClinicas
    **/
    _count?: true | HistoriaClinicaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoriaClinicaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistoriaClinicaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoriaClinicaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoriaClinicaMaxAggregateInputType
  }

  export type GetHistoriaClinicaAggregateType<T extends HistoriaClinicaAggregateArgs> = {
        [P in keyof T & keyof AggregateHistoriaClinica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistoriaClinica[P]>
      : GetScalarType<T[P], AggregateHistoriaClinica[P]>
  }




  export type HistoriaClinicaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoriaClinicaWhereInput
    orderBy?: HistoriaClinicaOrderByWithAggregationInput | HistoriaClinicaOrderByWithAggregationInput[]
    by: HistoriaClinicaScalarFieldEnum[] | HistoriaClinicaScalarFieldEnum
    having?: HistoriaClinicaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoriaClinicaCountAggregateInputType | true
    _avg?: HistoriaClinicaAvgAggregateInputType
    _sum?: HistoriaClinicaSumAggregateInputType
    _min?: HistoriaClinicaMinAggregateInputType
    _max?: HistoriaClinicaMaxAggregateInputType
  }

  export type HistoriaClinicaGroupByOutputType = {
    id: number
    pacienteId: number
    fechaApertura: Date
    estado: string
    observacionesGenerales: string | null
    ultimaActualizacion: Date
    _count: HistoriaClinicaCountAggregateOutputType | null
    _avg: HistoriaClinicaAvgAggregateOutputType | null
    _sum: HistoriaClinicaSumAggregateOutputType | null
    _min: HistoriaClinicaMinAggregateOutputType | null
    _max: HistoriaClinicaMaxAggregateOutputType | null
  }

  type GetHistoriaClinicaGroupByPayload<T extends HistoriaClinicaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoriaClinicaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoriaClinicaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoriaClinicaGroupByOutputType[P]>
            : GetScalarType<T[P], HistoriaClinicaGroupByOutputType[P]>
        }
      >
    >


  export type HistoriaClinicaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    fechaApertura?: boolean
    estado?: boolean
    observacionesGenerales?: boolean
    ultimaActualizacion?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    episodiosClinicos?: boolean | HistoriaClinica$episodiosClinicosArgs<ExtArgs>
    auditorias?: boolean | HistoriaClinica$auditoriasArgs<ExtArgs>
    _count?: boolean | HistoriaClinicaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historiaClinica"]>

  export type HistoriaClinicaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    fechaApertura?: boolean
    estado?: boolean
    observacionesGenerales?: boolean
    ultimaActualizacion?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historiaClinica"]>

  export type HistoriaClinicaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    fechaApertura?: boolean
    estado?: boolean
    observacionesGenerales?: boolean
    ultimaActualizacion?: boolean
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historiaClinica"]>

  export type HistoriaClinicaSelectScalar = {
    id?: boolean
    pacienteId?: boolean
    fechaApertura?: boolean
    estado?: boolean
    observacionesGenerales?: boolean
    ultimaActualizacion?: boolean
  }

  export type HistoriaClinicaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "pacienteId" | "fechaApertura" | "estado" | "observacionesGenerales" | "ultimaActualizacion", ExtArgs["result"]["historiaClinica"]>
  export type HistoriaClinicaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    episodiosClinicos?: boolean | HistoriaClinica$episodiosClinicosArgs<ExtArgs>
    auditorias?: boolean | HistoriaClinica$auditoriasArgs<ExtArgs>
    _count?: boolean | HistoriaClinicaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HistoriaClinicaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }
  export type HistoriaClinicaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
  }

  export type $HistoriaClinicaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HistoriaClinica"
    objects: {
      paciente: Prisma.$PacientePayload<ExtArgs>
      episodiosClinicos: Prisma.$EpisodioClincoPayload<ExtArgs>[]
      auditorias: Prisma.$AuditoriaHistoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pacienteId: number
      fechaApertura: Date
      estado: string
      observacionesGenerales: string | null
      ultimaActualizacion: Date
    }, ExtArgs["result"]["historiaClinica"]>
    composites: {}
  }

  type HistoriaClinicaGetPayload<S extends boolean | null | undefined | HistoriaClinicaDefaultArgs> = $Result.GetResult<Prisma.$HistoriaClinicaPayload, S>

  type HistoriaClinicaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HistoriaClinicaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HistoriaClinicaCountAggregateInputType | true
    }

  export interface HistoriaClinicaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HistoriaClinica'], meta: { name: 'HistoriaClinica' } }
    /**
     * Find zero or one HistoriaClinica that matches the filter.
     * @param {HistoriaClinicaFindUniqueArgs} args - Arguments to find a HistoriaClinica
     * @example
     * // Get one HistoriaClinica
     * const historiaClinica = await prisma.historiaClinica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistoriaClinicaFindUniqueArgs>(args: SelectSubset<T, HistoriaClinicaFindUniqueArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HistoriaClinica that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HistoriaClinicaFindUniqueOrThrowArgs} args - Arguments to find a HistoriaClinica
     * @example
     * // Get one HistoriaClinica
     * const historiaClinica = await prisma.historiaClinica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistoriaClinicaFindUniqueOrThrowArgs>(args: SelectSubset<T, HistoriaClinicaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistoriaClinica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriaClinicaFindFirstArgs} args - Arguments to find a HistoriaClinica
     * @example
     * // Get one HistoriaClinica
     * const historiaClinica = await prisma.historiaClinica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistoriaClinicaFindFirstArgs>(args?: SelectSubset<T, HistoriaClinicaFindFirstArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistoriaClinica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriaClinicaFindFirstOrThrowArgs} args - Arguments to find a HistoriaClinica
     * @example
     * // Get one HistoriaClinica
     * const historiaClinica = await prisma.historiaClinica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistoriaClinicaFindFirstOrThrowArgs>(args?: SelectSubset<T, HistoriaClinicaFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HistoriaClinicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriaClinicaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HistoriaClinicas
     * const historiaClinicas = await prisma.historiaClinica.findMany()
     * 
     * // Get first 10 HistoriaClinicas
     * const historiaClinicas = await prisma.historiaClinica.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historiaClinicaWithIdOnly = await prisma.historiaClinica.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistoriaClinicaFindManyArgs>(args?: SelectSubset<T, HistoriaClinicaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HistoriaClinica.
     * @param {HistoriaClinicaCreateArgs} args - Arguments to create a HistoriaClinica.
     * @example
     * // Create one HistoriaClinica
     * const HistoriaClinica = await prisma.historiaClinica.create({
     *   data: {
     *     // ... data to create a HistoriaClinica
     *   }
     * })
     * 
     */
    create<T extends HistoriaClinicaCreateArgs>(args: SelectSubset<T, HistoriaClinicaCreateArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HistoriaClinicas.
     * @param {HistoriaClinicaCreateManyArgs} args - Arguments to create many HistoriaClinicas.
     * @example
     * // Create many HistoriaClinicas
     * const historiaClinica = await prisma.historiaClinica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistoriaClinicaCreateManyArgs>(args?: SelectSubset<T, HistoriaClinicaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HistoriaClinicas and returns the data saved in the database.
     * @param {HistoriaClinicaCreateManyAndReturnArgs} args - Arguments to create many HistoriaClinicas.
     * @example
     * // Create many HistoriaClinicas
     * const historiaClinica = await prisma.historiaClinica.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HistoriaClinicas and only return the `id`
     * const historiaClinicaWithIdOnly = await prisma.historiaClinica.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HistoriaClinicaCreateManyAndReturnArgs>(args?: SelectSubset<T, HistoriaClinicaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HistoriaClinica.
     * @param {HistoriaClinicaDeleteArgs} args - Arguments to delete one HistoriaClinica.
     * @example
     * // Delete one HistoriaClinica
     * const HistoriaClinica = await prisma.historiaClinica.delete({
     *   where: {
     *     // ... filter to delete one HistoriaClinica
     *   }
     * })
     * 
     */
    delete<T extends HistoriaClinicaDeleteArgs>(args: SelectSubset<T, HistoriaClinicaDeleteArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HistoriaClinica.
     * @param {HistoriaClinicaUpdateArgs} args - Arguments to update one HistoriaClinica.
     * @example
     * // Update one HistoriaClinica
     * const historiaClinica = await prisma.historiaClinica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistoriaClinicaUpdateArgs>(args: SelectSubset<T, HistoriaClinicaUpdateArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HistoriaClinicas.
     * @param {HistoriaClinicaDeleteManyArgs} args - Arguments to filter HistoriaClinicas to delete.
     * @example
     * // Delete a few HistoriaClinicas
     * const { count } = await prisma.historiaClinica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistoriaClinicaDeleteManyArgs>(args?: SelectSubset<T, HistoriaClinicaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistoriaClinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriaClinicaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HistoriaClinicas
     * const historiaClinica = await prisma.historiaClinica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistoriaClinicaUpdateManyArgs>(args: SelectSubset<T, HistoriaClinicaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistoriaClinicas and returns the data updated in the database.
     * @param {HistoriaClinicaUpdateManyAndReturnArgs} args - Arguments to update many HistoriaClinicas.
     * @example
     * // Update many HistoriaClinicas
     * const historiaClinica = await prisma.historiaClinica.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HistoriaClinicas and only return the `id`
     * const historiaClinicaWithIdOnly = await prisma.historiaClinica.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HistoriaClinicaUpdateManyAndReturnArgs>(args: SelectSubset<T, HistoriaClinicaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HistoriaClinica.
     * @param {HistoriaClinicaUpsertArgs} args - Arguments to update or create a HistoriaClinica.
     * @example
     * // Update or create a HistoriaClinica
     * const historiaClinica = await prisma.historiaClinica.upsert({
     *   create: {
     *     // ... data to create a HistoriaClinica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HistoriaClinica we want to update
     *   }
     * })
     */
    upsert<T extends HistoriaClinicaUpsertArgs>(args: SelectSubset<T, HistoriaClinicaUpsertArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HistoriaClinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriaClinicaCountArgs} args - Arguments to filter HistoriaClinicas to count.
     * @example
     * // Count the number of HistoriaClinicas
     * const count = await prisma.historiaClinica.count({
     *   where: {
     *     // ... the filter for the HistoriaClinicas we want to count
     *   }
     * })
    **/
    count<T extends HistoriaClinicaCountArgs>(
      args?: Subset<T, HistoriaClinicaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoriaClinicaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HistoriaClinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriaClinicaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoriaClinicaAggregateArgs>(args: Subset<T, HistoriaClinicaAggregateArgs>): Prisma.PrismaPromise<GetHistoriaClinicaAggregateType<T>>

    /**
     * Group by HistoriaClinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriaClinicaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoriaClinicaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoriaClinicaGroupByArgs['orderBy'] }
        : { orderBy?: HistoriaClinicaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoriaClinicaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoriaClinicaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HistoriaClinica model
   */
  readonly fields: HistoriaClinicaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HistoriaClinica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoriaClinicaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    paciente<T extends PacienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PacienteDefaultArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    episodiosClinicos<T extends HistoriaClinica$episodiosClinicosArgs<ExtArgs> = {}>(args?: Subset<T, HistoriaClinica$episodiosClinicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditorias<T extends HistoriaClinica$auditoriasArgs<ExtArgs> = {}>(args?: Subset<T, HistoriaClinica$auditoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HistoriaClinica model
   */
  interface HistoriaClinicaFieldRefs {
    readonly id: FieldRef<"HistoriaClinica", 'Int'>
    readonly pacienteId: FieldRef<"HistoriaClinica", 'Int'>
    readonly fechaApertura: FieldRef<"HistoriaClinica", 'DateTime'>
    readonly estado: FieldRef<"HistoriaClinica", 'String'>
    readonly observacionesGenerales: FieldRef<"HistoriaClinica", 'String'>
    readonly ultimaActualizacion: FieldRef<"HistoriaClinica", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HistoriaClinica findUnique
   */
  export type HistoriaClinicaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which HistoriaClinica to fetch.
     */
    where: HistoriaClinicaWhereUniqueInput
  }

  /**
   * HistoriaClinica findUniqueOrThrow
   */
  export type HistoriaClinicaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which HistoriaClinica to fetch.
     */
    where: HistoriaClinicaWhereUniqueInput
  }

  /**
   * HistoriaClinica findFirst
   */
  export type HistoriaClinicaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which HistoriaClinica to fetch.
     */
    where?: HistoriaClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoriaClinicas to fetch.
     */
    orderBy?: HistoriaClinicaOrderByWithRelationInput | HistoriaClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoriaClinicas.
     */
    cursor?: HistoriaClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoriaClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoriaClinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoriaClinicas.
     */
    distinct?: HistoriaClinicaScalarFieldEnum | HistoriaClinicaScalarFieldEnum[]
  }

  /**
   * HistoriaClinica findFirstOrThrow
   */
  export type HistoriaClinicaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which HistoriaClinica to fetch.
     */
    where?: HistoriaClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoriaClinicas to fetch.
     */
    orderBy?: HistoriaClinicaOrderByWithRelationInput | HistoriaClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoriaClinicas.
     */
    cursor?: HistoriaClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoriaClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoriaClinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoriaClinicas.
     */
    distinct?: HistoriaClinicaScalarFieldEnum | HistoriaClinicaScalarFieldEnum[]
  }

  /**
   * HistoriaClinica findMany
   */
  export type HistoriaClinicaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which HistoriaClinicas to fetch.
     */
    where?: HistoriaClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoriaClinicas to fetch.
     */
    orderBy?: HistoriaClinicaOrderByWithRelationInput | HistoriaClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HistoriaClinicas.
     */
    cursor?: HistoriaClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoriaClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoriaClinicas.
     */
    skip?: number
    distinct?: HistoriaClinicaScalarFieldEnum | HistoriaClinicaScalarFieldEnum[]
  }

  /**
   * HistoriaClinica create
   */
  export type HistoriaClinicaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    /**
     * The data needed to create a HistoriaClinica.
     */
    data: XOR<HistoriaClinicaCreateInput, HistoriaClinicaUncheckedCreateInput>
  }

  /**
   * HistoriaClinica createMany
   */
  export type HistoriaClinicaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HistoriaClinicas.
     */
    data: HistoriaClinicaCreateManyInput | HistoriaClinicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HistoriaClinica createManyAndReturn
   */
  export type HistoriaClinicaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * The data used to create many HistoriaClinicas.
     */
    data: HistoriaClinicaCreateManyInput | HistoriaClinicaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HistoriaClinica update
   */
  export type HistoriaClinicaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    /**
     * The data needed to update a HistoriaClinica.
     */
    data: XOR<HistoriaClinicaUpdateInput, HistoriaClinicaUncheckedUpdateInput>
    /**
     * Choose, which HistoriaClinica to update.
     */
    where: HistoriaClinicaWhereUniqueInput
  }

  /**
   * HistoriaClinica updateMany
   */
  export type HistoriaClinicaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HistoriaClinicas.
     */
    data: XOR<HistoriaClinicaUpdateManyMutationInput, HistoriaClinicaUncheckedUpdateManyInput>
    /**
     * Filter which HistoriaClinicas to update
     */
    where?: HistoriaClinicaWhereInput
    /**
     * Limit how many HistoriaClinicas to update.
     */
    limit?: number
  }

  /**
   * HistoriaClinica updateManyAndReturn
   */
  export type HistoriaClinicaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * The data used to update HistoriaClinicas.
     */
    data: XOR<HistoriaClinicaUpdateManyMutationInput, HistoriaClinicaUncheckedUpdateManyInput>
    /**
     * Filter which HistoriaClinicas to update
     */
    where?: HistoriaClinicaWhereInput
    /**
     * Limit how many HistoriaClinicas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HistoriaClinica upsert
   */
  export type HistoriaClinicaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    /**
     * The filter to search for the HistoriaClinica to update in case it exists.
     */
    where: HistoriaClinicaWhereUniqueInput
    /**
     * In case the HistoriaClinica found by the `where` argument doesn't exist, create a new HistoriaClinica with this data.
     */
    create: XOR<HistoriaClinicaCreateInput, HistoriaClinicaUncheckedCreateInput>
    /**
     * In case the HistoriaClinica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoriaClinicaUpdateInput, HistoriaClinicaUncheckedUpdateInput>
  }

  /**
   * HistoriaClinica delete
   */
  export type HistoriaClinicaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    /**
     * Filter which HistoriaClinica to delete.
     */
    where: HistoriaClinicaWhereUniqueInput
  }

  /**
   * HistoriaClinica deleteMany
   */
  export type HistoriaClinicaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoriaClinicas to delete
     */
    where?: HistoriaClinicaWhereInput
    /**
     * Limit how many HistoriaClinicas to delete.
     */
    limit?: number
  }

  /**
   * HistoriaClinica.episodiosClinicos
   */
  export type HistoriaClinica$episodiosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    where?: EpisodioClincoWhereInput
    orderBy?: EpisodioClincoOrderByWithRelationInput | EpisodioClincoOrderByWithRelationInput[]
    cursor?: EpisodioClincoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodioClincoScalarFieldEnum | EpisodioClincoScalarFieldEnum[]
  }

  /**
   * HistoriaClinica.auditorias
   */
  export type HistoriaClinica$auditoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    where?: AuditoriaHistoriaWhereInput
    orderBy?: AuditoriaHistoriaOrderByWithRelationInput | AuditoriaHistoriaOrderByWithRelationInput[]
    cursor?: AuditoriaHistoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditoriaHistoriaScalarFieldEnum | AuditoriaHistoriaScalarFieldEnum[]
  }

  /**
   * HistoriaClinica without action
   */
  export type HistoriaClinicaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
  }


  /**
   * Model EpisodioClinco
   */

  export type AggregateEpisodioClinco = {
    _count: EpisodioClincoCountAggregateOutputType | null
    _avg: EpisodioClincoAvgAggregateOutputType | null
    _sum: EpisodioClincoSumAggregateOutputType | null
    _min: EpisodioClincoMinAggregateOutputType | null
    _max: EpisodioClincoMaxAggregateOutputType | null
  }

  export type EpisodioClincoAvgAggregateOutputType = {
    id: number | null
    historiaClinicaId: number | null
    especialidadId: number | null
    medicoId: number | null
    enfermeraId: number | null
    consultorioId: number | null
  }

  export type EpisodioClincoSumAggregateOutputType = {
    id: number | null
    historiaClinicaId: number | null
    especialidadId: number | null
    medicoId: number | null
    enfermeraId: number | null
    consultorioId: number | null
  }

  export type EpisodioClincoMinAggregateOutputType = {
    id: number | null
    historiaClinicaId: number | null
    especialidadId: number | null
    medicoId: number | null
    enfermeraId: number | null
    consultorioId: number | null
    fechaEpisodio: Date | null
    motivoConsulta: string | null
    sintomas: string | null
    tratamiento: string | null
    observaciones: string | null
  }

  export type EpisodioClincoMaxAggregateOutputType = {
    id: number | null
    historiaClinicaId: number | null
    especialidadId: number | null
    medicoId: number | null
    enfermeraId: number | null
    consultorioId: number | null
    fechaEpisodio: Date | null
    motivoConsulta: string | null
    sintomas: string | null
    tratamiento: string | null
    observaciones: string | null
  }

  export type EpisodioClincoCountAggregateOutputType = {
    id: number
    historiaClinicaId: number
    especialidadId: number
    medicoId: number
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: number
    motivoConsulta: number
    sintomas: number
    tratamiento: number
    observaciones: number
    _all: number
  }


  export type EpisodioClincoAvgAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    especialidadId?: true
    medicoId?: true
    enfermeraId?: true
    consultorioId?: true
  }

  export type EpisodioClincoSumAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    especialidadId?: true
    medicoId?: true
    enfermeraId?: true
    consultorioId?: true
  }

  export type EpisodioClincoMinAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    especialidadId?: true
    medicoId?: true
    enfermeraId?: true
    consultorioId?: true
    fechaEpisodio?: true
    motivoConsulta?: true
    sintomas?: true
    tratamiento?: true
    observaciones?: true
  }

  export type EpisodioClincoMaxAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    especialidadId?: true
    medicoId?: true
    enfermeraId?: true
    consultorioId?: true
    fechaEpisodio?: true
    motivoConsulta?: true
    sintomas?: true
    tratamiento?: true
    observaciones?: true
  }

  export type EpisodioClincoCountAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    especialidadId?: true
    medicoId?: true
    enfermeraId?: true
    consultorioId?: true
    fechaEpisodio?: true
    motivoConsulta?: true
    sintomas?: true
    tratamiento?: true
    observaciones?: true
    _all?: true
  }

  export type EpisodioClincoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EpisodioClinco to aggregate.
     */
    where?: EpisodioClincoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EpisodioClincos to fetch.
     */
    orderBy?: EpisodioClincoOrderByWithRelationInput | EpisodioClincoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EpisodioClincoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EpisodioClincos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EpisodioClincos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EpisodioClincos
    **/
    _count?: true | EpisodioClincoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EpisodioClincoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EpisodioClincoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EpisodioClincoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EpisodioClincoMaxAggregateInputType
  }

  export type GetEpisodioClincoAggregateType<T extends EpisodioClincoAggregateArgs> = {
        [P in keyof T & keyof AggregateEpisodioClinco]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEpisodioClinco[P]>
      : GetScalarType<T[P], AggregateEpisodioClinco[P]>
  }




  export type EpisodioClincoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodioClincoWhereInput
    orderBy?: EpisodioClincoOrderByWithAggregationInput | EpisodioClincoOrderByWithAggregationInput[]
    by: EpisodioClincoScalarFieldEnum[] | EpisodioClincoScalarFieldEnum
    having?: EpisodioClincoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EpisodioClincoCountAggregateInputType | true
    _avg?: EpisodioClincoAvgAggregateInputType
    _sum?: EpisodioClincoSumAggregateInputType
    _min?: EpisodioClincoMinAggregateInputType
    _max?: EpisodioClincoMaxAggregateInputType
  }

  export type EpisodioClincoGroupByOutputType = {
    id: number
    historiaClinicaId: number
    especialidadId: number
    medicoId: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date
    motivoConsulta: string
    sintomas: string | null
    tratamiento: string | null
    observaciones: string | null
    _count: EpisodioClincoCountAggregateOutputType | null
    _avg: EpisodioClincoAvgAggregateOutputType | null
    _sum: EpisodioClincoSumAggregateOutputType | null
    _min: EpisodioClincoMinAggregateOutputType | null
    _max: EpisodioClincoMaxAggregateOutputType | null
  }

  type GetEpisodioClincoGroupByPayload<T extends EpisodioClincoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EpisodioClincoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EpisodioClincoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EpisodioClincoGroupByOutputType[P]>
            : GetScalarType<T[P], EpisodioClincoGroupByOutputType[P]>
        }
      >
    >


  export type EpisodioClincoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historiaClinicaId?: boolean
    especialidadId?: boolean
    medicoId?: boolean
    enfermeraId?: boolean
    consultorioId?: boolean
    fechaEpisodio?: boolean
    motivoConsulta?: boolean
    sintomas?: boolean
    tratamiento?: boolean
    observaciones?: boolean
    historiaClinica?: boolean | HistoriaClinicaDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
    medico?: boolean | EpisodioClinco$medicoArgs<ExtArgs>
    enfermera?: boolean | EnfermeraDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    signosVitales?: boolean | EpisodioClinco$signosVitalesArgs<ExtArgs>
    diagnosticos?: boolean | EpisodioClinco$diagnosticosArgs<ExtArgs>
    prescripciones?: boolean | EpisodioClinco$prescripcionesArgs<ExtArgs>
    documentosClinicos?: boolean | EpisodioClinco$documentosClinicosArgs<ExtArgs>
    consentimientos?: boolean | EpisodioClinco$consentimientosArgs<ExtArgs>
    odontologiaDetalle?: boolean | EpisodioClinco$odontologiaDetalleArgs<ExtArgs>
    oftalmologiaDetalle?: boolean | EpisodioClinco$oftalmologiaDetalleArgs<ExtArgs>
    psicologiaDetalle?: boolean | EpisodioClinco$psicologiaDetalleArgs<ExtArgs>
    trabajoSocialDetalle?: boolean | EpisodioClinco$trabajoSocialDetalleArgs<ExtArgs>
    auditorias?: boolean | EpisodioClinco$auditoriasArgs<ExtArgs>
    _count?: boolean | EpisodioClincoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["episodioClinco"]>

  export type EpisodioClincoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historiaClinicaId?: boolean
    especialidadId?: boolean
    medicoId?: boolean
    enfermeraId?: boolean
    consultorioId?: boolean
    fechaEpisodio?: boolean
    motivoConsulta?: boolean
    sintomas?: boolean
    tratamiento?: boolean
    observaciones?: boolean
    historiaClinica?: boolean | HistoriaClinicaDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
    medico?: boolean | EpisodioClinco$medicoArgs<ExtArgs>
    enfermera?: boolean | EnfermeraDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["episodioClinco"]>

  export type EpisodioClincoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historiaClinicaId?: boolean
    especialidadId?: boolean
    medicoId?: boolean
    enfermeraId?: boolean
    consultorioId?: boolean
    fechaEpisodio?: boolean
    motivoConsulta?: boolean
    sintomas?: boolean
    tratamiento?: boolean
    observaciones?: boolean
    historiaClinica?: boolean | HistoriaClinicaDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
    medico?: boolean | EpisodioClinco$medicoArgs<ExtArgs>
    enfermera?: boolean | EnfermeraDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["episodioClinco"]>

  export type EpisodioClincoSelectScalar = {
    id?: boolean
    historiaClinicaId?: boolean
    especialidadId?: boolean
    medicoId?: boolean
    enfermeraId?: boolean
    consultorioId?: boolean
    fechaEpisodio?: boolean
    motivoConsulta?: boolean
    sintomas?: boolean
    tratamiento?: boolean
    observaciones?: boolean
  }

  export type EpisodioClincoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "historiaClinicaId" | "especialidadId" | "medicoId" | "enfermeraId" | "consultorioId" | "fechaEpisodio" | "motivoConsulta" | "sintomas" | "tratamiento" | "observaciones", ExtArgs["result"]["episodioClinco"]>
  export type EpisodioClincoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historiaClinica?: boolean | HistoriaClinicaDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
    medico?: boolean | EpisodioClinco$medicoArgs<ExtArgs>
    enfermera?: boolean | EnfermeraDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    signosVitales?: boolean | EpisodioClinco$signosVitalesArgs<ExtArgs>
    diagnosticos?: boolean | EpisodioClinco$diagnosticosArgs<ExtArgs>
    prescripciones?: boolean | EpisodioClinco$prescripcionesArgs<ExtArgs>
    documentosClinicos?: boolean | EpisodioClinco$documentosClinicosArgs<ExtArgs>
    consentimientos?: boolean | EpisodioClinco$consentimientosArgs<ExtArgs>
    odontologiaDetalle?: boolean | EpisodioClinco$odontologiaDetalleArgs<ExtArgs>
    oftalmologiaDetalle?: boolean | EpisodioClinco$oftalmologiaDetalleArgs<ExtArgs>
    psicologiaDetalle?: boolean | EpisodioClinco$psicologiaDetalleArgs<ExtArgs>
    trabajoSocialDetalle?: boolean | EpisodioClinco$trabajoSocialDetalleArgs<ExtArgs>
    auditorias?: boolean | EpisodioClinco$auditoriasArgs<ExtArgs>
    _count?: boolean | EpisodioClincoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EpisodioClincoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historiaClinica?: boolean | HistoriaClinicaDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
    medico?: boolean | EpisodioClinco$medicoArgs<ExtArgs>
    enfermera?: boolean | EnfermeraDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }
  export type EpisodioClincoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historiaClinica?: boolean | HistoriaClinicaDefaultArgs<ExtArgs>
    especialidad?: boolean | EspecialidadDefaultArgs<ExtArgs>
    medico?: boolean | EpisodioClinco$medicoArgs<ExtArgs>
    enfermera?: boolean | EnfermeraDefaultArgs<ExtArgs>
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
  }

  export type $EpisodioClincoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EpisodioClinco"
    objects: {
      historiaClinica: Prisma.$HistoriaClinicaPayload<ExtArgs>
      especialidad: Prisma.$EspecialidadPayload<ExtArgs>
      medico: Prisma.$MedicoPayload<ExtArgs> | null
      enfermera: Prisma.$EnfermeraPayload<ExtArgs>
      consultorio: Prisma.$ConsultorioPayload<ExtArgs>
      signosVitales: Prisma.$SignosVitalesPayload<ExtArgs>[]
      diagnosticos: Prisma.$DiagnosticoPayload<ExtArgs>[]
      prescripciones: Prisma.$PrescripcionPayload<ExtArgs>[]
      documentosClinicos: Prisma.$DocumentoClinicoPayload<ExtArgs>[]
      consentimientos: Prisma.$ConsentimientoInformadoPayload<ExtArgs>[]
      odontologiaDetalle: Prisma.$OdontologiaDetallePayload<ExtArgs> | null
      oftalmologiaDetalle: Prisma.$OftalmologiaDetallePayload<ExtArgs> | null
      psicologiaDetalle: Prisma.$PsicologiaDetallePayload<ExtArgs> | null
      trabajoSocialDetalle: Prisma.$TrabajoSocialDetallePayload<ExtArgs> | null
      auditorias: Prisma.$AuditoriaHistoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      historiaClinicaId: number
      especialidadId: number
      medicoId: number | null
      enfermeraId: number
      consultorioId: number
      fechaEpisodio: Date
      motivoConsulta: string
      sintomas: string | null
      tratamiento: string | null
      observaciones: string | null
    }, ExtArgs["result"]["episodioClinco"]>
    composites: {}
  }

  type EpisodioClincoGetPayload<S extends boolean | null | undefined | EpisodioClincoDefaultArgs> = $Result.GetResult<Prisma.$EpisodioClincoPayload, S>

  type EpisodioClincoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EpisodioClincoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EpisodioClincoCountAggregateInputType | true
    }

  export interface EpisodioClincoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EpisodioClinco'], meta: { name: 'EpisodioClinco' } }
    /**
     * Find zero or one EpisodioClinco that matches the filter.
     * @param {EpisodioClincoFindUniqueArgs} args - Arguments to find a EpisodioClinco
     * @example
     * // Get one EpisodioClinco
     * const episodioClinco = await prisma.episodioClinco.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EpisodioClincoFindUniqueArgs>(args: SelectSubset<T, EpisodioClincoFindUniqueArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EpisodioClinco that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EpisodioClincoFindUniqueOrThrowArgs} args - Arguments to find a EpisodioClinco
     * @example
     * // Get one EpisodioClinco
     * const episodioClinco = await prisma.episodioClinco.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EpisodioClincoFindUniqueOrThrowArgs>(args: SelectSubset<T, EpisodioClincoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EpisodioClinco that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodioClincoFindFirstArgs} args - Arguments to find a EpisodioClinco
     * @example
     * // Get one EpisodioClinco
     * const episodioClinco = await prisma.episodioClinco.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EpisodioClincoFindFirstArgs>(args?: SelectSubset<T, EpisodioClincoFindFirstArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EpisodioClinco that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodioClincoFindFirstOrThrowArgs} args - Arguments to find a EpisodioClinco
     * @example
     * // Get one EpisodioClinco
     * const episodioClinco = await prisma.episodioClinco.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EpisodioClincoFindFirstOrThrowArgs>(args?: SelectSubset<T, EpisodioClincoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EpisodioClincos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodioClincoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EpisodioClincos
     * const episodioClincos = await prisma.episodioClinco.findMany()
     * 
     * // Get first 10 EpisodioClincos
     * const episodioClincos = await prisma.episodioClinco.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const episodioClincoWithIdOnly = await prisma.episodioClinco.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EpisodioClincoFindManyArgs>(args?: SelectSubset<T, EpisodioClincoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EpisodioClinco.
     * @param {EpisodioClincoCreateArgs} args - Arguments to create a EpisodioClinco.
     * @example
     * // Create one EpisodioClinco
     * const EpisodioClinco = await prisma.episodioClinco.create({
     *   data: {
     *     // ... data to create a EpisodioClinco
     *   }
     * })
     * 
     */
    create<T extends EpisodioClincoCreateArgs>(args: SelectSubset<T, EpisodioClincoCreateArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EpisodioClincos.
     * @param {EpisodioClincoCreateManyArgs} args - Arguments to create many EpisodioClincos.
     * @example
     * // Create many EpisodioClincos
     * const episodioClinco = await prisma.episodioClinco.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EpisodioClincoCreateManyArgs>(args?: SelectSubset<T, EpisodioClincoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EpisodioClincos and returns the data saved in the database.
     * @param {EpisodioClincoCreateManyAndReturnArgs} args - Arguments to create many EpisodioClincos.
     * @example
     * // Create many EpisodioClincos
     * const episodioClinco = await prisma.episodioClinco.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EpisodioClincos and only return the `id`
     * const episodioClincoWithIdOnly = await prisma.episodioClinco.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EpisodioClincoCreateManyAndReturnArgs>(args?: SelectSubset<T, EpisodioClincoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EpisodioClinco.
     * @param {EpisodioClincoDeleteArgs} args - Arguments to delete one EpisodioClinco.
     * @example
     * // Delete one EpisodioClinco
     * const EpisodioClinco = await prisma.episodioClinco.delete({
     *   where: {
     *     // ... filter to delete one EpisodioClinco
     *   }
     * })
     * 
     */
    delete<T extends EpisodioClincoDeleteArgs>(args: SelectSubset<T, EpisodioClincoDeleteArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EpisodioClinco.
     * @param {EpisodioClincoUpdateArgs} args - Arguments to update one EpisodioClinco.
     * @example
     * // Update one EpisodioClinco
     * const episodioClinco = await prisma.episodioClinco.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EpisodioClincoUpdateArgs>(args: SelectSubset<T, EpisodioClincoUpdateArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EpisodioClincos.
     * @param {EpisodioClincoDeleteManyArgs} args - Arguments to filter EpisodioClincos to delete.
     * @example
     * // Delete a few EpisodioClincos
     * const { count } = await prisma.episodioClinco.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EpisodioClincoDeleteManyArgs>(args?: SelectSubset<T, EpisodioClincoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EpisodioClincos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodioClincoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EpisodioClincos
     * const episodioClinco = await prisma.episodioClinco.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EpisodioClincoUpdateManyArgs>(args: SelectSubset<T, EpisodioClincoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EpisodioClincos and returns the data updated in the database.
     * @param {EpisodioClincoUpdateManyAndReturnArgs} args - Arguments to update many EpisodioClincos.
     * @example
     * // Update many EpisodioClincos
     * const episodioClinco = await prisma.episodioClinco.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EpisodioClincos and only return the `id`
     * const episodioClincoWithIdOnly = await prisma.episodioClinco.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EpisodioClincoUpdateManyAndReturnArgs>(args: SelectSubset<T, EpisodioClincoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EpisodioClinco.
     * @param {EpisodioClincoUpsertArgs} args - Arguments to update or create a EpisodioClinco.
     * @example
     * // Update or create a EpisodioClinco
     * const episodioClinco = await prisma.episodioClinco.upsert({
     *   create: {
     *     // ... data to create a EpisodioClinco
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EpisodioClinco we want to update
     *   }
     * })
     */
    upsert<T extends EpisodioClincoUpsertArgs>(args: SelectSubset<T, EpisodioClincoUpsertArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EpisodioClincos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodioClincoCountArgs} args - Arguments to filter EpisodioClincos to count.
     * @example
     * // Count the number of EpisodioClincos
     * const count = await prisma.episodioClinco.count({
     *   where: {
     *     // ... the filter for the EpisodioClincos we want to count
     *   }
     * })
    **/
    count<T extends EpisodioClincoCountArgs>(
      args?: Subset<T, EpisodioClincoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EpisodioClincoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EpisodioClinco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodioClincoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EpisodioClincoAggregateArgs>(args: Subset<T, EpisodioClincoAggregateArgs>): Prisma.PrismaPromise<GetEpisodioClincoAggregateType<T>>

    /**
     * Group by EpisodioClinco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodioClincoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EpisodioClincoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EpisodioClincoGroupByArgs['orderBy'] }
        : { orderBy?: EpisodioClincoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EpisodioClincoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpisodioClincoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EpisodioClinco model
   */
  readonly fields: EpisodioClincoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EpisodioClinco.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EpisodioClincoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    historiaClinica<T extends HistoriaClinicaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HistoriaClinicaDefaultArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    especialidad<T extends EspecialidadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EspecialidadDefaultArgs<ExtArgs>>): Prisma__EspecialidadClient<$Result.GetResult<Prisma.$EspecialidadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    medico<T extends EpisodioClinco$medicoArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$medicoArgs<ExtArgs>>): Prisma__MedicoClient<$Result.GetResult<Prisma.$MedicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    enfermera<T extends EnfermeraDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EnfermeraDefaultArgs<ExtArgs>>): Prisma__EnfermeraClient<$Result.GetResult<Prisma.$EnfermeraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    consultorio<T extends ConsultorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultorioDefaultArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    signosVitales<T extends EpisodioClinco$signosVitalesArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$signosVitalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    diagnosticos<T extends EpisodioClinco$diagnosticosArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$diagnosticosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    prescripciones<T extends EpisodioClinco$prescripcionesArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$prescripcionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documentosClinicos<T extends EpisodioClinco$documentosClinicosArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$documentosClinicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consentimientos<T extends EpisodioClinco$consentimientosArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$consentimientosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    odontologiaDetalle<T extends EpisodioClinco$odontologiaDetalleArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$odontologiaDetalleArgs<ExtArgs>>): Prisma__OdontologiaDetalleClient<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    oftalmologiaDetalle<T extends EpisodioClinco$oftalmologiaDetalleArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$oftalmologiaDetalleArgs<ExtArgs>>): Prisma__OftalmologiaDetalleClient<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    psicologiaDetalle<T extends EpisodioClinco$psicologiaDetalleArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$psicologiaDetalleArgs<ExtArgs>>): Prisma__PsicologiaDetalleClient<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    trabajoSocialDetalle<T extends EpisodioClinco$trabajoSocialDetalleArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$trabajoSocialDetalleArgs<ExtArgs>>): Prisma__TrabajoSocialDetalleClient<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    auditorias<T extends EpisodioClinco$auditoriasArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClinco$auditoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EpisodioClinco model
   */
  interface EpisodioClincoFieldRefs {
    readonly id: FieldRef<"EpisodioClinco", 'Int'>
    readonly historiaClinicaId: FieldRef<"EpisodioClinco", 'Int'>
    readonly especialidadId: FieldRef<"EpisodioClinco", 'Int'>
    readonly medicoId: FieldRef<"EpisodioClinco", 'Int'>
    readonly enfermeraId: FieldRef<"EpisodioClinco", 'Int'>
    readonly consultorioId: FieldRef<"EpisodioClinco", 'Int'>
    readonly fechaEpisodio: FieldRef<"EpisodioClinco", 'DateTime'>
    readonly motivoConsulta: FieldRef<"EpisodioClinco", 'String'>
    readonly sintomas: FieldRef<"EpisodioClinco", 'String'>
    readonly tratamiento: FieldRef<"EpisodioClinco", 'String'>
    readonly observaciones: FieldRef<"EpisodioClinco", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EpisodioClinco findUnique
   */
  export type EpisodioClincoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    /**
     * Filter, which EpisodioClinco to fetch.
     */
    where: EpisodioClincoWhereUniqueInput
  }

  /**
   * EpisodioClinco findUniqueOrThrow
   */
  export type EpisodioClincoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    /**
     * Filter, which EpisodioClinco to fetch.
     */
    where: EpisodioClincoWhereUniqueInput
  }

  /**
   * EpisodioClinco findFirst
   */
  export type EpisodioClincoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    /**
     * Filter, which EpisodioClinco to fetch.
     */
    where?: EpisodioClincoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EpisodioClincos to fetch.
     */
    orderBy?: EpisodioClincoOrderByWithRelationInput | EpisodioClincoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EpisodioClincos.
     */
    cursor?: EpisodioClincoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EpisodioClincos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EpisodioClincos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EpisodioClincos.
     */
    distinct?: EpisodioClincoScalarFieldEnum | EpisodioClincoScalarFieldEnum[]
  }

  /**
   * EpisodioClinco findFirstOrThrow
   */
  export type EpisodioClincoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    /**
     * Filter, which EpisodioClinco to fetch.
     */
    where?: EpisodioClincoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EpisodioClincos to fetch.
     */
    orderBy?: EpisodioClincoOrderByWithRelationInput | EpisodioClincoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EpisodioClincos.
     */
    cursor?: EpisodioClincoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EpisodioClincos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EpisodioClincos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EpisodioClincos.
     */
    distinct?: EpisodioClincoScalarFieldEnum | EpisodioClincoScalarFieldEnum[]
  }

  /**
   * EpisodioClinco findMany
   */
  export type EpisodioClincoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    /**
     * Filter, which EpisodioClincos to fetch.
     */
    where?: EpisodioClincoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EpisodioClincos to fetch.
     */
    orderBy?: EpisodioClincoOrderByWithRelationInput | EpisodioClincoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EpisodioClincos.
     */
    cursor?: EpisodioClincoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EpisodioClincos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EpisodioClincos.
     */
    skip?: number
    distinct?: EpisodioClincoScalarFieldEnum | EpisodioClincoScalarFieldEnum[]
  }

  /**
   * EpisodioClinco create
   */
  export type EpisodioClincoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    /**
     * The data needed to create a EpisodioClinco.
     */
    data: XOR<EpisodioClincoCreateInput, EpisodioClincoUncheckedCreateInput>
  }

  /**
   * EpisodioClinco createMany
   */
  export type EpisodioClincoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EpisodioClincos.
     */
    data: EpisodioClincoCreateManyInput | EpisodioClincoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EpisodioClinco createManyAndReturn
   */
  export type EpisodioClincoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * The data used to create many EpisodioClincos.
     */
    data: EpisodioClincoCreateManyInput | EpisodioClincoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EpisodioClinco update
   */
  export type EpisodioClincoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    /**
     * The data needed to update a EpisodioClinco.
     */
    data: XOR<EpisodioClincoUpdateInput, EpisodioClincoUncheckedUpdateInput>
    /**
     * Choose, which EpisodioClinco to update.
     */
    where: EpisodioClincoWhereUniqueInput
  }

  /**
   * EpisodioClinco updateMany
   */
  export type EpisodioClincoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EpisodioClincos.
     */
    data: XOR<EpisodioClincoUpdateManyMutationInput, EpisodioClincoUncheckedUpdateManyInput>
    /**
     * Filter which EpisodioClincos to update
     */
    where?: EpisodioClincoWhereInput
    /**
     * Limit how many EpisodioClincos to update.
     */
    limit?: number
  }

  /**
   * EpisodioClinco updateManyAndReturn
   */
  export type EpisodioClincoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * The data used to update EpisodioClincos.
     */
    data: XOR<EpisodioClincoUpdateManyMutationInput, EpisodioClincoUncheckedUpdateManyInput>
    /**
     * Filter which EpisodioClincos to update
     */
    where?: EpisodioClincoWhereInput
    /**
     * Limit how many EpisodioClincos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EpisodioClinco upsert
   */
  export type EpisodioClincoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    /**
     * The filter to search for the EpisodioClinco to update in case it exists.
     */
    where: EpisodioClincoWhereUniqueInput
    /**
     * In case the EpisodioClinco found by the `where` argument doesn't exist, create a new EpisodioClinco with this data.
     */
    create: XOR<EpisodioClincoCreateInput, EpisodioClincoUncheckedCreateInput>
    /**
     * In case the EpisodioClinco was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EpisodioClincoUpdateInput, EpisodioClincoUncheckedUpdateInput>
  }

  /**
   * EpisodioClinco delete
   */
  export type EpisodioClincoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    /**
     * Filter which EpisodioClinco to delete.
     */
    where: EpisodioClincoWhereUniqueInput
  }

  /**
   * EpisodioClinco deleteMany
   */
  export type EpisodioClincoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EpisodioClincos to delete
     */
    where?: EpisodioClincoWhereInput
    /**
     * Limit how many EpisodioClincos to delete.
     */
    limit?: number
  }

  /**
   * EpisodioClinco.medico
   */
  export type EpisodioClinco$medicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medico
     */
    select?: MedicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medico
     */
    omit?: MedicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicoInclude<ExtArgs> | null
    where?: MedicoWhereInput
  }

  /**
   * EpisodioClinco.signosVitales
   */
  export type EpisodioClinco$signosVitalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    where?: SignosVitalesWhereInput
    orderBy?: SignosVitalesOrderByWithRelationInput | SignosVitalesOrderByWithRelationInput[]
    cursor?: SignosVitalesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SignosVitalesScalarFieldEnum | SignosVitalesScalarFieldEnum[]
  }

  /**
   * EpisodioClinco.diagnosticos
   */
  export type EpisodioClinco$diagnosticosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    where?: DiagnosticoWhereInput
    orderBy?: DiagnosticoOrderByWithRelationInput | DiagnosticoOrderByWithRelationInput[]
    cursor?: DiagnosticoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiagnosticoScalarFieldEnum | DiagnosticoScalarFieldEnum[]
  }

  /**
   * EpisodioClinco.prescripciones
   */
  export type EpisodioClinco$prescripcionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    where?: PrescripcionWhereInput
    orderBy?: PrescripcionOrderByWithRelationInput | PrescripcionOrderByWithRelationInput[]
    cursor?: PrescripcionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescripcionScalarFieldEnum | PrescripcionScalarFieldEnum[]
  }

  /**
   * EpisodioClinco.documentosClinicos
   */
  export type EpisodioClinco$documentosClinicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    where?: DocumentoClinicoWhereInput
    orderBy?: DocumentoClinicoOrderByWithRelationInput | DocumentoClinicoOrderByWithRelationInput[]
    cursor?: DocumentoClinicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentoClinicoScalarFieldEnum | DocumentoClinicoScalarFieldEnum[]
  }

  /**
   * EpisodioClinco.consentimientos
   */
  export type EpisodioClinco$consentimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    where?: ConsentimientoInformadoWhereInput
    orderBy?: ConsentimientoInformadoOrderByWithRelationInput | ConsentimientoInformadoOrderByWithRelationInput[]
    cursor?: ConsentimientoInformadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsentimientoInformadoScalarFieldEnum | ConsentimientoInformadoScalarFieldEnum[]
  }

  /**
   * EpisodioClinco.odontologiaDetalle
   */
  export type EpisodioClinco$odontologiaDetalleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    where?: OdontologiaDetalleWhereInput
  }

  /**
   * EpisodioClinco.oftalmologiaDetalle
   */
  export type EpisodioClinco$oftalmologiaDetalleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    where?: OftalmologiaDetalleWhereInput
  }

  /**
   * EpisodioClinco.psicologiaDetalle
   */
  export type EpisodioClinco$psicologiaDetalleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    where?: PsicologiaDetalleWhereInput
  }

  /**
   * EpisodioClinco.trabajoSocialDetalle
   */
  export type EpisodioClinco$trabajoSocialDetalleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    where?: TrabajoSocialDetalleWhereInput
  }

  /**
   * EpisodioClinco.auditorias
   */
  export type EpisodioClinco$auditoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    where?: AuditoriaHistoriaWhereInput
    orderBy?: AuditoriaHistoriaOrderByWithRelationInput | AuditoriaHistoriaOrderByWithRelationInput[]
    cursor?: AuditoriaHistoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditoriaHistoriaScalarFieldEnum | AuditoriaHistoriaScalarFieldEnum[]
  }

  /**
   * EpisodioClinco without action
   */
  export type EpisodioClincoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
  }


  /**
   * Model SignosVitales
   */

  export type AggregateSignosVitales = {
    _count: SignosVitalesCountAggregateOutputType | null
    _avg: SignosVitalesAvgAggregateOutputType | null
    _sum: SignosVitalesSumAggregateOutputType | null
    _min: SignosVitalesMinAggregateOutputType | null
    _max: SignosVitalesMaxAggregateOutputType | null
  }

  export type SignosVitalesAvgAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    temperatura: Decimal | null
    frecuenciaCardiaca: number | null
    frecuenciaRespiratoria: number | null
    saturacionOxigeno: Decimal | null
    peso: Decimal | null
    altura: Decimal | null
    imc: Decimal | null
  }

  export type SignosVitalesSumAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    temperatura: Decimal | null
    frecuenciaCardiaca: number | null
    frecuenciaRespiratoria: number | null
    saturacionOxigeno: Decimal | null
    peso: Decimal | null
    altura: Decimal | null
    imc: Decimal | null
  }

  export type SignosVitalesMinAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    presionArterial: string | null
    temperatura: Decimal | null
    frecuenciaCardiaca: number | null
    frecuenciaRespiratoria: number | null
    saturacionOxigeno: Decimal | null
    peso: Decimal | null
    altura: Decimal | null
    imc: Decimal | null
    fechaRegistro: Date | null
  }

  export type SignosVitalesMaxAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    presionArterial: string | null
    temperatura: Decimal | null
    frecuenciaCardiaca: number | null
    frecuenciaRespiratoria: number | null
    saturacionOxigeno: Decimal | null
    peso: Decimal | null
    altura: Decimal | null
    imc: Decimal | null
    fechaRegistro: Date | null
  }

  export type SignosVitalesCountAggregateOutputType = {
    id: number
    episodioClinicoId: number
    presionArterial: number
    temperatura: number
    frecuenciaCardiaca: number
    frecuenciaRespiratoria: number
    saturacionOxigeno: number
    peso: number
    altura: number
    imc: number
    fechaRegistro: number
    _all: number
  }


  export type SignosVitalesAvgAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    temperatura?: true
    frecuenciaCardiaca?: true
    frecuenciaRespiratoria?: true
    saturacionOxigeno?: true
    peso?: true
    altura?: true
    imc?: true
  }

  export type SignosVitalesSumAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    temperatura?: true
    frecuenciaCardiaca?: true
    frecuenciaRespiratoria?: true
    saturacionOxigeno?: true
    peso?: true
    altura?: true
    imc?: true
  }

  export type SignosVitalesMinAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    presionArterial?: true
    temperatura?: true
    frecuenciaCardiaca?: true
    frecuenciaRespiratoria?: true
    saturacionOxigeno?: true
    peso?: true
    altura?: true
    imc?: true
    fechaRegistro?: true
  }

  export type SignosVitalesMaxAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    presionArterial?: true
    temperatura?: true
    frecuenciaCardiaca?: true
    frecuenciaRespiratoria?: true
    saturacionOxigeno?: true
    peso?: true
    altura?: true
    imc?: true
    fechaRegistro?: true
  }

  export type SignosVitalesCountAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    presionArterial?: true
    temperatura?: true
    frecuenciaCardiaca?: true
    frecuenciaRespiratoria?: true
    saturacionOxigeno?: true
    peso?: true
    altura?: true
    imc?: true
    fechaRegistro?: true
    _all?: true
  }

  export type SignosVitalesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SignosVitales to aggregate.
     */
    where?: SignosVitalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SignosVitales to fetch.
     */
    orderBy?: SignosVitalesOrderByWithRelationInput | SignosVitalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SignosVitalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SignosVitales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SignosVitales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SignosVitales
    **/
    _count?: true | SignosVitalesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SignosVitalesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SignosVitalesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SignosVitalesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SignosVitalesMaxAggregateInputType
  }

  export type GetSignosVitalesAggregateType<T extends SignosVitalesAggregateArgs> = {
        [P in keyof T & keyof AggregateSignosVitales]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSignosVitales[P]>
      : GetScalarType<T[P], AggregateSignosVitales[P]>
  }




  export type SignosVitalesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignosVitalesWhereInput
    orderBy?: SignosVitalesOrderByWithAggregationInput | SignosVitalesOrderByWithAggregationInput[]
    by: SignosVitalesScalarFieldEnum[] | SignosVitalesScalarFieldEnum
    having?: SignosVitalesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SignosVitalesCountAggregateInputType | true
    _avg?: SignosVitalesAvgAggregateInputType
    _sum?: SignosVitalesSumAggregateInputType
    _min?: SignosVitalesMinAggregateInputType
    _max?: SignosVitalesMaxAggregateInputType
  }

  export type SignosVitalesGroupByOutputType = {
    id: number
    episodioClinicoId: number
    presionArterial: string | null
    temperatura: Decimal | null
    frecuenciaCardiaca: number | null
    frecuenciaRespiratoria: number | null
    saturacionOxigeno: Decimal | null
    peso: Decimal | null
    altura: Decimal | null
    imc: Decimal | null
    fechaRegistro: Date
    _count: SignosVitalesCountAggregateOutputType | null
    _avg: SignosVitalesAvgAggregateOutputType | null
    _sum: SignosVitalesSumAggregateOutputType | null
    _min: SignosVitalesMinAggregateOutputType | null
    _max: SignosVitalesMaxAggregateOutputType | null
  }

  type GetSignosVitalesGroupByPayload<T extends SignosVitalesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SignosVitalesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SignosVitalesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SignosVitalesGroupByOutputType[P]>
            : GetScalarType<T[P], SignosVitalesGroupByOutputType[P]>
        }
      >
    >


  export type SignosVitalesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    presionArterial?: boolean
    temperatura?: boolean
    frecuenciaCardiaca?: boolean
    frecuenciaRespiratoria?: boolean
    saturacionOxigeno?: boolean
    peso?: boolean
    altura?: boolean
    imc?: boolean
    fechaRegistro?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signosVitales"]>

  export type SignosVitalesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    presionArterial?: boolean
    temperatura?: boolean
    frecuenciaCardiaca?: boolean
    frecuenciaRespiratoria?: boolean
    saturacionOxigeno?: boolean
    peso?: boolean
    altura?: boolean
    imc?: boolean
    fechaRegistro?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signosVitales"]>

  export type SignosVitalesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    presionArterial?: boolean
    temperatura?: boolean
    frecuenciaCardiaca?: boolean
    frecuenciaRespiratoria?: boolean
    saturacionOxigeno?: boolean
    peso?: boolean
    altura?: boolean
    imc?: boolean
    fechaRegistro?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signosVitales"]>

  export type SignosVitalesSelectScalar = {
    id?: boolean
    episodioClinicoId?: boolean
    presionArterial?: boolean
    temperatura?: boolean
    frecuenciaCardiaca?: boolean
    frecuenciaRespiratoria?: boolean
    saturacionOxigeno?: boolean
    peso?: boolean
    altura?: boolean
    imc?: boolean
    fechaRegistro?: boolean
  }

  export type SignosVitalesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodioClinicoId" | "presionArterial" | "temperatura" | "frecuenciaCardiaca" | "frecuenciaRespiratoria" | "saturacionOxigeno" | "peso" | "altura" | "imc" | "fechaRegistro", ExtArgs["result"]["signosVitales"]>
  export type SignosVitalesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type SignosVitalesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type SignosVitalesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }

  export type $SignosVitalesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SignosVitales"
    objects: {
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodioClinicoId: number
      presionArterial: string | null
      temperatura: Prisma.Decimal | null
      frecuenciaCardiaca: number | null
      frecuenciaRespiratoria: number | null
      saturacionOxigeno: Prisma.Decimal | null
      peso: Prisma.Decimal | null
      altura: Prisma.Decimal | null
      imc: Prisma.Decimal | null
      fechaRegistro: Date
    }, ExtArgs["result"]["signosVitales"]>
    composites: {}
  }

  type SignosVitalesGetPayload<S extends boolean | null | undefined | SignosVitalesDefaultArgs> = $Result.GetResult<Prisma.$SignosVitalesPayload, S>

  type SignosVitalesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SignosVitalesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SignosVitalesCountAggregateInputType | true
    }

  export interface SignosVitalesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SignosVitales'], meta: { name: 'SignosVitales' } }
    /**
     * Find zero or one SignosVitales that matches the filter.
     * @param {SignosVitalesFindUniqueArgs} args - Arguments to find a SignosVitales
     * @example
     * // Get one SignosVitales
     * const signosVitales = await prisma.signosVitales.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SignosVitalesFindUniqueArgs>(args: SelectSubset<T, SignosVitalesFindUniqueArgs<ExtArgs>>): Prisma__SignosVitalesClient<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SignosVitales that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SignosVitalesFindUniqueOrThrowArgs} args - Arguments to find a SignosVitales
     * @example
     * // Get one SignosVitales
     * const signosVitales = await prisma.signosVitales.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SignosVitalesFindUniqueOrThrowArgs>(args: SelectSubset<T, SignosVitalesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SignosVitalesClient<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SignosVitales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignosVitalesFindFirstArgs} args - Arguments to find a SignosVitales
     * @example
     * // Get one SignosVitales
     * const signosVitales = await prisma.signosVitales.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SignosVitalesFindFirstArgs>(args?: SelectSubset<T, SignosVitalesFindFirstArgs<ExtArgs>>): Prisma__SignosVitalesClient<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SignosVitales that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignosVitalesFindFirstOrThrowArgs} args - Arguments to find a SignosVitales
     * @example
     * // Get one SignosVitales
     * const signosVitales = await prisma.signosVitales.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SignosVitalesFindFirstOrThrowArgs>(args?: SelectSubset<T, SignosVitalesFindFirstOrThrowArgs<ExtArgs>>): Prisma__SignosVitalesClient<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SignosVitales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignosVitalesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SignosVitales
     * const signosVitales = await prisma.signosVitales.findMany()
     * 
     * // Get first 10 SignosVitales
     * const signosVitales = await prisma.signosVitales.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const signosVitalesWithIdOnly = await prisma.signosVitales.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SignosVitalesFindManyArgs>(args?: SelectSubset<T, SignosVitalesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SignosVitales.
     * @param {SignosVitalesCreateArgs} args - Arguments to create a SignosVitales.
     * @example
     * // Create one SignosVitales
     * const SignosVitales = await prisma.signosVitales.create({
     *   data: {
     *     // ... data to create a SignosVitales
     *   }
     * })
     * 
     */
    create<T extends SignosVitalesCreateArgs>(args: SelectSubset<T, SignosVitalesCreateArgs<ExtArgs>>): Prisma__SignosVitalesClient<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SignosVitales.
     * @param {SignosVitalesCreateManyArgs} args - Arguments to create many SignosVitales.
     * @example
     * // Create many SignosVitales
     * const signosVitales = await prisma.signosVitales.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SignosVitalesCreateManyArgs>(args?: SelectSubset<T, SignosVitalesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SignosVitales and returns the data saved in the database.
     * @param {SignosVitalesCreateManyAndReturnArgs} args - Arguments to create many SignosVitales.
     * @example
     * // Create many SignosVitales
     * const signosVitales = await prisma.signosVitales.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SignosVitales and only return the `id`
     * const signosVitalesWithIdOnly = await prisma.signosVitales.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SignosVitalesCreateManyAndReturnArgs>(args?: SelectSubset<T, SignosVitalesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SignosVitales.
     * @param {SignosVitalesDeleteArgs} args - Arguments to delete one SignosVitales.
     * @example
     * // Delete one SignosVitales
     * const SignosVitales = await prisma.signosVitales.delete({
     *   where: {
     *     // ... filter to delete one SignosVitales
     *   }
     * })
     * 
     */
    delete<T extends SignosVitalesDeleteArgs>(args: SelectSubset<T, SignosVitalesDeleteArgs<ExtArgs>>): Prisma__SignosVitalesClient<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SignosVitales.
     * @param {SignosVitalesUpdateArgs} args - Arguments to update one SignosVitales.
     * @example
     * // Update one SignosVitales
     * const signosVitales = await prisma.signosVitales.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SignosVitalesUpdateArgs>(args: SelectSubset<T, SignosVitalesUpdateArgs<ExtArgs>>): Prisma__SignosVitalesClient<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SignosVitales.
     * @param {SignosVitalesDeleteManyArgs} args - Arguments to filter SignosVitales to delete.
     * @example
     * // Delete a few SignosVitales
     * const { count } = await prisma.signosVitales.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SignosVitalesDeleteManyArgs>(args?: SelectSubset<T, SignosVitalesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SignosVitales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignosVitalesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SignosVitales
     * const signosVitales = await prisma.signosVitales.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SignosVitalesUpdateManyArgs>(args: SelectSubset<T, SignosVitalesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SignosVitales and returns the data updated in the database.
     * @param {SignosVitalesUpdateManyAndReturnArgs} args - Arguments to update many SignosVitales.
     * @example
     * // Update many SignosVitales
     * const signosVitales = await prisma.signosVitales.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SignosVitales and only return the `id`
     * const signosVitalesWithIdOnly = await prisma.signosVitales.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SignosVitalesUpdateManyAndReturnArgs>(args: SelectSubset<T, SignosVitalesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SignosVitales.
     * @param {SignosVitalesUpsertArgs} args - Arguments to update or create a SignosVitales.
     * @example
     * // Update or create a SignosVitales
     * const signosVitales = await prisma.signosVitales.upsert({
     *   create: {
     *     // ... data to create a SignosVitales
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SignosVitales we want to update
     *   }
     * })
     */
    upsert<T extends SignosVitalesUpsertArgs>(args: SelectSubset<T, SignosVitalesUpsertArgs<ExtArgs>>): Prisma__SignosVitalesClient<$Result.GetResult<Prisma.$SignosVitalesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SignosVitales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignosVitalesCountArgs} args - Arguments to filter SignosVitales to count.
     * @example
     * // Count the number of SignosVitales
     * const count = await prisma.signosVitales.count({
     *   where: {
     *     // ... the filter for the SignosVitales we want to count
     *   }
     * })
    **/
    count<T extends SignosVitalesCountArgs>(
      args?: Subset<T, SignosVitalesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SignosVitalesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SignosVitales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignosVitalesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SignosVitalesAggregateArgs>(args: Subset<T, SignosVitalesAggregateArgs>): Prisma.PrismaPromise<GetSignosVitalesAggregateType<T>>

    /**
     * Group by SignosVitales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignosVitalesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SignosVitalesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SignosVitalesGroupByArgs['orderBy'] }
        : { orderBy?: SignosVitalesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SignosVitalesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSignosVitalesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SignosVitales model
   */
  readonly fields: SignosVitalesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SignosVitales.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SignosVitalesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodioClinico<T extends EpisodioClincoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClincoDefaultArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SignosVitales model
   */
  interface SignosVitalesFieldRefs {
    readonly id: FieldRef<"SignosVitales", 'Int'>
    readonly episodioClinicoId: FieldRef<"SignosVitales", 'Int'>
    readonly presionArterial: FieldRef<"SignosVitales", 'String'>
    readonly temperatura: FieldRef<"SignosVitales", 'Decimal'>
    readonly frecuenciaCardiaca: FieldRef<"SignosVitales", 'Int'>
    readonly frecuenciaRespiratoria: FieldRef<"SignosVitales", 'Int'>
    readonly saturacionOxigeno: FieldRef<"SignosVitales", 'Decimal'>
    readonly peso: FieldRef<"SignosVitales", 'Decimal'>
    readonly altura: FieldRef<"SignosVitales", 'Decimal'>
    readonly imc: FieldRef<"SignosVitales", 'Decimal'>
    readonly fechaRegistro: FieldRef<"SignosVitales", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SignosVitales findUnique
   */
  export type SignosVitalesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    /**
     * Filter, which SignosVitales to fetch.
     */
    where: SignosVitalesWhereUniqueInput
  }

  /**
   * SignosVitales findUniqueOrThrow
   */
  export type SignosVitalesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    /**
     * Filter, which SignosVitales to fetch.
     */
    where: SignosVitalesWhereUniqueInput
  }

  /**
   * SignosVitales findFirst
   */
  export type SignosVitalesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    /**
     * Filter, which SignosVitales to fetch.
     */
    where?: SignosVitalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SignosVitales to fetch.
     */
    orderBy?: SignosVitalesOrderByWithRelationInput | SignosVitalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SignosVitales.
     */
    cursor?: SignosVitalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SignosVitales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SignosVitales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SignosVitales.
     */
    distinct?: SignosVitalesScalarFieldEnum | SignosVitalesScalarFieldEnum[]
  }

  /**
   * SignosVitales findFirstOrThrow
   */
  export type SignosVitalesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    /**
     * Filter, which SignosVitales to fetch.
     */
    where?: SignosVitalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SignosVitales to fetch.
     */
    orderBy?: SignosVitalesOrderByWithRelationInput | SignosVitalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SignosVitales.
     */
    cursor?: SignosVitalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SignosVitales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SignosVitales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SignosVitales.
     */
    distinct?: SignosVitalesScalarFieldEnum | SignosVitalesScalarFieldEnum[]
  }

  /**
   * SignosVitales findMany
   */
  export type SignosVitalesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    /**
     * Filter, which SignosVitales to fetch.
     */
    where?: SignosVitalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SignosVitales to fetch.
     */
    orderBy?: SignosVitalesOrderByWithRelationInput | SignosVitalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SignosVitales.
     */
    cursor?: SignosVitalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SignosVitales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SignosVitales.
     */
    skip?: number
    distinct?: SignosVitalesScalarFieldEnum | SignosVitalesScalarFieldEnum[]
  }

  /**
   * SignosVitales create
   */
  export type SignosVitalesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    /**
     * The data needed to create a SignosVitales.
     */
    data: XOR<SignosVitalesCreateInput, SignosVitalesUncheckedCreateInput>
  }

  /**
   * SignosVitales createMany
   */
  export type SignosVitalesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SignosVitales.
     */
    data: SignosVitalesCreateManyInput | SignosVitalesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SignosVitales createManyAndReturn
   */
  export type SignosVitalesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * The data used to create many SignosVitales.
     */
    data: SignosVitalesCreateManyInput | SignosVitalesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SignosVitales update
   */
  export type SignosVitalesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    /**
     * The data needed to update a SignosVitales.
     */
    data: XOR<SignosVitalesUpdateInput, SignosVitalesUncheckedUpdateInput>
    /**
     * Choose, which SignosVitales to update.
     */
    where: SignosVitalesWhereUniqueInput
  }

  /**
   * SignosVitales updateMany
   */
  export type SignosVitalesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SignosVitales.
     */
    data: XOR<SignosVitalesUpdateManyMutationInput, SignosVitalesUncheckedUpdateManyInput>
    /**
     * Filter which SignosVitales to update
     */
    where?: SignosVitalesWhereInput
    /**
     * Limit how many SignosVitales to update.
     */
    limit?: number
  }

  /**
   * SignosVitales updateManyAndReturn
   */
  export type SignosVitalesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * The data used to update SignosVitales.
     */
    data: XOR<SignosVitalesUpdateManyMutationInput, SignosVitalesUncheckedUpdateManyInput>
    /**
     * Filter which SignosVitales to update
     */
    where?: SignosVitalesWhereInput
    /**
     * Limit how many SignosVitales to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SignosVitales upsert
   */
  export type SignosVitalesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    /**
     * The filter to search for the SignosVitales to update in case it exists.
     */
    where: SignosVitalesWhereUniqueInput
    /**
     * In case the SignosVitales found by the `where` argument doesn't exist, create a new SignosVitales with this data.
     */
    create: XOR<SignosVitalesCreateInput, SignosVitalesUncheckedCreateInput>
    /**
     * In case the SignosVitales was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SignosVitalesUpdateInput, SignosVitalesUncheckedUpdateInput>
  }

  /**
   * SignosVitales delete
   */
  export type SignosVitalesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
    /**
     * Filter which SignosVitales to delete.
     */
    where: SignosVitalesWhereUniqueInput
  }

  /**
   * SignosVitales deleteMany
   */
  export type SignosVitalesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SignosVitales to delete
     */
    where?: SignosVitalesWhereInput
    /**
     * Limit how many SignosVitales to delete.
     */
    limit?: number
  }

  /**
   * SignosVitales without action
   */
  export type SignosVitalesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignosVitales
     */
    select?: SignosVitalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SignosVitales
     */
    omit?: SignosVitalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignosVitalesInclude<ExtArgs> | null
  }


  /**
   * Model CodigoCIE10
   */

  export type AggregateCodigoCIE10 = {
    _count: CodigoCIE10CountAggregateOutputType | null
    _min: CodigoCIE10MinAggregateOutputType | null
    _max: CodigoCIE10MaxAggregateOutputType | null
  }

  export type CodigoCIE10MinAggregateOutputType = {
    codigo: string | null
    descripcion: string | null
    categoria: string | null
    subcategoria: string | null
    activo: boolean | null
  }

  export type CodigoCIE10MaxAggregateOutputType = {
    codigo: string | null
    descripcion: string | null
    categoria: string | null
    subcategoria: string | null
    activo: boolean | null
  }

  export type CodigoCIE10CountAggregateOutputType = {
    codigo: number
    descripcion: number
    categoria: number
    subcategoria: number
    activo: number
    _all: number
  }


  export type CodigoCIE10MinAggregateInputType = {
    codigo?: true
    descripcion?: true
    categoria?: true
    subcategoria?: true
    activo?: true
  }

  export type CodigoCIE10MaxAggregateInputType = {
    codigo?: true
    descripcion?: true
    categoria?: true
    subcategoria?: true
    activo?: true
  }

  export type CodigoCIE10CountAggregateInputType = {
    codigo?: true
    descripcion?: true
    categoria?: true
    subcategoria?: true
    activo?: true
    _all?: true
  }

  export type CodigoCIE10AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodigoCIE10 to aggregate.
     */
    where?: CodigoCIE10WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodigoCIE10s to fetch.
     */
    orderBy?: CodigoCIE10OrderByWithRelationInput | CodigoCIE10OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CodigoCIE10WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodigoCIE10s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodigoCIE10s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CodigoCIE10s
    **/
    _count?: true | CodigoCIE10CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CodigoCIE10MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CodigoCIE10MaxAggregateInputType
  }

  export type GetCodigoCIE10AggregateType<T extends CodigoCIE10AggregateArgs> = {
        [P in keyof T & keyof AggregateCodigoCIE10]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCodigoCIE10[P]>
      : GetScalarType<T[P], AggregateCodigoCIE10[P]>
  }




  export type CodigoCIE10GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodigoCIE10WhereInput
    orderBy?: CodigoCIE10OrderByWithAggregationInput | CodigoCIE10OrderByWithAggregationInput[]
    by: CodigoCIE10ScalarFieldEnum[] | CodigoCIE10ScalarFieldEnum
    having?: CodigoCIE10ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CodigoCIE10CountAggregateInputType | true
    _min?: CodigoCIE10MinAggregateInputType
    _max?: CodigoCIE10MaxAggregateInputType
  }

  export type CodigoCIE10GroupByOutputType = {
    codigo: string
    descripcion: string
    categoria: string
    subcategoria: string | null
    activo: boolean
    _count: CodigoCIE10CountAggregateOutputType | null
    _min: CodigoCIE10MinAggregateOutputType | null
    _max: CodigoCIE10MaxAggregateOutputType | null
  }

  type GetCodigoCIE10GroupByPayload<T extends CodigoCIE10GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CodigoCIE10GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CodigoCIE10GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CodigoCIE10GroupByOutputType[P]>
            : GetScalarType<T[P], CodigoCIE10GroupByOutputType[P]>
        }
      >
    >


  export type CodigoCIE10Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    codigo?: boolean
    descripcion?: boolean
    categoria?: boolean
    subcategoria?: boolean
    activo?: boolean
    diagnosticos?: boolean | CodigoCIE10$diagnosticosArgs<ExtArgs>
    _count?: boolean | CodigoCIE10CountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["codigoCIE10"]>

  export type CodigoCIE10SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    codigo?: boolean
    descripcion?: boolean
    categoria?: boolean
    subcategoria?: boolean
    activo?: boolean
  }, ExtArgs["result"]["codigoCIE10"]>

  export type CodigoCIE10SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    codigo?: boolean
    descripcion?: boolean
    categoria?: boolean
    subcategoria?: boolean
    activo?: boolean
  }, ExtArgs["result"]["codigoCIE10"]>

  export type CodigoCIE10SelectScalar = {
    codigo?: boolean
    descripcion?: boolean
    categoria?: boolean
    subcategoria?: boolean
    activo?: boolean
  }

  export type CodigoCIE10Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"codigo" | "descripcion" | "categoria" | "subcategoria" | "activo", ExtArgs["result"]["codigoCIE10"]>
  export type CodigoCIE10Include<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    diagnosticos?: boolean | CodigoCIE10$diagnosticosArgs<ExtArgs>
    _count?: boolean | CodigoCIE10CountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CodigoCIE10IncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CodigoCIE10IncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CodigoCIE10Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CodigoCIE10"
    objects: {
      diagnosticos: Prisma.$DiagnosticoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      codigo: string
      descripcion: string
      categoria: string
      subcategoria: string | null
      activo: boolean
    }, ExtArgs["result"]["codigoCIE10"]>
    composites: {}
  }

  type CodigoCIE10GetPayload<S extends boolean | null | undefined | CodigoCIE10DefaultArgs> = $Result.GetResult<Prisma.$CodigoCIE10Payload, S>

  type CodigoCIE10CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CodigoCIE10FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CodigoCIE10CountAggregateInputType | true
    }

  export interface CodigoCIE10Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CodigoCIE10'], meta: { name: 'CodigoCIE10' } }
    /**
     * Find zero or one CodigoCIE10 that matches the filter.
     * @param {CodigoCIE10FindUniqueArgs} args - Arguments to find a CodigoCIE10
     * @example
     * // Get one CodigoCIE10
     * const codigoCIE10 = await prisma.codigoCIE10.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CodigoCIE10FindUniqueArgs>(args: SelectSubset<T, CodigoCIE10FindUniqueArgs<ExtArgs>>): Prisma__CodigoCIE10Client<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CodigoCIE10 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CodigoCIE10FindUniqueOrThrowArgs} args - Arguments to find a CodigoCIE10
     * @example
     * // Get one CodigoCIE10
     * const codigoCIE10 = await prisma.codigoCIE10.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CodigoCIE10FindUniqueOrThrowArgs>(args: SelectSubset<T, CodigoCIE10FindUniqueOrThrowArgs<ExtArgs>>): Prisma__CodigoCIE10Client<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CodigoCIE10 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCIE10FindFirstArgs} args - Arguments to find a CodigoCIE10
     * @example
     * // Get one CodigoCIE10
     * const codigoCIE10 = await prisma.codigoCIE10.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CodigoCIE10FindFirstArgs>(args?: SelectSubset<T, CodigoCIE10FindFirstArgs<ExtArgs>>): Prisma__CodigoCIE10Client<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CodigoCIE10 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCIE10FindFirstOrThrowArgs} args - Arguments to find a CodigoCIE10
     * @example
     * // Get one CodigoCIE10
     * const codigoCIE10 = await prisma.codigoCIE10.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CodigoCIE10FindFirstOrThrowArgs>(args?: SelectSubset<T, CodigoCIE10FindFirstOrThrowArgs<ExtArgs>>): Prisma__CodigoCIE10Client<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CodigoCIE10s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCIE10FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CodigoCIE10s
     * const codigoCIE10s = await prisma.codigoCIE10.findMany()
     * 
     * // Get first 10 CodigoCIE10s
     * const codigoCIE10s = await prisma.codigoCIE10.findMany({ take: 10 })
     * 
     * // Only select the `codigo`
     * const codigoCIE10WithCodigoOnly = await prisma.codigoCIE10.findMany({ select: { codigo: true } })
     * 
     */
    findMany<T extends CodigoCIE10FindManyArgs>(args?: SelectSubset<T, CodigoCIE10FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CodigoCIE10.
     * @param {CodigoCIE10CreateArgs} args - Arguments to create a CodigoCIE10.
     * @example
     * // Create one CodigoCIE10
     * const CodigoCIE10 = await prisma.codigoCIE10.create({
     *   data: {
     *     // ... data to create a CodigoCIE10
     *   }
     * })
     * 
     */
    create<T extends CodigoCIE10CreateArgs>(args: SelectSubset<T, CodigoCIE10CreateArgs<ExtArgs>>): Prisma__CodigoCIE10Client<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CodigoCIE10s.
     * @param {CodigoCIE10CreateManyArgs} args - Arguments to create many CodigoCIE10s.
     * @example
     * // Create many CodigoCIE10s
     * const codigoCIE10 = await prisma.codigoCIE10.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CodigoCIE10CreateManyArgs>(args?: SelectSubset<T, CodigoCIE10CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CodigoCIE10s and returns the data saved in the database.
     * @param {CodigoCIE10CreateManyAndReturnArgs} args - Arguments to create many CodigoCIE10s.
     * @example
     * // Create many CodigoCIE10s
     * const codigoCIE10 = await prisma.codigoCIE10.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CodigoCIE10s and only return the `codigo`
     * const codigoCIE10WithCodigoOnly = await prisma.codigoCIE10.createManyAndReturn({
     *   select: { codigo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CodigoCIE10CreateManyAndReturnArgs>(args?: SelectSubset<T, CodigoCIE10CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CodigoCIE10.
     * @param {CodigoCIE10DeleteArgs} args - Arguments to delete one CodigoCIE10.
     * @example
     * // Delete one CodigoCIE10
     * const CodigoCIE10 = await prisma.codigoCIE10.delete({
     *   where: {
     *     // ... filter to delete one CodigoCIE10
     *   }
     * })
     * 
     */
    delete<T extends CodigoCIE10DeleteArgs>(args: SelectSubset<T, CodigoCIE10DeleteArgs<ExtArgs>>): Prisma__CodigoCIE10Client<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CodigoCIE10.
     * @param {CodigoCIE10UpdateArgs} args - Arguments to update one CodigoCIE10.
     * @example
     * // Update one CodigoCIE10
     * const codigoCIE10 = await prisma.codigoCIE10.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CodigoCIE10UpdateArgs>(args: SelectSubset<T, CodigoCIE10UpdateArgs<ExtArgs>>): Prisma__CodigoCIE10Client<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CodigoCIE10s.
     * @param {CodigoCIE10DeleteManyArgs} args - Arguments to filter CodigoCIE10s to delete.
     * @example
     * // Delete a few CodigoCIE10s
     * const { count } = await prisma.codigoCIE10.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CodigoCIE10DeleteManyArgs>(args?: SelectSubset<T, CodigoCIE10DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CodigoCIE10s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCIE10UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CodigoCIE10s
     * const codigoCIE10 = await prisma.codigoCIE10.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CodigoCIE10UpdateManyArgs>(args: SelectSubset<T, CodigoCIE10UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CodigoCIE10s and returns the data updated in the database.
     * @param {CodigoCIE10UpdateManyAndReturnArgs} args - Arguments to update many CodigoCIE10s.
     * @example
     * // Update many CodigoCIE10s
     * const codigoCIE10 = await prisma.codigoCIE10.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CodigoCIE10s and only return the `codigo`
     * const codigoCIE10WithCodigoOnly = await prisma.codigoCIE10.updateManyAndReturn({
     *   select: { codigo: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CodigoCIE10UpdateManyAndReturnArgs>(args: SelectSubset<T, CodigoCIE10UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CodigoCIE10.
     * @param {CodigoCIE10UpsertArgs} args - Arguments to update or create a CodigoCIE10.
     * @example
     * // Update or create a CodigoCIE10
     * const codigoCIE10 = await prisma.codigoCIE10.upsert({
     *   create: {
     *     // ... data to create a CodigoCIE10
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CodigoCIE10 we want to update
     *   }
     * })
     */
    upsert<T extends CodigoCIE10UpsertArgs>(args: SelectSubset<T, CodigoCIE10UpsertArgs<ExtArgs>>): Prisma__CodigoCIE10Client<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CodigoCIE10s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCIE10CountArgs} args - Arguments to filter CodigoCIE10s to count.
     * @example
     * // Count the number of CodigoCIE10s
     * const count = await prisma.codigoCIE10.count({
     *   where: {
     *     // ... the filter for the CodigoCIE10s we want to count
     *   }
     * })
    **/
    count<T extends CodigoCIE10CountArgs>(
      args?: Subset<T, CodigoCIE10CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CodigoCIE10CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CodigoCIE10.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCIE10AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CodigoCIE10AggregateArgs>(args: Subset<T, CodigoCIE10AggregateArgs>): Prisma.PrismaPromise<GetCodigoCIE10AggregateType<T>>

    /**
     * Group by CodigoCIE10.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodigoCIE10GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CodigoCIE10GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CodigoCIE10GroupByArgs['orderBy'] }
        : { orderBy?: CodigoCIE10GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CodigoCIE10GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodigoCIE10GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CodigoCIE10 model
   */
  readonly fields: CodigoCIE10FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CodigoCIE10.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CodigoCIE10Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    diagnosticos<T extends CodigoCIE10$diagnosticosArgs<ExtArgs> = {}>(args?: Subset<T, CodigoCIE10$diagnosticosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CodigoCIE10 model
   */
  interface CodigoCIE10FieldRefs {
    readonly codigo: FieldRef<"CodigoCIE10", 'String'>
    readonly descripcion: FieldRef<"CodigoCIE10", 'String'>
    readonly categoria: FieldRef<"CodigoCIE10", 'String'>
    readonly subcategoria: FieldRef<"CodigoCIE10", 'String'>
    readonly activo: FieldRef<"CodigoCIE10", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * CodigoCIE10 findUnique
   */
  export type CodigoCIE10FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
    /**
     * Filter, which CodigoCIE10 to fetch.
     */
    where: CodigoCIE10WhereUniqueInput
  }

  /**
   * CodigoCIE10 findUniqueOrThrow
   */
  export type CodigoCIE10FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
    /**
     * Filter, which CodigoCIE10 to fetch.
     */
    where: CodigoCIE10WhereUniqueInput
  }

  /**
   * CodigoCIE10 findFirst
   */
  export type CodigoCIE10FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
    /**
     * Filter, which CodigoCIE10 to fetch.
     */
    where?: CodigoCIE10WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodigoCIE10s to fetch.
     */
    orderBy?: CodigoCIE10OrderByWithRelationInput | CodigoCIE10OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodigoCIE10s.
     */
    cursor?: CodigoCIE10WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodigoCIE10s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodigoCIE10s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodigoCIE10s.
     */
    distinct?: CodigoCIE10ScalarFieldEnum | CodigoCIE10ScalarFieldEnum[]
  }

  /**
   * CodigoCIE10 findFirstOrThrow
   */
  export type CodigoCIE10FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
    /**
     * Filter, which CodigoCIE10 to fetch.
     */
    where?: CodigoCIE10WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodigoCIE10s to fetch.
     */
    orderBy?: CodigoCIE10OrderByWithRelationInput | CodigoCIE10OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodigoCIE10s.
     */
    cursor?: CodigoCIE10WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodigoCIE10s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodigoCIE10s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodigoCIE10s.
     */
    distinct?: CodigoCIE10ScalarFieldEnum | CodigoCIE10ScalarFieldEnum[]
  }

  /**
   * CodigoCIE10 findMany
   */
  export type CodigoCIE10FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
    /**
     * Filter, which CodigoCIE10s to fetch.
     */
    where?: CodigoCIE10WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodigoCIE10s to fetch.
     */
    orderBy?: CodigoCIE10OrderByWithRelationInput | CodigoCIE10OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CodigoCIE10s.
     */
    cursor?: CodigoCIE10WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodigoCIE10s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodigoCIE10s.
     */
    skip?: number
    distinct?: CodigoCIE10ScalarFieldEnum | CodigoCIE10ScalarFieldEnum[]
  }

  /**
   * CodigoCIE10 create
   */
  export type CodigoCIE10CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
    /**
     * The data needed to create a CodigoCIE10.
     */
    data: XOR<CodigoCIE10CreateInput, CodigoCIE10UncheckedCreateInput>
  }

  /**
   * CodigoCIE10 createMany
   */
  export type CodigoCIE10CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CodigoCIE10s.
     */
    data: CodigoCIE10CreateManyInput | CodigoCIE10CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CodigoCIE10 createManyAndReturn
   */
  export type CodigoCIE10CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * The data used to create many CodigoCIE10s.
     */
    data: CodigoCIE10CreateManyInput | CodigoCIE10CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CodigoCIE10 update
   */
  export type CodigoCIE10UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
    /**
     * The data needed to update a CodigoCIE10.
     */
    data: XOR<CodigoCIE10UpdateInput, CodigoCIE10UncheckedUpdateInput>
    /**
     * Choose, which CodigoCIE10 to update.
     */
    where: CodigoCIE10WhereUniqueInput
  }

  /**
   * CodigoCIE10 updateMany
   */
  export type CodigoCIE10UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CodigoCIE10s.
     */
    data: XOR<CodigoCIE10UpdateManyMutationInput, CodigoCIE10UncheckedUpdateManyInput>
    /**
     * Filter which CodigoCIE10s to update
     */
    where?: CodigoCIE10WhereInput
    /**
     * Limit how many CodigoCIE10s to update.
     */
    limit?: number
  }

  /**
   * CodigoCIE10 updateManyAndReturn
   */
  export type CodigoCIE10UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * The data used to update CodigoCIE10s.
     */
    data: XOR<CodigoCIE10UpdateManyMutationInput, CodigoCIE10UncheckedUpdateManyInput>
    /**
     * Filter which CodigoCIE10s to update
     */
    where?: CodigoCIE10WhereInput
    /**
     * Limit how many CodigoCIE10s to update.
     */
    limit?: number
  }

  /**
   * CodigoCIE10 upsert
   */
  export type CodigoCIE10UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
    /**
     * The filter to search for the CodigoCIE10 to update in case it exists.
     */
    where: CodigoCIE10WhereUniqueInput
    /**
     * In case the CodigoCIE10 found by the `where` argument doesn't exist, create a new CodigoCIE10 with this data.
     */
    create: XOR<CodigoCIE10CreateInput, CodigoCIE10UncheckedCreateInput>
    /**
     * In case the CodigoCIE10 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CodigoCIE10UpdateInput, CodigoCIE10UncheckedUpdateInput>
  }

  /**
   * CodigoCIE10 delete
   */
  export type CodigoCIE10DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
    /**
     * Filter which CodigoCIE10 to delete.
     */
    where: CodigoCIE10WhereUniqueInput
  }

  /**
   * CodigoCIE10 deleteMany
   */
  export type CodigoCIE10DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodigoCIE10s to delete
     */
    where?: CodigoCIE10WhereInput
    /**
     * Limit how many CodigoCIE10s to delete.
     */
    limit?: number
  }

  /**
   * CodigoCIE10.diagnosticos
   */
  export type CodigoCIE10$diagnosticosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    where?: DiagnosticoWhereInput
    orderBy?: DiagnosticoOrderByWithRelationInput | DiagnosticoOrderByWithRelationInput[]
    cursor?: DiagnosticoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiagnosticoScalarFieldEnum | DiagnosticoScalarFieldEnum[]
  }

  /**
   * CodigoCIE10 without action
   */
  export type CodigoCIE10DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodigoCIE10
     */
    select?: CodigoCIE10Select<ExtArgs> | null
    /**
     * Omit specific fields from the CodigoCIE10
     */
    omit?: CodigoCIE10Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodigoCIE10Include<ExtArgs> | null
  }


  /**
   * Model Diagnostico
   */

  export type AggregateDiagnostico = {
    _count: DiagnosticoCountAggregateOutputType | null
    _avg: DiagnosticoAvgAggregateOutputType | null
    _sum: DiagnosticoSumAggregateOutputType | null
    _min: DiagnosticoMinAggregateOutputType | null
    _max: DiagnosticoMaxAggregateOutputType | null
  }

  export type DiagnosticoAvgAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type DiagnosticoSumAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type DiagnosticoMinAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    codigoCIE10Id: string | null
    tipo: $Enums.TipoDiagnostico | null
    descripcionAdicional: string | null
    fechaRegistro: Date | null
  }

  export type DiagnosticoMaxAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    codigoCIE10Id: string | null
    tipo: $Enums.TipoDiagnostico | null
    descripcionAdicional: string | null
    fechaRegistro: Date | null
  }

  export type DiagnosticoCountAggregateOutputType = {
    id: number
    episodioClinicoId: number
    codigoCIE10Id: number
    tipo: number
    descripcionAdicional: number
    fechaRegistro: number
    _all: number
  }


  export type DiagnosticoAvgAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type DiagnosticoSumAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type DiagnosticoMinAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    codigoCIE10Id?: true
    tipo?: true
    descripcionAdicional?: true
    fechaRegistro?: true
  }

  export type DiagnosticoMaxAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    codigoCIE10Id?: true
    tipo?: true
    descripcionAdicional?: true
    fechaRegistro?: true
  }

  export type DiagnosticoCountAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    codigoCIE10Id?: true
    tipo?: true
    descripcionAdicional?: true
    fechaRegistro?: true
    _all?: true
  }

  export type DiagnosticoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Diagnostico to aggregate.
     */
    where?: DiagnosticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diagnosticos to fetch.
     */
    orderBy?: DiagnosticoOrderByWithRelationInput | DiagnosticoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiagnosticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diagnosticos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diagnosticos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Diagnosticos
    **/
    _count?: true | DiagnosticoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiagnosticoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiagnosticoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiagnosticoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiagnosticoMaxAggregateInputType
  }

  export type GetDiagnosticoAggregateType<T extends DiagnosticoAggregateArgs> = {
        [P in keyof T & keyof AggregateDiagnostico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiagnostico[P]>
      : GetScalarType<T[P], AggregateDiagnostico[P]>
  }




  export type DiagnosticoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiagnosticoWhereInput
    orderBy?: DiagnosticoOrderByWithAggregationInput | DiagnosticoOrderByWithAggregationInput[]
    by: DiagnosticoScalarFieldEnum[] | DiagnosticoScalarFieldEnum
    having?: DiagnosticoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiagnosticoCountAggregateInputType | true
    _avg?: DiagnosticoAvgAggregateInputType
    _sum?: DiagnosticoSumAggregateInputType
    _min?: DiagnosticoMinAggregateInputType
    _max?: DiagnosticoMaxAggregateInputType
  }

  export type DiagnosticoGroupByOutputType = {
    id: number
    episodioClinicoId: number
    codigoCIE10Id: string
    tipo: $Enums.TipoDiagnostico
    descripcionAdicional: string | null
    fechaRegistro: Date
    _count: DiagnosticoCountAggregateOutputType | null
    _avg: DiagnosticoAvgAggregateOutputType | null
    _sum: DiagnosticoSumAggregateOutputType | null
    _min: DiagnosticoMinAggregateOutputType | null
    _max: DiagnosticoMaxAggregateOutputType | null
  }

  type GetDiagnosticoGroupByPayload<T extends DiagnosticoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiagnosticoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiagnosticoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiagnosticoGroupByOutputType[P]>
            : GetScalarType<T[P], DiagnosticoGroupByOutputType[P]>
        }
      >
    >


  export type DiagnosticoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    codigoCIE10Id?: boolean
    tipo?: boolean
    descripcionAdicional?: boolean
    fechaRegistro?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
    codigoCIE10?: boolean | CodigoCIE10DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["diagnostico"]>

  export type DiagnosticoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    codigoCIE10Id?: boolean
    tipo?: boolean
    descripcionAdicional?: boolean
    fechaRegistro?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
    codigoCIE10?: boolean | CodigoCIE10DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["diagnostico"]>

  export type DiagnosticoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    codigoCIE10Id?: boolean
    tipo?: boolean
    descripcionAdicional?: boolean
    fechaRegistro?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
    codigoCIE10?: boolean | CodigoCIE10DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["diagnostico"]>

  export type DiagnosticoSelectScalar = {
    id?: boolean
    episodioClinicoId?: boolean
    codigoCIE10Id?: boolean
    tipo?: boolean
    descripcionAdicional?: boolean
    fechaRegistro?: boolean
  }

  export type DiagnosticoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodioClinicoId" | "codigoCIE10Id" | "tipo" | "descripcionAdicional" | "fechaRegistro", ExtArgs["result"]["diagnostico"]>
  export type DiagnosticoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
    codigoCIE10?: boolean | CodigoCIE10DefaultArgs<ExtArgs>
  }
  export type DiagnosticoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
    codigoCIE10?: boolean | CodigoCIE10DefaultArgs<ExtArgs>
  }
  export type DiagnosticoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
    codigoCIE10?: boolean | CodigoCIE10DefaultArgs<ExtArgs>
  }

  export type $DiagnosticoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Diagnostico"
    objects: {
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs>
      codigoCIE10: Prisma.$CodigoCIE10Payload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodioClinicoId: number
      codigoCIE10Id: string
      tipo: $Enums.TipoDiagnostico
      descripcionAdicional: string | null
      fechaRegistro: Date
    }, ExtArgs["result"]["diagnostico"]>
    composites: {}
  }

  type DiagnosticoGetPayload<S extends boolean | null | undefined | DiagnosticoDefaultArgs> = $Result.GetResult<Prisma.$DiagnosticoPayload, S>

  type DiagnosticoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiagnosticoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiagnosticoCountAggregateInputType | true
    }

  export interface DiagnosticoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Diagnostico'], meta: { name: 'Diagnostico' } }
    /**
     * Find zero or one Diagnostico that matches the filter.
     * @param {DiagnosticoFindUniqueArgs} args - Arguments to find a Diagnostico
     * @example
     * // Get one Diagnostico
     * const diagnostico = await prisma.diagnostico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiagnosticoFindUniqueArgs>(args: SelectSubset<T, DiagnosticoFindUniqueArgs<ExtArgs>>): Prisma__DiagnosticoClient<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Diagnostico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiagnosticoFindUniqueOrThrowArgs} args - Arguments to find a Diagnostico
     * @example
     * // Get one Diagnostico
     * const diagnostico = await prisma.diagnostico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiagnosticoFindUniqueOrThrowArgs>(args: SelectSubset<T, DiagnosticoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiagnosticoClient<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Diagnostico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticoFindFirstArgs} args - Arguments to find a Diagnostico
     * @example
     * // Get one Diagnostico
     * const diagnostico = await prisma.diagnostico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiagnosticoFindFirstArgs>(args?: SelectSubset<T, DiagnosticoFindFirstArgs<ExtArgs>>): Prisma__DiagnosticoClient<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Diagnostico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticoFindFirstOrThrowArgs} args - Arguments to find a Diagnostico
     * @example
     * // Get one Diagnostico
     * const diagnostico = await prisma.diagnostico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiagnosticoFindFirstOrThrowArgs>(args?: SelectSubset<T, DiagnosticoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiagnosticoClient<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Diagnosticos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Diagnosticos
     * const diagnosticos = await prisma.diagnostico.findMany()
     * 
     * // Get first 10 Diagnosticos
     * const diagnosticos = await prisma.diagnostico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const diagnosticoWithIdOnly = await prisma.diagnostico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiagnosticoFindManyArgs>(args?: SelectSubset<T, DiagnosticoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Diagnostico.
     * @param {DiagnosticoCreateArgs} args - Arguments to create a Diagnostico.
     * @example
     * // Create one Diagnostico
     * const Diagnostico = await prisma.diagnostico.create({
     *   data: {
     *     // ... data to create a Diagnostico
     *   }
     * })
     * 
     */
    create<T extends DiagnosticoCreateArgs>(args: SelectSubset<T, DiagnosticoCreateArgs<ExtArgs>>): Prisma__DiagnosticoClient<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Diagnosticos.
     * @param {DiagnosticoCreateManyArgs} args - Arguments to create many Diagnosticos.
     * @example
     * // Create many Diagnosticos
     * const diagnostico = await prisma.diagnostico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiagnosticoCreateManyArgs>(args?: SelectSubset<T, DiagnosticoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Diagnosticos and returns the data saved in the database.
     * @param {DiagnosticoCreateManyAndReturnArgs} args - Arguments to create many Diagnosticos.
     * @example
     * // Create many Diagnosticos
     * const diagnostico = await prisma.diagnostico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Diagnosticos and only return the `id`
     * const diagnosticoWithIdOnly = await prisma.diagnostico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiagnosticoCreateManyAndReturnArgs>(args?: SelectSubset<T, DiagnosticoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Diagnostico.
     * @param {DiagnosticoDeleteArgs} args - Arguments to delete one Diagnostico.
     * @example
     * // Delete one Diagnostico
     * const Diagnostico = await prisma.diagnostico.delete({
     *   where: {
     *     // ... filter to delete one Diagnostico
     *   }
     * })
     * 
     */
    delete<T extends DiagnosticoDeleteArgs>(args: SelectSubset<T, DiagnosticoDeleteArgs<ExtArgs>>): Prisma__DiagnosticoClient<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Diagnostico.
     * @param {DiagnosticoUpdateArgs} args - Arguments to update one Diagnostico.
     * @example
     * // Update one Diagnostico
     * const diagnostico = await prisma.diagnostico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiagnosticoUpdateArgs>(args: SelectSubset<T, DiagnosticoUpdateArgs<ExtArgs>>): Prisma__DiagnosticoClient<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Diagnosticos.
     * @param {DiagnosticoDeleteManyArgs} args - Arguments to filter Diagnosticos to delete.
     * @example
     * // Delete a few Diagnosticos
     * const { count } = await prisma.diagnostico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiagnosticoDeleteManyArgs>(args?: SelectSubset<T, DiagnosticoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Diagnosticos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Diagnosticos
     * const diagnostico = await prisma.diagnostico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiagnosticoUpdateManyArgs>(args: SelectSubset<T, DiagnosticoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Diagnosticos and returns the data updated in the database.
     * @param {DiagnosticoUpdateManyAndReturnArgs} args - Arguments to update many Diagnosticos.
     * @example
     * // Update many Diagnosticos
     * const diagnostico = await prisma.diagnostico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Diagnosticos and only return the `id`
     * const diagnosticoWithIdOnly = await prisma.diagnostico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DiagnosticoUpdateManyAndReturnArgs>(args: SelectSubset<T, DiagnosticoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Diagnostico.
     * @param {DiagnosticoUpsertArgs} args - Arguments to update or create a Diagnostico.
     * @example
     * // Update or create a Diagnostico
     * const diagnostico = await prisma.diagnostico.upsert({
     *   create: {
     *     // ... data to create a Diagnostico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Diagnostico we want to update
     *   }
     * })
     */
    upsert<T extends DiagnosticoUpsertArgs>(args: SelectSubset<T, DiagnosticoUpsertArgs<ExtArgs>>): Prisma__DiagnosticoClient<$Result.GetResult<Prisma.$DiagnosticoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Diagnosticos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticoCountArgs} args - Arguments to filter Diagnosticos to count.
     * @example
     * // Count the number of Diagnosticos
     * const count = await prisma.diagnostico.count({
     *   where: {
     *     // ... the filter for the Diagnosticos we want to count
     *   }
     * })
    **/
    count<T extends DiagnosticoCountArgs>(
      args?: Subset<T, DiagnosticoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiagnosticoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Diagnostico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiagnosticoAggregateArgs>(args: Subset<T, DiagnosticoAggregateArgs>): Prisma.PrismaPromise<GetDiagnosticoAggregateType<T>>

    /**
     * Group by Diagnostico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiagnosticoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiagnosticoGroupByArgs['orderBy'] }
        : { orderBy?: DiagnosticoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiagnosticoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiagnosticoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Diagnostico model
   */
  readonly fields: DiagnosticoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Diagnostico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiagnosticoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodioClinico<T extends EpisodioClincoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClincoDefaultArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    codigoCIE10<T extends CodigoCIE10DefaultArgs<ExtArgs> = {}>(args?: Subset<T, CodigoCIE10DefaultArgs<ExtArgs>>): Prisma__CodigoCIE10Client<$Result.GetResult<Prisma.$CodigoCIE10Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Diagnostico model
   */
  interface DiagnosticoFieldRefs {
    readonly id: FieldRef<"Diagnostico", 'Int'>
    readonly episodioClinicoId: FieldRef<"Diagnostico", 'Int'>
    readonly codigoCIE10Id: FieldRef<"Diagnostico", 'String'>
    readonly tipo: FieldRef<"Diagnostico", 'TipoDiagnostico'>
    readonly descripcionAdicional: FieldRef<"Diagnostico", 'String'>
    readonly fechaRegistro: FieldRef<"Diagnostico", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Diagnostico findUnique
   */
  export type DiagnosticoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    /**
     * Filter, which Diagnostico to fetch.
     */
    where: DiagnosticoWhereUniqueInput
  }

  /**
   * Diagnostico findUniqueOrThrow
   */
  export type DiagnosticoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    /**
     * Filter, which Diagnostico to fetch.
     */
    where: DiagnosticoWhereUniqueInput
  }

  /**
   * Diagnostico findFirst
   */
  export type DiagnosticoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    /**
     * Filter, which Diagnostico to fetch.
     */
    where?: DiagnosticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diagnosticos to fetch.
     */
    orderBy?: DiagnosticoOrderByWithRelationInput | DiagnosticoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Diagnosticos.
     */
    cursor?: DiagnosticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diagnosticos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diagnosticos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Diagnosticos.
     */
    distinct?: DiagnosticoScalarFieldEnum | DiagnosticoScalarFieldEnum[]
  }

  /**
   * Diagnostico findFirstOrThrow
   */
  export type DiagnosticoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    /**
     * Filter, which Diagnostico to fetch.
     */
    where?: DiagnosticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diagnosticos to fetch.
     */
    orderBy?: DiagnosticoOrderByWithRelationInput | DiagnosticoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Diagnosticos.
     */
    cursor?: DiagnosticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diagnosticos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diagnosticos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Diagnosticos.
     */
    distinct?: DiagnosticoScalarFieldEnum | DiagnosticoScalarFieldEnum[]
  }

  /**
   * Diagnostico findMany
   */
  export type DiagnosticoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    /**
     * Filter, which Diagnosticos to fetch.
     */
    where?: DiagnosticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diagnosticos to fetch.
     */
    orderBy?: DiagnosticoOrderByWithRelationInput | DiagnosticoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Diagnosticos.
     */
    cursor?: DiagnosticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diagnosticos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diagnosticos.
     */
    skip?: number
    distinct?: DiagnosticoScalarFieldEnum | DiagnosticoScalarFieldEnum[]
  }

  /**
   * Diagnostico create
   */
  export type DiagnosticoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    /**
     * The data needed to create a Diagnostico.
     */
    data: XOR<DiagnosticoCreateInput, DiagnosticoUncheckedCreateInput>
  }

  /**
   * Diagnostico createMany
   */
  export type DiagnosticoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Diagnosticos.
     */
    data: DiagnosticoCreateManyInput | DiagnosticoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Diagnostico createManyAndReturn
   */
  export type DiagnosticoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * The data used to create many Diagnosticos.
     */
    data: DiagnosticoCreateManyInput | DiagnosticoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Diagnostico update
   */
  export type DiagnosticoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    /**
     * The data needed to update a Diagnostico.
     */
    data: XOR<DiagnosticoUpdateInput, DiagnosticoUncheckedUpdateInput>
    /**
     * Choose, which Diagnostico to update.
     */
    where: DiagnosticoWhereUniqueInput
  }

  /**
   * Diagnostico updateMany
   */
  export type DiagnosticoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Diagnosticos.
     */
    data: XOR<DiagnosticoUpdateManyMutationInput, DiagnosticoUncheckedUpdateManyInput>
    /**
     * Filter which Diagnosticos to update
     */
    where?: DiagnosticoWhereInput
    /**
     * Limit how many Diagnosticos to update.
     */
    limit?: number
  }

  /**
   * Diagnostico updateManyAndReturn
   */
  export type DiagnosticoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * The data used to update Diagnosticos.
     */
    data: XOR<DiagnosticoUpdateManyMutationInput, DiagnosticoUncheckedUpdateManyInput>
    /**
     * Filter which Diagnosticos to update
     */
    where?: DiagnosticoWhereInput
    /**
     * Limit how many Diagnosticos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Diagnostico upsert
   */
  export type DiagnosticoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    /**
     * The filter to search for the Diagnostico to update in case it exists.
     */
    where: DiagnosticoWhereUniqueInput
    /**
     * In case the Diagnostico found by the `where` argument doesn't exist, create a new Diagnostico with this data.
     */
    create: XOR<DiagnosticoCreateInput, DiagnosticoUncheckedCreateInput>
    /**
     * In case the Diagnostico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiagnosticoUpdateInput, DiagnosticoUncheckedUpdateInput>
  }

  /**
   * Diagnostico delete
   */
  export type DiagnosticoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
    /**
     * Filter which Diagnostico to delete.
     */
    where: DiagnosticoWhereUniqueInput
  }

  /**
   * Diagnostico deleteMany
   */
  export type DiagnosticoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Diagnosticos to delete
     */
    where?: DiagnosticoWhereInput
    /**
     * Limit how many Diagnosticos to delete.
     */
    limit?: number
  }

  /**
   * Diagnostico without action
   */
  export type DiagnosticoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diagnostico
     */
    select?: DiagnosticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Diagnostico
     */
    omit?: DiagnosticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticoInclude<ExtArgs> | null
  }


  /**
   * Model Prescripcion
   */

  export type AggregatePrescripcion = {
    _count: PrescripcionCountAggregateOutputType | null
    _avg: PrescripcionAvgAggregateOutputType | null
    _sum: PrescripcionSumAggregateOutputType | null
    _min: PrescripcionMinAggregateOutputType | null
    _max: PrescripcionMaxAggregateOutputType | null
  }

  export type PrescripcionAvgAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type PrescripcionSumAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type PrescripcionMinAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    nombreMedicamento: string | null
    dosis: string | null
    viaAdministracion: string | null
    frecuencia: string | null
    duracion: string | null
    indicaciones: string | null
    fechaPrescripcion: Date | null
  }

  export type PrescripcionMaxAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    nombreMedicamento: string | null
    dosis: string | null
    viaAdministracion: string | null
    frecuencia: string | null
    duracion: string | null
    indicaciones: string | null
    fechaPrescripcion: Date | null
  }

  export type PrescripcionCountAggregateOutputType = {
    id: number
    episodioClinicoId: number
    nombreMedicamento: number
    dosis: number
    viaAdministracion: number
    frecuencia: number
    duracion: number
    indicaciones: number
    fechaPrescripcion: number
    _all: number
  }


  export type PrescripcionAvgAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type PrescripcionSumAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type PrescripcionMinAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    nombreMedicamento?: true
    dosis?: true
    viaAdministracion?: true
    frecuencia?: true
    duracion?: true
    indicaciones?: true
    fechaPrescripcion?: true
  }

  export type PrescripcionMaxAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    nombreMedicamento?: true
    dosis?: true
    viaAdministracion?: true
    frecuencia?: true
    duracion?: true
    indicaciones?: true
    fechaPrescripcion?: true
  }

  export type PrescripcionCountAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    nombreMedicamento?: true
    dosis?: true
    viaAdministracion?: true
    frecuencia?: true
    duracion?: true
    indicaciones?: true
    fechaPrescripcion?: true
    _all?: true
  }

  export type PrescripcionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prescripcion to aggregate.
     */
    where?: PrescripcionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescripcions to fetch.
     */
    orderBy?: PrescripcionOrderByWithRelationInput | PrescripcionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrescripcionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescripcions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescripcions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prescripcions
    **/
    _count?: true | PrescripcionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrescripcionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrescripcionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrescripcionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrescripcionMaxAggregateInputType
  }

  export type GetPrescripcionAggregateType<T extends PrescripcionAggregateArgs> = {
        [P in keyof T & keyof AggregatePrescripcion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrescripcion[P]>
      : GetScalarType<T[P], AggregatePrescripcion[P]>
  }




  export type PrescripcionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescripcionWhereInput
    orderBy?: PrescripcionOrderByWithAggregationInput | PrescripcionOrderByWithAggregationInput[]
    by: PrescripcionScalarFieldEnum[] | PrescripcionScalarFieldEnum
    having?: PrescripcionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrescripcionCountAggregateInputType | true
    _avg?: PrescripcionAvgAggregateInputType
    _sum?: PrescripcionSumAggregateInputType
    _min?: PrescripcionMinAggregateInputType
    _max?: PrescripcionMaxAggregateInputType
  }

  export type PrescripcionGroupByOutputType = {
    id: number
    episodioClinicoId: number
    nombreMedicamento: string
    dosis: string
    viaAdministracion: string
    frecuencia: string
    duracion: string
    indicaciones: string | null
    fechaPrescripcion: Date
    _count: PrescripcionCountAggregateOutputType | null
    _avg: PrescripcionAvgAggregateOutputType | null
    _sum: PrescripcionSumAggregateOutputType | null
    _min: PrescripcionMinAggregateOutputType | null
    _max: PrescripcionMaxAggregateOutputType | null
  }

  type GetPrescripcionGroupByPayload<T extends PrescripcionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrescripcionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrescripcionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrescripcionGroupByOutputType[P]>
            : GetScalarType<T[P], PrescripcionGroupByOutputType[P]>
        }
      >
    >


  export type PrescripcionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    nombreMedicamento?: boolean
    dosis?: boolean
    viaAdministracion?: boolean
    frecuencia?: boolean
    duracion?: boolean
    indicaciones?: boolean
    fechaPrescripcion?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescripcion"]>

  export type PrescripcionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    nombreMedicamento?: boolean
    dosis?: boolean
    viaAdministracion?: boolean
    frecuencia?: boolean
    duracion?: boolean
    indicaciones?: boolean
    fechaPrescripcion?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescripcion"]>

  export type PrescripcionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    nombreMedicamento?: boolean
    dosis?: boolean
    viaAdministracion?: boolean
    frecuencia?: boolean
    duracion?: boolean
    indicaciones?: boolean
    fechaPrescripcion?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescripcion"]>

  export type PrescripcionSelectScalar = {
    id?: boolean
    episodioClinicoId?: boolean
    nombreMedicamento?: boolean
    dosis?: boolean
    viaAdministracion?: boolean
    frecuencia?: boolean
    duracion?: boolean
    indicaciones?: boolean
    fechaPrescripcion?: boolean
  }

  export type PrescripcionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodioClinicoId" | "nombreMedicamento" | "dosis" | "viaAdministracion" | "frecuencia" | "duracion" | "indicaciones" | "fechaPrescripcion", ExtArgs["result"]["prescripcion"]>
  export type PrescripcionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type PrescripcionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type PrescripcionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }

  export type $PrescripcionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Prescripcion"
    objects: {
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodioClinicoId: number
      nombreMedicamento: string
      dosis: string
      viaAdministracion: string
      frecuencia: string
      duracion: string
      indicaciones: string | null
      fechaPrescripcion: Date
    }, ExtArgs["result"]["prescripcion"]>
    composites: {}
  }

  type PrescripcionGetPayload<S extends boolean | null | undefined | PrescripcionDefaultArgs> = $Result.GetResult<Prisma.$PrescripcionPayload, S>

  type PrescripcionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrescripcionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrescripcionCountAggregateInputType | true
    }

  export interface PrescripcionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prescripcion'], meta: { name: 'Prescripcion' } }
    /**
     * Find zero or one Prescripcion that matches the filter.
     * @param {PrescripcionFindUniqueArgs} args - Arguments to find a Prescripcion
     * @example
     * // Get one Prescripcion
     * const prescripcion = await prisma.prescripcion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrescripcionFindUniqueArgs>(args: SelectSubset<T, PrescripcionFindUniqueArgs<ExtArgs>>): Prisma__PrescripcionClient<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Prescripcion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrescripcionFindUniqueOrThrowArgs} args - Arguments to find a Prescripcion
     * @example
     * // Get one Prescripcion
     * const prescripcion = await prisma.prescripcion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrescripcionFindUniqueOrThrowArgs>(args: SelectSubset<T, PrescripcionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrescripcionClient<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Prescripcion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescripcionFindFirstArgs} args - Arguments to find a Prescripcion
     * @example
     * // Get one Prescripcion
     * const prescripcion = await prisma.prescripcion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrescripcionFindFirstArgs>(args?: SelectSubset<T, PrescripcionFindFirstArgs<ExtArgs>>): Prisma__PrescripcionClient<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Prescripcion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescripcionFindFirstOrThrowArgs} args - Arguments to find a Prescripcion
     * @example
     * // Get one Prescripcion
     * const prescripcion = await prisma.prescripcion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrescripcionFindFirstOrThrowArgs>(args?: SelectSubset<T, PrescripcionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrescripcionClient<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Prescripcions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescripcionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prescripcions
     * const prescripcions = await prisma.prescripcion.findMany()
     * 
     * // Get first 10 Prescripcions
     * const prescripcions = await prisma.prescripcion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prescripcionWithIdOnly = await prisma.prescripcion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrescripcionFindManyArgs>(args?: SelectSubset<T, PrescripcionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Prescripcion.
     * @param {PrescripcionCreateArgs} args - Arguments to create a Prescripcion.
     * @example
     * // Create one Prescripcion
     * const Prescripcion = await prisma.prescripcion.create({
     *   data: {
     *     // ... data to create a Prescripcion
     *   }
     * })
     * 
     */
    create<T extends PrescripcionCreateArgs>(args: SelectSubset<T, PrescripcionCreateArgs<ExtArgs>>): Prisma__PrescripcionClient<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Prescripcions.
     * @param {PrescripcionCreateManyArgs} args - Arguments to create many Prescripcions.
     * @example
     * // Create many Prescripcions
     * const prescripcion = await prisma.prescripcion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrescripcionCreateManyArgs>(args?: SelectSubset<T, PrescripcionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Prescripcions and returns the data saved in the database.
     * @param {PrescripcionCreateManyAndReturnArgs} args - Arguments to create many Prescripcions.
     * @example
     * // Create many Prescripcions
     * const prescripcion = await prisma.prescripcion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Prescripcions and only return the `id`
     * const prescripcionWithIdOnly = await prisma.prescripcion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrescripcionCreateManyAndReturnArgs>(args?: SelectSubset<T, PrescripcionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Prescripcion.
     * @param {PrescripcionDeleteArgs} args - Arguments to delete one Prescripcion.
     * @example
     * // Delete one Prescripcion
     * const Prescripcion = await prisma.prescripcion.delete({
     *   where: {
     *     // ... filter to delete one Prescripcion
     *   }
     * })
     * 
     */
    delete<T extends PrescripcionDeleteArgs>(args: SelectSubset<T, PrescripcionDeleteArgs<ExtArgs>>): Prisma__PrescripcionClient<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Prescripcion.
     * @param {PrescripcionUpdateArgs} args - Arguments to update one Prescripcion.
     * @example
     * // Update one Prescripcion
     * const prescripcion = await prisma.prescripcion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrescripcionUpdateArgs>(args: SelectSubset<T, PrescripcionUpdateArgs<ExtArgs>>): Prisma__PrescripcionClient<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Prescripcions.
     * @param {PrescripcionDeleteManyArgs} args - Arguments to filter Prescripcions to delete.
     * @example
     * // Delete a few Prescripcions
     * const { count } = await prisma.prescripcion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrescripcionDeleteManyArgs>(args?: SelectSubset<T, PrescripcionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prescripcions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescripcionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prescripcions
     * const prescripcion = await prisma.prescripcion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrescripcionUpdateManyArgs>(args: SelectSubset<T, PrescripcionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prescripcions and returns the data updated in the database.
     * @param {PrescripcionUpdateManyAndReturnArgs} args - Arguments to update many Prescripcions.
     * @example
     * // Update many Prescripcions
     * const prescripcion = await prisma.prescripcion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Prescripcions and only return the `id`
     * const prescripcionWithIdOnly = await prisma.prescripcion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrescripcionUpdateManyAndReturnArgs>(args: SelectSubset<T, PrescripcionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Prescripcion.
     * @param {PrescripcionUpsertArgs} args - Arguments to update or create a Prescripcion.
     * @example
     * // Update or create a Prescripcion
     * const prescripcion = await prisma.prescripcion.upsert({
     *   create: {
     *     // ... data to create a Prescripcion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prescripcion we want to update
     *   }
     * })
     */
    upsert<T extends PrescripcionUpsertArgs>(args: SelectSubset<T, PrescripcionUpsertArgs<ExtArgs>>): Prisma__PrescripcionClient<$Result.GetResult<Prisma.$PrescripcionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Prescripcions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescripcionCountArgs} args - Arguments to filter Prescripcions to count.
     * @example
     * // Count the number of Prescripcions
     * const count = await prisma.prescripcion.count({
     *   where: {
     *     // ... the filter for the Prescripcions we want to count
     *   }
     * })
    **/
    count<T extends PrescripcionCountArgs>(
      args?: Subset<T, PrescripcionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrescripcionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prescripcion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescripcionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrescripcionAggregateArgs>(args: Subset<T, PrescripcionAggregateArgs>): Prisma.PrismaPromise<GetPrescripcionAggregateType<T>>

    /**
     * Group by Prescripcion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescripcionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrescripcionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrescripcionGroupByArgs['orderBy'] }
        : { orderBy?: PrescripcionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrescripcionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrescripcionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prescripcion model
   */
  readonly fields: PrescripcionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prescripcion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrescripcionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodioClinico<T extends EpisodioClincoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClincoDefaultArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Prescripcion model
   */
  interface PrescripcionFieldRefs {
    readonly id: FieldRef<"Prescripcion", 'Int'>
    readonly episodioClinicoId: FieldRef<"Prescripcion", 'Int'>
    readonly nombreMedicamento: FieldRef<"Prescripcion", 'String'>
    readonly dosis: FieldRef<"Prescripcion", 'String'>
    readonly viaAdministracion: FieldRef<"Prescripcion", 'String'>
    readonly frecuencia: FieldRef<"Prescripcion", 'String'>
    readonly duracion: FieldRef<"Prescripcion", 'String'>
    readonly indicaciones: FieldRef<"Prescripcion", 'String'>
    readonly fechaPrescripcion: FieldRef<"Prescripcion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Prescripcion findUnique
   */
  export type PrescripcionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    /**
     * Filter, which Prescripcion to fetch.
     */
    where: PrescripcionWhereUniqueInput
  }

  /**
   * Prescripcion findUniqueOrThrow
   */
  export type PrescripcionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    /**
     * Filter, which Prescripcion to fetch.
     */
    where: PrescripcionWhereUniqueInput
  }

  /**
   * Prescripcion findFirst
   */
  export type PrescripcionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    /**
     * Filter, which Prescripcion to fetch.
     */
    where?: PrescripcionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescripcions to fetch.
     */
    orderBy?: PrescripcionOrderByWithRelationInput | PrescripcionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prescripcions.
     */
    cursor?: PrescripcionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescripcions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescripcions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prescripcions.
     */
    distinct?: PrescripcionScalarFieldEnum | PrescripcionScalarFieldEnum[]
  }

  /**
   * Prescripcion findFirstOrThrow
   */
  export type PrescripcionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    /**
     * Filter, which Prescripcion to fetch.
     */
    where?: PrescripcionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescripcions to fetch.
     */
    orderBy?: PrescripcionOrderByWithRelationInput | PrescripcionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prescripcions.
     */
    cursor?: PrescripcionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescripcions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescripcions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prescripcions.
     */
    distinct?: PrescripcionScalarFieldEnum | PrescripcionScalarFieldEnum[]
  }

  /**
   * Prescripcion findMany
   */
  export type PrescripcionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    /**
     * Filter, which Prescripcions to fetch.
     */
    where?: PrescripcionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescripcions to fetch.
     */
    orderBy?: PrescripcionOrderByWithRelationInput | PrescripcionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prescripcions.
     */
    cursor?: PrescripcionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescripcions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescripcions.
     */
    skip?: number
    distinct?: PrescripcionScalarFieldEnum | PrescripcionScalarFieldEnum[]
  }

  /**
   * Prescripcion create
   */
  export type PrescripcionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    /**
     * The data needed to create a Prescripcion.
     */
    data: XOR<PrescripcionCreateInput, PrescripcionUncheckedCreateInput>
  }

  /**
   * Prescripcion createMany
   */
  export type PrescripcionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prescripcions.
     */
    data: PrescripcionCreateManyInput | PrescripcionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Prescripcion createManyAndReturn
   */
  export type PrescripcionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * The data used to create many Prescripcions.
     */
    data: PrescripcionCreateManyInput | PrescripcionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Prescripcion update
   */
  export type PrescripcionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    /**
     * The data needed to update a Prescripcion.
     */
    data: XOR<PrescripcionUpdateInput, PrescripcionUncheckedUpdateInput>
    /**
     * Choose, which Prescripcion to update.
     */
    where: PrescripcionWhereUniqueInput
  }

  /**
   * Prescripcion updateMany
   */
  export type PrescripcionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prescripcions.
     */
    data: XOR<PrescripcionUpdateManyMutationInput, PrescripcionUncheckedUpdateManyInput>
    /**
     * Filter which Prescripcions to update
     */
    where?: PrescripcionWhereInput
    /**
     * Limit how many Prescripcions to update.
     */
    limit?: number
  }

  /**
   * Prescripcion updateManyAndReturn
   */
  export type PrescripcionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * The data used to update Prescripcions.
     */
    data: XOR<PrescripcionUpdateManyMutationInput, PrescripcionUncheckedUpdateManyInput>
    /**
     * Filter which Prescripcions to update
     */
    where?: PrescripcionWhereInput
    /**
     * Limit how many Prescripcions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Prescripcion upsert
   */
  export type PrescripcionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    /**
     * The filter to search for the Prescripcion to update in case it exists.
     */
    where: PrescripcionWhereUniqueInput
    /**
     * In case the Prescripcion found by the `where` argument doesn't exist, create a new Prescripcion with this data.
     */
    create: XOR<PrescripcionCreateInput, PrescripcionUncheckedCreateInput>
    /**
     * In case the Prescripcion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrescripcionUpdateInput, PrescripcionUncheckedUpdateInput>
  }

  /**
   * Prescripcion delete
   */
  export type PrescripcionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
    /**
     * Filter which Prescripcion to delete.
     */
    where: PrescripcionWhereUniqueInput
  }

  /**
   * Prescripcion deleteMany
   */
  export type PrescripcionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prescripcions to delete
     */
    where?: PrescripcionWhereInput
    /**
     * Limit how many Prescripcions to delete.
     */
    limit?: number
  }

  /**
   * Prescripcion without action
   */
  export type PrescripcionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescripcion
     */
    select?: PrescripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescripcion
     */
    omit?: PrescripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescripcionInclude<ExtArgs> | null
  }


  /**
   * Model DocumentoClinico
   */

  export type AggregateDocumentoClinico = {
    _count: DocumentoClinicoCountAggregateOutputType | null
    _avg: DocumentoClinicoAvgAggregateOutputType | null
    _sum: DocumentoClinicoSumAggregateOutputType | null
    _min: DocumentoClinicoMinAggregateOutputType | null
    _max: DocumentoClinicoMaxAggregateOutputType | null
  }

  export type DocumentoClinicoAvgAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type DocumentoClinicoSumAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type DocumentoClinicoMinAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    tipoDocumento: string | null
    titulo: string | null
    rutaArchivo: string | null
    contenido: Uint8Array | null
    formato: string | null
    fechaDocumento: Date | null
    fechaRegistro: Date | null
    observaciones: string | null
  }

  export type DocumentoClinicoMaxAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    tipoDocumento: string | null
    titulo: string | null
    rutaArchivo: string | null
    contenido: Uint8Array | null
    formato: string | null
    fechaDocumento: Date | null
    fechaRegistro: Date | null
    observaciones: string | null
  }

  export type DocumentoClinicoCountAggregateOutputType = {
    id: number
    episodioClinicoId: number
    tipoDocumento: number
    titulo: number
    rutaArchivo: number
    contenido: number
    formato: number
    fechaDocumento: number
    fechaRegistro: number
    observaciones: number
    _all: number
  }


  export type DocumentoClinicoAvgAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type DocumentoClinicoSumAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type DocumentoClinicoMinAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    tipoDocumento?: true
    titulo?: true
    rutaArchivo?: true
    contenido?: true
    formato?: true
    fechaDocumento?: true
    fechaRegistro?: true
    observaciones?: true
  }

  export type DocumentoClinicoMaxAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    tipoDocumento?: true
    titulo?: true
    rutaArchivo?: true
    contenido?: true
    formato?: true
    fechaDocumento?: true
    fechaRegistro?: true
    observaciones?: true
  }

  export type DocumentoClinicoCountAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    tipoDocumento?: true
    titulo?: true
    rutaArchivo?: true
    contenido?: true
    formato?: true
    fechaDocumento?: true
    fechaRegistro?: true
    observaciones?: true
    _all?: true
  }

  export type DocumentoClinicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentoClinico to aggregate.
     */
    where?: DocumentoClinicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentoClinicos to fetch.
     */
    orderBy?: DocumentoClinicoOrderByWithRelationInput | DocumentoClinicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentoClinicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentoClinicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentoClinicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentoClinicos
    **/
    _count?: true | DocumentoClinicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentoClinicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentoClinicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentoClinicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentoClinicoMaxAggregateInputType
  }

  export type GetDocumentoClinicoAggregateType<T extends DocumentoClinicoAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentoClinico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentoClinico[P]>
      : GetScalarType<T[P], AggregateDocumentoClinico[P]>
  }




  export type DocumentoClinicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoClinicoWhereInput
    orderBy?: DocumentoClinicoOrderByWithAggregationInput | DocumentoClinicoOrderByWithAggregationInput[]
    by: DocumentoClinicoScalarFieldEnum[] | DocumentoClinicoScalarFieldEnum
    having?: DocumentoClinicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentoClinicoCountAggregateInputType | true
    _avg?: DocumentoClinicoAvgAggregateInputType
    _sum?: DocumentoClinicoSumAggregateInputType
    _min?: DocumentoClinicoMinAggregateInputType
    _max?: DocumentoClinicoMaxAggregateInputType
  }

  export type DocumentoClinicoGroupByOutputType = {
    id: number
    episodioClinicoId: number
    tipoDocumento: string
    titulo: string
    rutaArchivo: string
    contenido: Uint8Array | null
    formato: string
    fechaDocumento: Date
    fechaRegistro: Date
    observaciones: string | null
    _count: DocumentoClinicoCountAggregateOutputType | null
    _avg: DocumentoClinicoAvgAggregateOutputType | null
    _sum: DocumentoClinicoSumAggregateOutputType | null
    _min: DocumentoClinicoMinAggregateOutputType | null
    _max: DocumentoClinicoMaxAggregateOutputType | null
  }

  type GetDocumentoClinicoGroupByPayload<T extends DocumentoClinicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentoClinicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentoClinicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentoClinicoGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentoClinicoGroupByOutputType[P]>
        }
      >
    >


  export type DocumentoClinicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    tipoDocumento?: boolean
    titulo?: boolean
    rutaArchivo?: boolean
    contenido?: boolean
    formato?: boolean
    fechaDocumento?: boolean
    fechaRegistro?: boolean
    observaciones?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentoClinico"]>

  export type DocumentoClinicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    tipoDocumento?: boolean
    titulo?: boolean
    rutaArchivo?: boolean
    contenido?: boolean
    formato?: boolean
    fechaDocumento?: boolean
    fechaRegistro?: boolean
    observaciones?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentoClinico"]>

  export type DocumentoClinicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    tipoDocumento?: boolean
    titulo?: boolean
    rutaArchivo?: boolean
    contenido?: boolean
    formato?: boolean
    fechaDocumento?: boolean
    fechaRegistro?: boolean
    observaciones?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentoClinico"]>

  export type DocumentoClinicoSelectScalar = {
    id?: boolean
    episodioClinicoId?: boolean
    tipoDocumento?: boolean
    titulo?: boolean
    rutaArchivo?: boolean
    contenido?: boolean
    formato?: boolean
    fechaDocumento?: boolean
    fechaRegistro?: boolean
    observaciones?: boolean
  }

  export type DocumentoClinicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodioClinicoId" | "tipoDocumento" | "titulo" | "rutaArchivo" | "contenido" | "formato" | "fechaDocumento" | "fechaRegistro" | "observaciones", ExtArgs["result"]["documentoClinico"]>
  export type DocumentoClinicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type DocumentoClinicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type DocumentoClinicoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }

  export type $DocumentoClinicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentoClinico"
    objects: {
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodioClinicoId: number
      tipoDocumento: string
      titulo: string
      rutaArchivo: string
      contenido: Uint8Array | null
      formato: string
      fechaDocumento: Date
      fechaRegistro: Date
      observaciones: string | null
    }, ExtArgs["result"]["documentoClinico"]>
    composites: {}
  }

  type DocumentoClinicoGetPayload<S extends boolean | null | undefined | DocumentoClinicoDefaultArgs> = $Result.GetResult<Prisma.$DocumentoClinicoPayload, S>

  type DocumentoClinicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentoClinicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentoClinicoCountAggregateInputType | true
    }

  export interface DocumentoClinicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentoClinico'], meta: { name: 'DocumentoClinico' } }
    /**
     * Find zero or one DocumentoClinico that matches the filter.
     * @param {DocumentoClinicoFindUniqueArgs} args - Arguments to find a DocumentoClinico
     * @example
     * // Get one DocumentoClinico
     * const documentoClinico = await prisma.documentoClinico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentoClinicoFindUniqueArgs>(args: SelectSubset<T, DocumentoClinicoFindUniqueArgs<ExtArgs>>): Prisma__DocumentoClinicoClient<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentoClinico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentoClinicoFindUniqueOrThrowArgs} args - Arguments to find a DocumentoClinico
     * @example
     * // Get one DocumentoClinico
     * const documentoClinico = await prisma.documentoClinico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentoClinicoFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentoClinicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentoClinicoClient<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentoClinico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoClinicoFindFirstArgs} args - Arguments to find a DocumentoClinico
     * @example
     * // Get one DocumentoClinico
     * const documentoClinico = await prisma.documentoClinico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentoClinicoFindFirstArgs>(args?: SelectSubset<T, DocumentoClinicoFindFirstArgs<ExtArgs>>): Prisma__DocumentoClinicoClient<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentoClinico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoClinicoFindFirstOrThrowArgs} args - Arguments to find a DocumentoClinico
     * @example
     * // Get one DocumentoClinico
     * const documentoClinico = await prisma.documentoClinico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentoClinicoFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentoClinicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentoClinicoClient<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentoClinicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoClinicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentoClinicos
     * const documentoClinicos = await prisma.documentoClinico.findMany()
     * 
     * // Get first 10 DocumentoClinicos
     * const documentoClinicos = await prisma.documentoClinico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentoClinicoWithIdOnly = await prisma.documentoClinico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentoClinicoFindManyArgs>(args?: SelectSubset<T, DocumentoClinicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentoClinico.
     * @param {DocumentoClinicoCreateArgs} args - Arguments to create a DocumentoClinico.
     * @example
     * // Create one DocumentoClinico
     * const DocumentoClinico = await prisma.documentoClinico.create({
     *   data: {
     *     // ... data to create a DocumentoClinico
     *   }
     * })
     * 
     */
    create<T extends DocumentoClinicoCreateArgs>(args: SelectSubset<T, DocumentoClinicoCreateArgs<ExtArgs>>): Prisma__DocumentoClinicoClient<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentoClinicos.
     * @param {DocumentoClinicoCreateManyArgs} args - Arguments to create many DocumentoClinicos.
     * @example
     * // Create many DocumentoClinicos
     * const documentoClinico = await prisma.documentoClinico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentoClinicoCreateManyArgs>(args?: SelectSubset<T, DocumentoClinicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentoClinicos and returns the data saved in the database.
     * @param {DocumentoClinicoCreateManyAndReturnArgs} args - Arguments to create many DocumentoClinicos.
     * @example
     * // Create many DocumentoClinicos
     * const documentoClinico = await prisma.documentoClinico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentoClinicos and only return the `id`
     * const documentoClinicoWithIdOnly = await prisma.documentoClinico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentoClinicoCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentoClinicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentoClinico.
     * @param {DocumentoClinicoDeleteArgs} args - Arguments to delete one DocumentoClinico.
     * @example
     * // Delete one DocumentoClinico
     * const DocumentoClinico = await prisma.documentoClinico.delete({
     *   where: {
     *     // ... filter to delete one DocumentoClinico
     *   }
     * })
     * 
     */
    delete<T extends DocumentoClinicoDeleteArgs>(args: SelectSubset<T, DocumentoClinicoDeleteArgs<ExtArgs>>): Prisma__DocumentoClinicoClient<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentoClinico.
     * @param {DocumentoClinicoUpdateArgs} args - Arguments to update one DocumentoClinico.
     * @example
     * // Update one DocumentoClinico
     * const documentoClinico = await prisma.documentoClinico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentoClinicoUpdateArgs>(args: SelectSubset<T, DocumentoClinicoUpdateArgs<ExtArgs>>): Prisma__DocumentoClinicoClient<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentoClinicos.
     * @param {DocumentoClinicoDeleteManyArgs} args - Arguments to filter DocumentoClinicos to delete.
     * @example
     * // Delete a few DocumentoClinicos
     * const { count } = await prisma.documentoClinico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentoClinicoDeleteManyArgs>(args?: SelectSubset<T, DocumentoClinicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentoClinicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoClinicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentoClinicos
     * const documentoClinico = await prisma.documentoClinico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentoClinicoUpdateManyArgs>(args: SelectSubset<T, DocumentoClinicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentoClinicos and returns the data updated in the database.
     * @param {DocumentoClinicoUpdateManyAndReturnArgs} args - Arguments to update many DocumentoClinicos.
     * @example
     * // Update many DocumentoClinicos
     * const documentoClinico = await prisma.documentoClinico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentoClinicos and only return the `id`
     * const documentoClinicoWithIdOnly = await prisma.documentoClinico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentoClinicoUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentoClinicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentoClinico.
     * @param {DocumentoClinicoUpsertArgs} args - Arguments to update or create a DocumentoClinico.
     * @example
     * // Update or create a DocumentoClinico
     * const documentoClinico = await prisma.documentoClinico.upsert({
     *   create: {
     *     // ... data to create a DocumentoClinico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentoClinico we want to update
     *   }
     * })
     */
    upsert<T extends DocumentoClinicoUpsertArgs>(args: SelectSubset<T, DocumentoClinicoUpsertArgs<ExtArgs>>): Prisma__DocumentoClinicoClient<$Result.GetResult<Prisma.$DocumentoClinicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentoClinicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoClinicoCountArgs} args - Arguments to filter DocumentoClinicos to count.
     * @example
     * // Count the number of DocumentoClinicos
     * const count = await prisma.documentoClinico.count({
     *   where: {
     *     // ... the filter for the DocumentoClinicos we want to count
     *   }
     * })
    **/
    count<T extends DocumentoClinicoCountArgs>(
      args?: Subset<T, DocumentoClinicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentoClinicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentoClinico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoClinicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentoClinicoAggregateArgs>(args: Subset<T, DocumentoClinicoAggregateArgs>): Prisma.PrismaPromise<GetDocumentoClinicoAggregateType<T>>

    /**
     * Group by DocumentoClinico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoClinicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentoClinicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentoClinicoGroupByArgs['orderBy'] }
        : { orderBy?: DocumentoClinicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentoClinicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentoClinicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentoClinico model
   */
  readonly fields: DocumentoClinicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentoClinico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentoClinicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodioClinico<T extends EpisodioClincoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClincoDefaultArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentoClinico model
   */
  interface DocumentoClinicoFieldRefs {
    readonly id: FieldRef<"DocumentoClinico", 'Int'>
    readonly episodioClinicoId: FieldRef<"DocumentoClinico", 'Int'>
    readonly tipoDocumento: FieldRef<"DocumentoClinico", 'String'>
    readonly titulo: FieldRef<"DocumentoClinico", 'String'>
    readonly rutaArchivo: FieldRef<"DocumentoClinico", 'String'>
    readonly contenido: FieldRef<"DocumentoClinico", 'Bytes'>
    readonly formato: FieldRef<"DocumentoClinico", 'String'>
    readonly fechaDocumento: FieldRef<"DocumentoClinico", 'DateTime'>
    readonly fechaRegistro: FieldRef<"DocumentoClinico", 'DateTime'>
    readonly observaciones: FieldRef<"DocumentoClinico", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentoClinico findUnique
   */
  export type DocumentoClinicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    /**
     * Filter, which DocumentoClinico to fetch.
     */
    where: DocumentoClinicoWhereUniqueInput
  }

  /**
   * DocumentoClinico findUniqueOrThrow
   */
  export type DocumentoClinicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    /**
     * Filter, which DocumentoClinico to fetch.
     */
    where: DocumentoClinicoWhereUniqueInput
  }

  /**
   * DocumentoClinico findFirst
   */
  export type DocumentoClinicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    /**
     * Filter, which DocumentoClinico to fetch.
     */
    where?: DocumentoClinicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentoClinicos to fetch.
     */
    orderBy?: DocumentoClinicoOrderByWithRelationInput | DocumentoClinicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentoClinicos.
     */
    cursor?: DocumentoClinicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentoClinicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentoClinicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentoClinicos.
     */
    distinct?: DocumentoClinicoScalarFieldEnum | DocumentoClinicoScalarFieldEnum[]
  }

  /**
   * DocumentoClinico findFirstOrThrow
   */
  export type DocumentoClinicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    /**
     * Filter, which DocumentoClinico to fetch.
     */
    where?: DocumentoClinicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentoClinicos to fetch.
     */
    orderBy?: DocumentoClinicoOrderByWithRelationInput | DocumentoClinicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentoClinicos.
     */
    cursor?: DocumentoClinicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentoClinicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentoClinicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentoClinicos.
     */
    distinct?: DocumentoClinicoScalarFieldEnum | DocumentoClinicoScalarFieldEnum[]
  }

  /**
   * DocumentoClinico findMany
   */
  export type DocumentoClinicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    /**
     * Filter, which DocumentoClinicos to fetch.
     */
    where?: DocumentoClinicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentoClinicos to fetch.
     */
    orderBy?: DocumentoClinicoOrderByWithRelationInput | DocumentoClinicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentoClinicos.
     */
    cursor?: DocumentoClinicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentoClinicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentoClinicos.
     */
    skip?: number
    distinct?: DocumentoClinicoScalarFieldEnum | DocumentoClinicoScalarFieldEnum[]
  }

  /**
   * DocumentoClinico create
   */
  export type DocumentoClinicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentoClinico.
     */
    data: XOR<DocumentoClinicoCreateInput, DocumentoClinicoUncheckedCreateInput>
  }

  /**
   * DocumentoClinico createMany
   */
  export type DocumentoClinicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentoClinicos.
     */
    data: DocumentoClinicoCreateManyInput | DocumentoClinicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentoClinico createManyAndReturn
   */
  export type DocumentoClinicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentoClinicos.
     */
    data: DocumentoClinicoCreateManyInput | DocumentoClinicoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentoClinico update
   */
  export type DocumentoClinicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentoClinico.
     */
    data: XOR<DocumentoClinicoUpdateInput, DocumentoClinicoUncheckedUpdateInput>
    /**
     * Choose, which DocumentoClinico to update.
     */
    where: DocumentoClinicoWhereUniqueInput
  }

  /**
   * DocumentoClinico updateMany
   */
  export type DocumentoClinicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentoClinicos.
     */
    data: XOR<DocumentoClinicoUpdateManyMutationInput, DocumentoClinicoUncheckedUpdateManyInput>
    /**
     * Filter which DocumentoClinicos to update
     */
    where?: DocumentoClinicoWhereInput
    /**
     * Limit how many DocumentoClinicos to update.
     */
    limit?: number
  }

  /**
   * DocumentoClinico updateManyAndReturn
   */
  export type DocumentoClinicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * The data used to update DocumentoClinicos.
     */
    data: XOR<DocumentoClinicoUpdateManyMutationInput, DocumentoClinicoUncheckedUpdateManyInput>
    /**
     * Filter which DocumentoClinicos to update
     */
    where?: DocumentoClinicoWhereInput
    /**
     * Limit how many DocumentoClinicos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentoClinico upsert
   */
  export type DocumentoClinicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentoClinico to update in case it exists.
     */
    where: DocumentoClinicoWhereUniqueInput
    /**
     * In case the DocumentoClinico found by the `where` argument doesn't exist, create a new DocumentoClinico with this data.
     */
    create: XOR<DocumentoClinicoCreateInput, DocumentoClinicoUncheckedCreateInput>
    /**
     * In case the DocumentoClinico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentoClinicoUpdateInput, DocumentoClinicoUncheckedUpdateInput>
  }

  /**
   * DocumentoClinico delete
   */
  export type DocumentoClinicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
    /**
     * Filter which DocumentoClinico to delete.
     */
    where: DocumentoClinicoWhereUniqueInput
  }

  /**
   * DocumentoClinico deleteMany
   */
  export type DocumentoClinicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentoClinicos to delete
     */
    where?: DocumentoClinicoWhereInput
    /**
     * Limit how many DocumentoClinicos to delete.
     */
    limit?: number
  }

  /**
   * DocumentoClinico without action
   */
  export type DocumentoClinicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoClinico
     */
    select?: DocumentoClinicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentoClinico
     */
    omit?: DocumentoClinicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoClinicoInclude<ExtArgs> | null
  }


  /**
   * Model ConsentimientoInformado
   */

  export type AggregateConsentimientoInformado = {
    _count: ConsentimientoInformadoCountAggregateOutputType | null
    _avg: ConsentimientoInformadoAvgAggregateOutputType | null
    _sum: ConsentimientoInformadoSumAggregateOutputType | null
    _min: ConsentimientoInformadoMinAggregateOutputType | null
    _max: ConsentimientoInformadoMaxAggregateOutputType | null
  }

  export type ConsentimientoInformadoAvgAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type ConsentimientoInformadoSumAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type ConsentimientoInformadoMinAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    tipoProcedimiento: string | null
    contenido: string | null
    fechaFirma: Date | null
    firmadoPaciente: boolean | null
    firmadoRepresentante: boolean | null
    nombreRepresentante: string | null
    documentoRepresentante: string | null
    documentoDigitalizado: Uint8Array | null
  }

  export type ConsentimientoInformadoMaxAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    tipoProcedimiento: string | null
    contenido: string | null
    fechaFirma: Date | null
    firmadoPaciente: boolean | null
    firmadoRepresentante: boolean | null
    nombreRepresentante: string | null
    documentoRepresentante: string | null
    documentoDigitalizado: Uint8Array | null
  }

  export type ConsentimientoInformadoCountAggregateOutputType = {
    id: number
    episodioClinicoId: number
    tipoProcedimiento: number
    contenido: number
    fechaFirma: number
    firmadoPaciente: number
    firmadoRepresentante: number
    nombreRepresentante: number
    documentoRepresentante: number
    documentoDigitalizado: number
    _all: number
  }


  export type ConsentimientoInformadoAvgAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type ConsentimientoInformadoSumAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type ConsentimientoInformadoMinAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    tipoProcedimiento?: true
    contenido?: true
    fechaFirma?: true
    firmadoPaciente?: true
    firmadoRepresentante?: true
    nombreRepresentante?: true
    documentoRepresentante?: true
    documentoDigitalizado?: true
  }

  export type ConsentimientoInformadoMaxAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    tipoProcedimiento?: true
    contenido?: true
    fechaFirma?: true
    firmadoPaciente?: true
    firmadoRepresentante?: true
    nombreRepresentante?: true
    documentoRepresentante?: true
    documentoDigitalizado?: true
  }

  export type ConsentimientoInformadoCountAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    tipoProcedimiento?: true
    contenido?: true
    fechaFirma?: true
    firmadoPaciente?: true
    firmadoRepresentante?: true
    nombreRepresentante?: true
    documentoRepresentante?: true
    documentoDigitalizado?: true
    _all?: true
  }

  export type ConsentimientoInformadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsentimientoInformado to aggregate.
     */
    where?: ConsentimientoInformadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentimientoInformados to fetch.
     */
    orderBy?: ConsentimientoInformadoOrderByWithRelationInput | ConsentimientoInformadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsentimientoInformadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentimientoInformados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentimientoInformados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsentimientoInformados
    **/
    _count?: true | ConsentimientoInformadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsentimientoInformadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsentimientoInformadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsentimientoInformadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsentimientoInformadoMaxAggregateInputType
  }

  export type GetConsentimientoInformadoAggregateType<T extends ConsentimientoInformadoAggregateArgs> = {
        [P in keyof T & keyof AggregateConsentimientoInformado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsentimientoInformado[P]>
      : GetScalarType<T[P], AggregateConsentimientoInformado[P]>
  }




  export type ConsentimientoInformadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsentimientoInformadoWhereInput
    orderBy?: ConsentimientoInformadoOrderByWithAggregationInput | ConsentimientoInformadoOrderByWithAggregationInput[]
    by: ConsentimientoInformadoScalarFieldEnum[] | ConsentimientoInformadoScalarFieldEnum
    having?: ConsentimientoInformadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsentimientoInformadoCountAggregateInputType | true
    _avg?: ConsentimientoInformadoAvgAggregateInputType
    _sum?: ConsentimientoInformadoSumAggregateInputType
    _min?: ConsentimientoInformadoMinAggregateInputType
    _max?: ConsentimientoInformadoMaxAggregateInputType
  }

  export type ConsentimientoInformadoGroupByOutputType = {
    id: number
    episodioClinicoId: number
    tipoProcedimiento: string
    contenido: string
    fechaFirma: Date | null
    firmadoPaciente: boolean
    firmadoRepresentante: boolean
    nombreRepresentante: string | null
    documentoRepresentante: string | null
    documentoDigitalizado: Uint8Array | null
    _count: ConsentimientoInformadoCountAggregateOutputType | null
    _avg: ConsentimientoInformadoAvgAggregateOutputType | null
    _sum: ConsentimientoInformadoSumAggregateOutputType | null
    _min: ConsentimientoInformadoMinAggregateOutputType | null
    _max: ConsentimientoInformadoMaxAggregateOutputType | null
  }

  type GetConsentimientoInformadoGroupByPayload<T extends ConsentimientoInformadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsentimientoInformadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsentimientoInformadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsentimientoInformadoGroupByOutputType[P]>
            : GetScalarType<T[P], ConsentimientoInformadoGroupByOutputType[P]>
        }
      >
    >


  export type ConsentimientoInformadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    tipoProcedimiento?: boolean
    contenido?: boolean
    fechaFirma?: boolean
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: boolean
    documentoRepresentante?: boolean
    documentoDigitalizado?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consentimientoInformado"]>

  export type ConsentimientoInformadoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    tipoProcedimiento?: boolean
    contenido?: boolean
    fechaFirma?: boolean
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: boolean
    documentoRepresentante?: boolean
    documentoDigitalizado?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consentimientoInformado"]>

  export type ConsentimientoInformadoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    tipoProcedimiento?: boolean
    contenido?: boolean
    fechaFirma?: boolean
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: boolean
    documentoRepresentante?: boolean
    documentoDigitalizado?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consentimientoInformado"]>

  export type ConsentimientoInformadoSelectScalar = {
    id?: boolean
    episodioClinicoId?: boolean
    tipoProcedimiento?: boolean
    contenido?: boolean
    fechaFirma?: boolean
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: boolean
    documentoRepresentante?: boolean
    documentoDigitalizado?: boolean
  }

  export type ConsentimientoInformadoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodioClinicoId" | "tipoProcedimiento" | "contenido" | "fechaFirma" | "firmadoPaciente" | "firmadoRepresentante" | "nombreRepresentante" | "documentoRepresentante" | "documentoDigitalizado", ExtArgs["result"]["consentimientoInformado"]>
  export type ConsentimientoInformadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type ConsentimientoInformadoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type ConsentimientoInformadoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }

  export type $ConsentimientoInformadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsentimientoInformado"
    objects: {
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodioClinicoId: number
      tipoProcedimiento: string
      contenido: string
      fechaFirma: Date | null
      firmadoPaciente: boolean
      firmadoRepresentante: boolean
      nombreRepresentante: string | null
      documentoRepresentante: string | null
      documentoDigitalizado: Uint8Array | null
    }, ExtArgs["result"]["consentimientoInformado"]>
    composites: {}
  }

  type ConsentimientoInformadoGetPayload<S extends boolean | null | undefined | ConsentimientoInformadoDefaultArgs> = $Result.GetResult<Prisma.$ConsentimientoInformadoPayload, S>

  type ConsentimientoInformadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsentimientoInformadoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsentimientoInformadoCountAggregateInputType | true
    }

  export interface ConsentimientoInformadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsentimientoInformado'], meta: { name: 'ConsentimientoInformado' } }
    /**
     * Find zero or one ConsentimientoInformado that matches the filter.
     * @param {ConsentimientoInformadoFindUniqueArgs} args - Arguments to find a ConsentimientoInformado
     * @example
     * // Get one ConsentimientoInformado
     * const consentimientoInformado = await prisma.consentimientoInformado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsentimientoInformadoFindUniqueArgs>(args: SelectSubset<T, ConsentimientoInformadoFindUniqueArgs<ExtArgs>>): Prisma__ConsentimientoInformadoClient<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConsentimientoInformado that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsentimientoInformadoFindUniqueOrThrowArgs} args - Arguments to find a ConsentimientoInformado
     * @example
     * // Get one ConsentimientoInformado
     * const consentimientoInformado = await prisma.consentimientoInformado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsentimientoInformadoFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsentimientoInformadoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsentimientoInformadoClient<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsentimientoInformado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentimientoInformadoFindFirstArgs} args - Arguments to find a ConsentimientoInformado
     * @example
     * // Get one ConsentimientoInformado
     * const consentimientoInformado = await prisma.consentimientoInformado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsentimientoInformadoFindFirstArgs>(args?: SelectSubset<T, ConsentimientoInformadoFindFirstArgs<ExtArgs>>): Prisma__ConsentimientoInformadoClient<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsentimientoInformado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentimientoInformadoFindFirstOrThrowArgs} args - Arguments to find a ConsentimientoInformado
     * @example
     * // Get one ConsentimientoInformado
     * const consentimientoInformado = await prisma.consentimientoInformado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsentimientoInformadoFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsentimientoInformadoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsentimientoInformadoClient<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConsentimientoInformados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentimientoInformadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsentimientoInformados
     * const consentimientoInformados = await prisma.consentimientoInformado.findMany()
     * 
     * // Get first 10 ConsentimientoInformados
     * const consentimientoInformados = await prisma.consentimientoInformado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consentimientoInformadoWithIdOnly = await prisma.consentimientoInformado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsentimientoInformadoFindManyArgs>(args?: SelectSubset<T, ConsentimientoInformadoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConsentimientoInformado.
     * @param {ConsentimientoInformadoCreateArgs} args - Arguments to create a ConsentimientoInformado.
     * @example
     * // Create one ConsentimientoInformado
     * const ConsentimientoInformado = await prisma.consentimientoInformado.create({
     *   data: {
     *     // ... data to create a ConsentimientoInformado
     *   }
     * })
     * 
     */
    create<T extends ConsentimientoInformadoCreateArgs>(args: SelectSubset<T, ConsentimientoInformadoCreateArgs<ExtArgs>>): Prisma__ConsentimientoInformadoClient<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConsentimientoInformados.
     * @param {ConsentimientoInformadoCreateManyArgs} args - Arguments to create many ConsentimientoInformados.
     * @example
     * // Create many ConsentimientoInformados
     * const consentimientoInformado = await prisma.consentimientoInformado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsentimientoInformadoCreateManyArgs>(args?: SelectSubset<T, ConsentimientoInformadoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsentimientoInformados and returns the data saved in the database.
     * @param {ConsentimientoInformadoCreateManyAndReturnArgs} args - Arguments to create many ConsentimientoInformados.
     * @example
     * // Create many ConsentimientoInformados
     * const consentimientoInformado = await prisma.consentimientoInformado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsentimientoInformados and only return the `id`
     * const consentimientoInformadoWithIdOnly = await prisma.consentimientoInformado.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsentimientoInformadoCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsentimientoInformadoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConsentimientoInformado.
     * @param {ConsentimientoInformadoDeleteArgs} args - Arguments to delete one ConsentimientoInformado.
     * @example
     * // Delete one ConsentimientoInformado
     * const ConsentimientoInformado = await prisma.consentimientoInformado.delete({
     *   where: {
     *     // ... filter to delete one ConsentimientoInformado
     *   }
     * })
     * 
     */
    delete<T extends ConsentimientoInformadoDeleteArgs>(args: SelectSubset<T, ConsentimientoInformadoDeleteArgs<ExtArgs>>): Prisma__ConsentimientoInformadoClient<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConsentimientoInformado.
     * @param {ConsentimientoInformadoUpdateArgs} args - Arguments to update one ConsentimientoInformado.
     * @example
     * // Update one ConsentimientoInformado
     * const consentimientoInformado = await prisma.consentimientoInformado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsentimientoInformadoUpdateArgs>(args: SelectSubset<T, ConsentimientoInformadoUpdateArgs<ExtArgs>>): Prisma__ConsentimientoInformadoClient<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConsentimientoInformados.
     * @param {ConsentimientoInformadoDeleteManyArgs} args - Arguments to filter ConsentimientoInformados to delete.
     * @example
     * // Delete a few ConsentimientoInformados
     * const { count } = await prisma.consentimientoInformado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsentimientoInformadoDeleteManyArgs>(args?: SelectSubset<T, ConsentimientoInformadoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsentimientoInformados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentimientoInformadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsentimientoInformados
     * const consentimientoInformado = await prisma.consentimientoInformado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsentimientoInformadoUpdateManyArgs>(args: SelectSubset<T, ConsentimientoInformadoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsentimientoInformados and returns the data updated in the database.
     * @param {ConsentimientoInformadoUpdateManyAndReturnArgs} args - Arguments to update many ConsentimientoInformados.
     * @example
     * // Update many ConsentimientoInformados
     * const consentimientoInformado = await prisma.consentimientoInformado.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConsentimientoInformados and only return the `id`
     * const consentimientoInformadoWithIdOnly = await prisma.consentimientoInformado.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsentimientoInformadoUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsentimientoInformadoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConsentimientoInformado.
     * @param {ConsentimientoInformadoUpsertArgs} args - Arguments to update or create a ConsentimientoInformado.
     * @example
     * // Update or create a ConsentimientoInformado
     * const consentimientoInformado = await prisma.consentimientoInformado.upsert({
     *   create: {
     *     // ... data to create a ConsentimientoInformado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsentimientoInformado we want to update
     *   }
     * })
     */
    upsert<T extends ConsentimientoInformadoUpsertArgs>(args: SelectSubset<T, ConsentimientoInformadoUpsertArgs<ExtArgs>>): Prisma__ConsentimientoInformadoClient<$Result.GetResult<Prisma.$ConsentimientoInformadoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConsentimientoInformados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentimientoInformadoCountArgs} args - Arguments to filter ConsentimientoInformados to count.
     * @example
     * // Count the number of ConsentimientoInformados
     * const count = await prisma.consentimientoInformado.count({
     *   where: {
     *     // ... the filter for the ConsentimientoInformados we want to count
     *   }
     * })
    **/
    count<T extends ConsentimientoInformadoCountArgs>(
      args?: Subset<T, ConsentimientoInformadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsentimientoInformadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsentimientoInformado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentimientoInformadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsentimientoInformadoAggregateArgs>(args: Subset<T, ConsentimientoInformadoAggregateArgs>): Prisma.PrismaPromise<GetConsentimientoInformadoAggregateType<T>>

    /**
     * Group by ConsentimientoInformado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentimientoInformadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsentimientoInformadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsentimientoInformadoGroupByArgs['orderBy'] }
        : { orderBy?: ConsentimientoInformadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsentimientoInformadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsentimientoInformadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsentimientoInformado model
   */
  readonly fields: ConsentimientoInformadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsentimientoInformado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsentimientoInformadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodioClinico<T extends EpisodioClincoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClincoDefaultArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsentimientoInformado model
   */
  interface ConsentimientoInformadoFieldRefs {
    readonly id: FieldRef<"ConsentimientoInformado", 'Int'>
    readonly episodioClinicoId: FieldRef<"ConsentimientoInformado", 'Int'>
    readonly tipoProcedimiento: FieldRef<"ConsentimientoInformado", 'String'>
    readonly contenido: FieldRef<"ConsentimientoInformado", 'String'>
    readonly fechaFirma: FieldRef<"ConsentimientoInformado", 'DateTime'>
    readonly firmadoPaciente: FieldRef<"ConsentimientoInformado", 'Boolean'>
    readonly firmadoRepresentante: FieldRef<"ConsentimientoInformado", 'Boolean'>
    readonly nombreRepresentante: FieldRef<"ConsentimientoInformado", 'String'>
    readonly documentoRepresentante: FieldRef<"ConsentimientoInformado", 'String'>
    readonly documentoDigitalizado: FieldRef<"ConsentimientoInformado", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * ConsentimientoInformado findUnique
   */
  export type ConsentimientoInformadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    /**
     * Filter, which ConsentimientoInformado to fetch.
     */
    where: ConsentimientoInformadoWhereUniqueInput
  }

  /**
   * ConsentimientoInformado findUniqueOrThrow
   */
  export type ConsentimientoInformadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    /**
     * Filter, which ConsentimientoInformado to fetch.
     */
    where: ConsentimientoInformadoWhereUniqueInput
  }

  /**
   * ConsentimientoInformado findFirst
   */
  export type ConsentimientoInformadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    /**
     * Filter, which ConsentimientoInformado to fetch.
     */
    where?: ConsentimientoInformadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentimientoInformados to fetch.
     */
    orderBy?: ConsentimientoInformadoOrderByWithRelationInput | ConsentimientoInformadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsentimientoInformados.
     */
    cursor?: ConsentimientoInformadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentimientoInformados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentimientoInformados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsentimientoInformados.
     */
    distinct?: ConsentimientoInformadoScalarFieldEnum | ConsentimientoInformadoScalarFieldEnum[]
  }

  /**
   * ConsentimientoInformado findFirstOrThrow
   */
  export type ConsentimientoInformadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    /**
     * Filter, which ConsentimientoInformado to fetch.
     */
    where?: ConsentimientoInformadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentimientoInformados to fetch.
     */
    orderBy?: ConsentimientoInformadoOrderByWithRelationInput | ConsentimientoInformadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsentimientoInformados.
     */
    cursor?: ConsentimientoInformadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentimientoInformados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentimientoInformados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsentimientoInformados.
     */
    distinct?: ConsentimientoInformadoScalarFieldEnum | ConsentimientoInformadoScalarFieldEnum[]
  }

  /**
   * ConsentimientoInformado findMany
   */
  export type ConsentimientoInformadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    /**
     * Filter, which ConsentimientoInformados to fetch.
     */
    where?: ConsentimientoInformadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentimientoInformados to fetch.
     */
    orderBy?: ConsentimientoInformadoOrderByWithRelationInput | ConsentimientoInformadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsentimientoInformados.
     */
    cursor?: ConsentimientoInformadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentimientoInformados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentimientoInformados.
     */
    skip?: number
    distinct?: ConsentimientoInformadoScalarFieldEnum | ConsentimientoInformadoScalarFieldEnum[]
  }

  /**
   * ConsentimientoInformado create
   */
  export type ConsentimientoInformadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    /**
     * The data needed to create a ConsentimientoInformado.
     */
    data: XOR<ConsentimientoInformadoCreateInput, ConsentimientoInformadoUncheckedCreateInput>
  }

  /**
   * ConsentimientoInformado createMany
   */
  export type ConsentimientoInformadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsentimientoInformados.
     */
    data: ConsentimientoInformadoCreateManyInput | ConsentimientoInformadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsentimientoInformado createManyAndReturn
   */
  export type ConsentimientoInformadoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * The data used to create many ConsentimientoInformados.
     */
    data: ConsentimientoInformadoCreateManyInput | ConsentimientoInformadoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsentimientoInformado update
   */
  export type ConsentimientoInformadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    /**
     * The data needed to update a ConsentimientoInformado.
     */
    data: XOR<ConsentimientoInformadoUpdateInput, ConsentimientoInformadoUncheckedUpdateInput>
    /**
     * Choose, which ConsentimientoInformado to update.
     */
    where: ConsentimientoInformadoWhereUniqueInput
  }

  /**
   * ConsentimientoInformado updateMany
   */
  export type ConsentimientoInformadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsentimientoInformados.
     */
    data: XOR<ConsentimientoInformadoUpdateManyMutationInput, ConsentimientoInformadoUncheckedUpdateManyInput>
    /**
     * Filter which ConsentimientoInformados to update
     */
    where?: ConsentimientoInformadoWhereInput
    /**
     * Limit how many ConsentimientoInformados to update.
     */
    limit?: number
  }

  /**
   * ConsentimientoInformado updateManyAndReturn
   */
  export type ConsentimientoInformadoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * The data used to update ConsentimientoInformados.
     */
    data: XOR<ConsentimientoInformadoUpdateManyMutationInput, ConsentimientoInformadoUncheckedUpdateManyInput>
    /**
     * Filter which ConsentimientoInformados to update
     */
    where?: ConsentimientoInformadoWhereInput
    /**
     * Limit how many ConsentimientoInformados to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsentimientoInformado upsert
   */
  export type ConsentimientoInformadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    /**
     * The filter to search for the ConsentimientoInformado to update in case it exists.
     */
    where: ConsentimientoInformadoWhereUniqueInput
    /**
     * In case the ConsentimientoInformado found by the `where` argument doesn't exist, create a new ConsentimientoInformado with this data.
     */
    create: XOR<ConsentimientoInformadoCreateInput, ConsentimientoInformadoUncheckedCreateInput>
    /**
     * In case the ConsentimientoInformado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsentimientoInformadoUpdateInput, ConsentimientoInformadoUncheckedUpdateInput>
  }

  /**
   * ConsentimientoInformado delete
   */
  export type ConsentimientoInformadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
    /**
     * Filter which ConsentimientoInformado to delete.
     */
    where: ConsentimientoInformadoWhereUniqueInput
  }

  /**
   * ConsentimientoInformado deleteMany
   */
  export type ConsentimientoInformadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsentimientoInformados to delete
     */
    where?: ConsentimientoInformadoWhereInput
    /**
     * Limit how many ConsentimientoInformados to delete.
     */
    limit?: number
  }

  /**
   * ConsentimientoInformado without action
   */
  export type ConsentimientoInformadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentimientoInformado
     */
    select?: ConsentimientoInformadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentimientoInformado
     */
    omit?: ConsentimientoInformadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentimientoInformadoInclude<ExtArgs> | null
  }


  /**
   * Model OdontologiaDetalle
   */

  export type AggregateOdontologiaDetalle = {
    _count: OdontologiaDetalleCountAggregateOutputType | null
    _avg: OdontologiaDetalleAvgAggregateOutputType | null
    _sum: OdontologiaDetalleSumAggregateOutputType | null
    _min: OdontologiaDetalleMinAggregateOutputType | null
    _max: OdontologiaDetalleMaxAggregateOutputType | null
  }

  export type OdontologiaDetalleAvgAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    indiceCPOD: Decimal | null
  }

  export type OdontologiaDetalleSumAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    indiceCPOD: Decimal | null
  }

  export type OdontologiaDetalleMinAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    odontograma: Uint8Array | null
    indiceCPOD: Decimal | null
    observacionesDentales: string | null
    procedimientosRealizados: string | null
  }

  export type OdontologiaDetalleMaxAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    odontograma: Uint8Array | null
    indiceCPOD: Decimal | null
    observacionesDentales: string | null
    procedimientosRealizados: string | null
  }

  export type OdontologiaDetalleCountAggregateOutputType = {
    id: number
    episodioClinicoId: number
    odontograma: number
    indiceCPOD: number
    observacionesDentales: number
    procedimientosRealizados: number
    _all: number
  }


  export type OdontologiaDetalleAvgAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    indiceCPOD?: true
  }

  export type OdontologiaDetalleSumAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    indiceCPOD?: true
  }

  export type OdontologiaDetalleMinAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    odontograma?: true
    indiceCPOD?: true
    observacionesDentales?: true
    procedimientosRealizados?: true
  }

  export type OdontologiaDetalleMaxAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    odontograma?: true
    indiceCPOD?: true
    observacionesDentales?: true
    procedimientosRealizados?: true
  }

  export type OdontologiaDetalleCountAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    odontograma?: true
    indiceCPOD?: true
    observacionesDentales?: true
    procedimientosRealizados?: true
    _all?: true
  }

  export type OdontologiaDetalleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OdontologiaDetalle to aggregate.
     */
    where?: OdontologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OdontologiaDetalles to fetch.
     */
    orderBy?: OdontologiaDetalleOrderByWithRelationInput | OdontologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OdontologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OdontologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OdontologiaDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OdontologiaDetalles
    **/
    _count?: true | OdontologiaDetalleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OdontologiaDetalleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OdontologiaDetalleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OdontologiaDetalleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OdontologiaDetalleMaxAggregateInputType
  }

  export type GetOdontologiaDetalleAggregateType<T extends OdontologiaDetalleAggregateArgs> = {
        [P in keyof T & keyof AggregateOdontologiaDetalle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOdontologiaDetalle[P]>
      : GetScalarType<T[P], AggregateOdontologiaDetalle[P]>
  }




  export type OdontologiaDetalleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OdontologiaDetalleWhereInput
    orderBy?: OdontologiaDetalleOrderByWithAggregationInput | OdontologiaDetalleOrderByWithAggregationInput[]
    by: OdontologiaDetalleScalarFieldEnum[] | OdontologiaDetalleScalarFieldEnum
    having?: OdontologiaDetalleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OdontologiaDetalleCountAggregateInputType | true
    _avg?: OdontologiaDetalleAvgAggregateInputType
    _sum?: OdontologiaDetalleSumAggregateInputType
    _min?: OdontologiaDetalleMinAggregateInputType
    _max?: OdontologiaDetalleMaxAggregateInputType
  }

  export type OdontologiaDetalleGroupByOutputType = {
    id: number
    episodioClinicoId: number
    odontograma: Uint8Array | null
    indiceCPOD: Decimal | null
    observacionesDentales: string | null
    procedimientosRealizados: string | null
    _count: OdontologiaDetalleCountAggregateOutputType | null
    _avg: OdontologiaDetalleAvgAggregateOutputType | null
    _sum: OdontologiaDetalleSumAggregateOutputType | null
    _min: OdontologiaDetalleMinAggregateOutputType | null
    _max: OdontologiaDetalleMaxAggregateOutputType | null
  }

  type GetOdontologiaDetalleGroupByPayload<T extends OdontologiaDetalleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OdontologiaDetalleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OdontologiaDetalleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OdontologiaDetalleGroupByOutputType[P]>
            : GetScalarType<T[P], OdontologiaDetalleGroupByOutputType[P]>
        }
      >
    >


  export type OdontologiaDetalleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    odontograma?: boolean
    indiceCPOD?: boolean
    observacionesDentales?: boolean
    procedimientosRealizados?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["odontologiaDetalle"]>

  export type OdontologiaDetalleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    odontograma?: boolean
    indiceCPOD?: boolean
    observacionesDentales?: boolean
    procedimientosRealizados?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["odontologiaDetalle"]>

  export type OdontologiaDetalleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    odontograma?: boolean
    indiceCPOD?: boolean
    observacionesDentales?: boolean
    procedimientosRealizados?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["odontologiaDetalle"]>

  export type OdontologiaDetalleSelectScalar = {
    id?: boolean
    episodioClinicoId?: boolean
    odontograma?: boolean
    indiceCPOD?: boolean
    observacionesDentales?: boolean
    procedimientosRealizados?: boolean
  }

  export type OdontologiaDetalleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodioClinicoId" | "odontograma" | "indiceCPOD" | "observacionesDentales" | "procedimientosRealizados", ExtArgs["result"]["odontologiaDetalle"]>
  export type OdontologiaDetalleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type OdontologiaDetalleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type OdontologiaDetalleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }

  export type $OdontologiaDetallePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OdontologiaDetalle"
    objects: {
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodioClinicoId: number
      odontograma: Uint8Array | null
      indiceCPOD: Prisma.Decimal | null
      observacionesDentales: string | null
      procedimientosRealizados: string | null
    }, ExtArgs["result"]["odontologiaDetalle"]>
    composites: {}
  }

  type OdontologiaDetalleGetPayload<S extends boolean | null | undefined | OdontologiaDetalleDefaultArgs> = $Result.GetResult<Prisma.$OdontologiaDetallePayload, S>

  type OdontologiaDetalleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OdontologiaDetalleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OdontologiaDetalleCountAggregateInputType | true
    }

  export interface OdontologiaDetalleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OdontologiaDetalle'], meta: { name: 'OdontologiaDetalle' } }
    /**
     * Find zero or one OdontologiaDetalle that matches the filter.
     * @param {OdontologiaDetalleFindUniqueArgs} args - Arguments to find a OdontologiaDetalle
     * @example
     * // Get one OdontologiaDetalle
     * const odontologiaDetalle = await prisma.odontologiaDetalle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OdontologiaDetalleFindUniqueArgs>(args: SelectSubset<T, OdontologiaDetalleFindUniqueArgs<ExtArgs>>): Prisma__OdontologiaDetalleClient<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OdontologiaDetalle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OdontologiaDetalleFindUniqueOrThrowArgs} args - Arguments to find a OdontologiaDetalle
     * @example
     * // Get one OdontologiaDetalle
     * const odontologiaDetalle = await prisma.odontologiaDetalle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OdontologiaDetalleFindUniqueOrThrowArgs>(args: SelectSubset<T, OdontologiaDetalleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OdontologiaDetalleClient<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OdontologiaDetalle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OdontologiaDetalleFindFirstArgs} args - Arguments to find a OdontologiaDetalle
     * @example
     * // Get one OdontologiaDetalle
     * const odontologiaDetalle = await prisma.odontologiaDetalle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OdontologiaDetalleFindFirstArgs>(args?: SelectSubset<T, OdontologiaDetalleFindFirstArgs<ExtArgs>>): Prisma__OdontologiaDetalleClient<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OdontologiaDetalle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OdontologiaDetalleFindFirstOrThrowArgs} args - Arguments to find a OdontologiaDetalle
     * @example
     * // Get one OdontologiaDetalle
     * const odontologiaDetalle = await prisma.odontologiaDetalle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OdontologiaDetalleFindFirstOrThrowArgs>(args?: SelectSubset<T, OdontologiaDetalleFindFirstOrThrowArgs<ExtArgs>>): Prisma__OdontologiaDetalleClient<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OdontologiaDetalles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OdontologiaDetalleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OdontologiaDetalles
     * const odontologiaDetalles = await prisma.odontologiaDetalle.findMany()
     * 
     * // Get first 10 OdontologiaDetalles
     * const odontologiaDetalles = await prisma.odontologiaDetalle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const odontologiaDetalleWithIdOnly = await prisma.odontologiaDetalle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OdontologiaDetalleFindManyArgs>(args?: SelectSubset<T, OdontologiaDetalleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OdontologiaDetalle.
     * @param {OdontologiaDetalleCreateArgs} args - Arguments to create a OdontologiaDetalle.
     * @example
     * // Create one OdontologiaDetalle
     * const OdontologiaDetalle = await prisma.odontologiaDetalle.create({
     *   data: {
     *     // ... data to create a OdontologiaDetalle
     *   }
     * })
     * 
     */
    create<T extends OdontologiaDetalleCreateArgs>(args: SelectSubset<T, OdontologiaDetalleCreateArgs<ExtArgs>>): Prisma__OdontologiaDetalleClient<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OdontologiaDetalles.
     * @param {OdontologiaDetalleCreateManyArgs} args - Arguments to create many OdontologiaDetalles.
     * @example
     * // Create many OdontologiaDetalles
     * const odontologiaDetalle = await prisma.odontologiaDetalle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OdontologiaDetalleCreateManyArgs>(args?: SelectSubset<T, OdontologiaDetalleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OdontologiaDetalles and returns the data saved in the database.
     * @param {OdontologiaDetalleCreateManyAndReturnArgs} args - Arguments to create many OdontologiaDetalles.
     * @example
     * // Create many OdontologiaDetalles
     * const odontologiaDetalle = await prisma.odontologiaDetalle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OdontologiaDetalles and only return the `id`
     * const odontologiaDetalleWithIdOnly = await prisma.odontologiaDetalle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OdontologiaDetalleCreateManyAndReturnArgs>(args?: SelectSubset<T, OdontologiaDetalleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OdontologiaDetalle.
     * @param {OdontologiaDetalleDeleteArgs} args - Arguments to delete one OdontologiaDetalle.
     * @example
     * // Delete one OdontologiaDetalle
     * const OdontologiaDetalle = await prisma.odontologiaDetalle.delete({
     *   where: {
     *     // ... filter to delete one OdontologiaDetalle
     *   }
     * })
     * 
     */
    delete<T extends OdontologiaDetalleDeleteArgs>(args: SelectSubset<T, OdontologiaDetalleDeleteArgs<ExtArgs>>): Prisma__OdontologiaDetalleClient<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OdontologiaDetalle.
     * @param {OdontologiaDetalleUpdateArgs} args - Arguments to update one OdontologiaDetalle.
     * @example
     * // Update one OdontologiaDetalle
     * const odontologiaDetalle = await prisma.odontologiaDetalle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OdontologiaDetalleUpdateArgs>(args: SelectSubset<T, OdontologiaDetalleUpdateArgs<ExtArgs>>): Prisma__OdontologiaDetalleClient<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OdontologiaDetalles.
     * @param {OdontologiaDetalleDeleteManyArgs} args - Arguments to filter OdontologiaDetalles to delete.
     * @example
     * // Delete a few OdontologiaDetalles
     * const { count } = await prisma.odontologiaDetalle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OdontologiaDetalleDeleteManyArgs>(args?: SelectSubset<T, OdontologiaDetalleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OdontologiaDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OdontologiaDetalleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OdontologiaDetalles
     * const odontologiaDetalle = await prisma.odontologiaDetalle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OdontologiaDetalleUpdateManyArgs>(args: SelectSubset<T, OdontologiaDetalleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OdontologiaDetalles and returns the data updated in the database.
     * @param {OdontologiaDetalleUpdateManyAndReturnArgs} args - Arguments to update many OdontologiaDetalles.
     * @example
     * // Update many OdontologiaDetalles
     * const odontologiaDetalle = await prisma.odontologiaDetalle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OdontologiaDetalles and only return the `id`
     * const odontologiaDetalleWithIdOnly = await prisma.odontologiaDetalle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OdontologiaDetalleUpdateManyAndReturnArgs>(args: SelectSubset<T, OdontologiaDetalleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OdontologiaDetalle.
     * @param {OdontologiaDetalleUpsertArgs} args - Arguments to update or create a OdontologiaDetalle.
     * @example
     * // Update or create a OdontologiaDetalle
     * const odontologiaDetalle = await prisma.odontologiaDetalle.upsert({
     *   create: {
     *     // ... data to create a OdontologiaDetalle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OdontologiaDetalle we want to update
     *   }
     * })
     */
    upsert<T extends OdontologiaDetalleUpsertArgs>(args: SelectSubset<T, OdontologiaDetalleUpsertArgs<ExtArgs>>): Prisma__OdontologiaDetalleClient<$Result.GetResult<Prisma.$OdontologiaDetallePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OdontologiaDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OdontologiaDetalleCountArgs} args - Arguments to filter OdontologiaDetalles to count.
     * @example
     * // Count the number of OdontologiaDetalles
     * const count = await prisma.odontologiaDetalle.count({
     *   where: {
     *     // ... the filter for the OdontologiaDetalles we want to count
     *   }
     * })
    **/
    count<T extends OdontologiaDetalleCountArgs>(
      args?: Subset<T, OdontologiaDetalleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OdontologiaDetalleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OdontologiaDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OdontologiaDetalleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OdontologiaDetalleAggregateArgs>(args: Subset<T, OdontologiaDetalleAggregateArgs>): Prisma.PrismaPromise<GetOdontologiaDetalleAggregateType<T>>

    /**
     * Group by OdontologiaDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OdontologiaDetalleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OdontologiaDetalleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OdontologiaDetalleGroupByArgs['orderBy'] }
        : { orderBy?: OdontologiaDetalleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OdontologiaDetalleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOdontologiaDetalleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OdontologiaDetalle model
   */
  readonly fields: OdontologiaDetalleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OdontologiaDetalle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OdontologiaDetalleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodioClinico<T extends EpisodioClincoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClincoDefaultArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OdontologiaDetalle model
   */
  interface OdontologiaDetalleFieldRefs {
    readonly id: FieldRef<"OdontologiaDetalle", 'Int'>
    readonly episodioClinicoId: FieldRef<"OdontologiaDetalle", 'Int'>
    readonly odontograma: FieldRef<"OdontologiaDetalle", 'Bytes'>
    readonly indiceCPOD: FieldRef<"OdontologiaDetalle", 'Decimal'>
    readonly observacionesDentales: FieldRef<"OdontologiaDetalle", 'String'>
    readonly procedimientosRealizados: FieldRef<"OdontologiaDetalle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OdontologiaDetalle findUnique
   */
  export type OdontologiaDetalleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OdontologiaDetalle to fetch.
     */
    where: OdontologiaDetalleWhereUniqueInput
  }

  /**
   * OdontologiaDetalle findUniqueOrThrow
   */
  export type OdontologiaDetalleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OdontologiaDetalle to fetch.
     */
    where: OdontologiaDetalleWhereUniqueInput
  }

  /**
   * OdontologiaDetalle findFirst
   */
  export type OdontologiaDetalleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OdontologiaDetalle to fetch.
     */
    where?: OdontologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OdontologiaDetalles to fetch.
     */
    orderBy?: OdontologiaDetalleOrderByWithRelationInput | OdontologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OdontologiaDetalles.
     */
    cursor?: OdontologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OdontologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OdontologiaDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OdontologiaDetalles.
     */
    distinct?: OdontologiaDetalleScalarFieldEnum | OdontologiaDetalleScalarFieldEnum[]
  }

  /**
   * OdontologiaDetalle findFirstOrThrow
   */
  export type OdontologiaDetalleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OdontologiaDetalle to fetch.
     */
    where?: OdontologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OdontologiaDetalles to fetch.
     */
    orderBy?: OdontologiaDetalleOrderByWithRelationInput | OdontologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OdontologiaDetalles.
     */
    cursor?: OdontologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OdontologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OdontologiaDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OdontologiaDetalles.
     */
    distinct?: OdontologiaDetalleScalarFieldEnum | OdontologiaDetalleScalarFieldEnum[]
  }

  /**
   * OdontologiaDetalle findMany
   */
  export type OdontologiaDetalleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OdontologiaDetalles to fetch.
     */
    where?: OdontologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OdontologiaDetalles to fetch.
     */
    orderBy?: OdontologiaDetalleOrderByWithRelationInput | OdontologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OdontologiaDetalles.
     */
    cursor?: OdontologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OdontologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OdontologiaDetalles.
     */
    skip?: number
    distinct?: OdontologiaDetalleScalarFieldEnum | OdontologiaDetalleScalarFieldEnum[]
  }

  /**
   * OdontologiaDetalle create
   */
  export type OdontologiaDetalleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    /**
     * The data needed to create a OdontologiaDetalle.
     */
    data: XOR<OdontologiaDetalleCreateInput, OdontologiaDetalleUncheckedCreateInput>
  }

  /**
   * OdontologiaDetalle createMany
   */
  export type OdontologiaDetalleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OdontologiaDetalles.
     */
    data: OdontologiaDetalleCreateManyInput | OdontologiaDetalleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OdontologiaDetalle createManyAndReturn
   */
  export type OdontologiaDetalleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * The data used to create many OdontologiaDetalles.
     */
    data: OdontologiaDetalleCreateManyInput | OdontologiaDetalleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OdontologiaDetalle update
   */
  export type OdontologiaDetalleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    /**
     * The data needed to update a OdontologiaDetalle.
     */
    data: XOR<OdontologiaDetalleUpdateInput, OdontologiaDetalleUncheckedUpdateInput>
    /**
     * Choose, which OdontologiaDetalle to update.
     */
    where: OdontologiaDetalleWhereUniqueInput
  }

  /**
   * OdontologiaDetalle updateMany
   */
  export type OdontologiaDetalleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OdontologiaDetalles.
     */
    data: XOR<OdontologiaDetalleUpdateManyMutationInput, OdontologiaDetalleUncheckedUpdateManyInput>
    /**
     * Filter which OdontologiaDetalles to update
     */
    where?: OdontologiaDetalleWhereInput
    /**
     * Limit how many OdontologiaDetalles to update.
     */
    limit?: number
  }

  /**
   * OdontologiaDetalle updateManyAndReturn
   */
  export type OdontologiaDetalleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * The data used to update OdontologiaDetalles.
     */
    data: XOR<OdontologiaDetalleUpdateManyMutationInput, OdontologiaDetalleUncheckedUpdateManyInput>
    /**
     * Filter which OdontologiaDetalles to update
     */
    where?: OdontologiaDetalleWhereInput
    /**
     * Limit how many OdontologiaDetalles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OdontologiaDetalle upsert
   */
  export type OdontologiaDetalleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    /**
     * The filter to search for the OdontologiaDetalle to update in case it exists.
     */
    where: OdontologiaDetalleWhereUniqueInput
    /**
     * In case the OdontologiaDetalle found by the `where` argument doesn't exist, create a new OdontologiaDetalle with this data.
     */
    create: XOR<OdontologiaDetalleCreateInput, OdontologiaDetalleUncheckedCreateInput>
    /**
     * In case the OdontologiaDetalle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OdontologiaDetalleUpdateInput, OdontologiaDetalleUncheckedUpdateInput>
  }

  /**
   * OdontologiaDetalle delete
   */
  export type OdontologiaDetalleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter which OdontologiaDetalle to delete.
     */
    where: OdontologiaDetalleWhereUniqueInput
  }

  /**
   * OdontologiaDetalle deleteMany
   */
  export type OdontologiaDetalleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OdontologiaDetalles to delete
     */
    where?: OdontologiaDetalleWhereInput
    /**
     * Limit how many OdontologiaDetalles to delete.
     */
    limit?: number
  }

  /**
   * OdontologiaDetalle without action
   */
  export type OdontologiaDetalleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OdontologiaDetalle
     */
    select?: OdontologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OdontologiaDetalle
     */
    omit?: OdontologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OdontologiaDetalleInclude<ExtArgs> | null
  }


  /**
   * Model OftalmologiaDetalle
   */

  export type AggregateOftalmologiaDetalle = {
    _count: OftalmologiaDetalleCountAggregateOutputType | null
    _avg: OftalmologiaDetalleAvgAggregateOutputType | null
    _sum: OftalmologiaDetalleSumAggregateOutputType | null
    _min: OftalmologiaDetalleMinAggregateOutputType | null
    _max: OftalmologiaDetalleMaxAggregateOutputType | null
  }

  export type OftalmologiaDetalleAvgAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    presionIntraocularOD: Decimal | null
    presionIntraocularOI: Decimal | null
  }

  export type OftalmologiaDetalleSumAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    presionIntraocularOD: Decimal | null
    presionIntraocularOI: Decimal | null
  }

  export type OftalmologiaDetalleMinAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    agudezaVisualOD: string | null
    agudezaVisualOI: string | null
    presionIntraocularOD: Decimal | null
    presionIntraocularOI: Decimal | null
    fondoOjo: string | null
    formulaOptica: string | null
  }

  export type OftalmologiaDetalleMaxAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    agudezaVisualOD: string | null
    agudezaVisualOI: string | null
    presionIntraocularOD: Decimal | null
    presionIntraocularOI: Decimal | null
    fondoOjo: string | null
    formulaOptica: string | null
  }

  export type OftalmologiaDetalleCountAggregateOutputType = {
    id: number
    episodioClinicoId: number
    agudezaVisualOD: number
    agudezaVisualOI: number
    presionIntraocularOD: number
    presionIntraocularOI: number
    fondoOjo: number
    formulaOptica: number
    _all: number
  }


  export type OftalmologiaDetalleAvgAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    presionIntraocularOD?: true
    presionIntraocularOI?: true
  }

  export type OftalmologiaDetalleSumAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    presionIntraocularOD?: true
    presionIntraocularOI?: true
  }

  export type OftalmologiaDetalleMinAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    agudezaVisualOD?: true
    agudezaVisualOI?: true
    presionIntraocularOD?: true
    presionIntraocularOI?: true
    fondoOjo?: true
    formulaOptica?: true
  }

  export type OftalmologiaDetalleMaxAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    agudezaVisualOD?: true
    agudezaVisualOI?: true
    presionIntraocularOD?: true
    presionIntraocularOI?: true
    fondoOjo?: true
    formulaOptica?: true
  }

  export type OftalmologiaDetalleCountAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    agudezaVisualOD?: true
    agudezaVisualOI?: true
    presionIntraocularOD?: true
    presionIntraocularOI?: true
    fondoOjo?: true
    formulaOptica?: true
    _all?: true
  }

  export type OftalmologiaDetalleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OftalmologiaDetalle to aggregate.
     */
    where?: OftalmologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OftalmologiaDetalles to fetch.
     */
    orderBy?: OftalmologiaDetalleOrderByWithRelationInput | OftalmologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OftalmologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OftalmologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OftalmologiaDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OftalmologiaDetalles
    **/
    _count?: true | OftalmologiaDetalleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OftalmologiaDetalleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OftalmologiaDetalleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OftalmologiaDetalleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OftalmologiaDetalleMaxAggregateInputType
  }

  export type GetOftalmologiaDetalleAggregateType<T extends OftalmologiaDetalleAggregateArgs> = {
        [P in keyof T & keyof AggregateOftalmologiaDetalle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOftalmologiaDetalle[P]>
      : GetScalarType<T[P], AggregateOftalmologiaDetalle[P]>
  }




  export type OftalmologiaDetalleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OftalmologiaDetalleWhereInput
    orderBy?: OftalmologiaDetalleOrderByWithAggregationInput | OftalmologiaDetalleOrderByWithAggregationInput[]
    by: OftalmologiaDetalleScalarFieldEnum[] | OftalmologiaDetalleScalarFieldEnum
    having?: OftalmologiaDetalleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OftalmologiaDetalleCountAggregateInputType | true
    _avg?: OftalmologiaDetalleAvgAggregateInputType
    _sum?: OftalmologiaDetalleSumAggregateInputType
    _min?: OftalmologiaDetalleMinAggregateInputType
    _max?: OftalmologiaDetalleMaxAggregateInputType
  }

  export type OftalmologiaDetalleGroupByOutputType = {
    id: number
    episodioClinicoId: number
    agudezaVisualOD: string | null
    agudezaVisualOI: string | null
    presionIntraocularOD: Decimal | null
    presionIntraocularOI: Decimal | null
    fondoOjo: string | null
    formulaOptica: string | null
    _count: OftalmologiaDetalleCountAggregateOutputType | null
    _avg: OftalmologiaDetalleAvgAggregateOutputType | null
    _sum: OftalmologiaDetalleSumAggregateOutputType | null
    _min: OftalmologiaDetalleMinAggregateOutputType | null
    _max: OftalmologiaDetalleMaxAggregateOutputType | null
  }

  type GetOftalmologiaDetalleGroupByPayload<T extends OftalmologiaDetalleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OftalmologiaDetalleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OftalmologiaDetalleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OftalmologiaDetalleGroupByOutputType[P]>
            : GetScalarType<T[P], OftalmologiaDetalleGroupByOutputType[P]>
        }
      >
    >


  export type OftalmologiaDetalleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    agudezaVisualOD?: boolean
    agudezaVisualOI?: boolean
    presionIntraocularOD?: boolean
    presionIntraocularOI?: boolean
    fondoOjo?: boolean
    formulaOptica?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oftalmologiaDetalle"]>

  export type OftalmologiaDetalleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    agudezaVisualOD?: boolean
    agudezaVisualOI?: boolean
    presionIntraocularOD?: boolean
    presionIntraocularOI?: boolean
    fondoOjo?: boolean
    formulaOptica?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oftalmologiaDetalle"]>

  export type OftalmologiaDetalleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    agudezaVisualOD?: boolean
    agudezaVisualOI?: boolean
    presionIntraocularOD?: boolean
    presionIntraocularOI?: boolean
    fondoOjo?: boolean
    formulaOptica?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oftalmologiaDetalle"]>

  export type OftalmologiaDetalleSelectScalar = {
    id?: boolean
    episodioClinicoId?: boolean
    agudezaVisualOD?: boolean
    agudezaVisualOI?: boolean
    presionIntraocularOD?: boolean
    presionIntraocularOI?: boolean
    fondoOjo?: boolean
    formulaOptica?: boolean
  }

  export type OftalmologiaDetalleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodioClinicoId" | "agudezaVisualOD" | "agudezaVisualOI" | "presionIntraocularOD" | "presionIntraocularOI" | "fondoOjo" | "formulaOptica", ExtArgs["result"]["oftalmologiaDetalle"]>
  export type OftalmologiaDetalleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type OftalmologiaDetalleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type OftalmologiaDetalleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }

  export type $OftalmologiaDetallePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OftalmologiaDetalle"
    objects: {
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodioClinicoId: number
      agudezaVisualOD: string | null
      agudezaVisualOI: string | null
      presionIntraocularOD: Prisma.Decimal | null
      presionIntraocularOI: Prisma.Decimal | null
      fondoOjo: string | null
      formulaOptica: string | null
    }, ExtArgs["result"]["oftalmologiaDetalle"]>
    composites: {}
  }

  type OftalmologiaDetalleGetPayload<S extends boolean | null | undefined | OftalmologiaDetalleDefaultArgs> = $Result.GetResult<Prisma.$OftalmologiaDetallePayload, S>

  type OftalmologiaDetalleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OftalmologiaDetalleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OftalmologiaDetalleCountAggregateInputType | true
    }

  export interface OftalmologiaDetalleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OftalmologiaDetalle'], meta: { name: 'OftalmologiaDetalle' } }
    /**
     * Find zero or one OftalmologiaDetalle that matches the filter.
     * @param {OftalmologiaDetalleFindUniqueArgs} args - Arguments to find a OftalmologiaDetalle
     * @example
     * // Get one OftalmologiaDetalle
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OftalmologiaDetalleFindUniqueArgs>(args: SelectSubset<T, OftalmologiaDetalleFindUniqueArgs<ExtArgs>>): Prisma__OftalmologiaDetalleClient<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OftalmologiaDetalle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OftalmologiaDetalleFindUniqueOrThrowArgs} args - Arguments to find a OftalmologiaDetalle
     * @example
     * // Get one OftalmologiaDetalle
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OftalmologiaDetalleFindUniqueOrThrowArgs>(args: SelectSubset<T, OftalmologiaDetalleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OftalmologiaDetalleClient<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OftalmologiaDetalle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OftalmologiaDetalleFindFirstArgs} args - Arguments to find a OftalmologiaDetalle
     * @example
     * // Get one OftalmologiaDetalle
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OftalmologiaDetalleFindFirstArgs>(args?: SelectSubset<T, OftalmologiaDetalleFindFirstArgs<ExtArgs>>): Prisma__OftalmologiaDetalleClient<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OftalmologiaDetalle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OftalmologiaDetalleFindFirstOrThrowArgs} args - Arguments to find a OftalmologiaDetalle
     * @example
     * // Get one OftalmologiaDetalle
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OftalmologiaDetalleFindFirstOrThrowArgs>(args?: SelectSubset<T, OftalmologiaDetalleFindFirstOrThrowArgs<ExtArgs>>): Prisma__OftalmologiaDetalleClient<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OftalmologiaDetalles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OftalmologiaDetalleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OftalmologiaDetalles
     * const oftalmologiaDetalles = await prisma.oftalmologiaDetalle.findMany()
     * 
     * // Get first 10 OftalmologiaDetalles
     * const oftalmologiaDetalles = await prisma.oftalmologiaDetalle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oftalmologiaDetalleWithIdOnly = await prisma.oftalmologiaDetalle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OftalmologiaDetalleFindManyArgs>(args?: SelectSubset<T, OftalmologiaDetalleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OftalmologiaDetalle.
     * @param {OftalmologiaDetalleCreateArgs} args - Arguments to create a OftalmologiaDetalle.
     * @example
     * // Create one OftalmologiaDetalle
     * const OftalmologiaDetalle = await prisma.oftalmologiaDetalle.create({
     *   data: {
     *     // ... data to create a OftalmologiaDetalle
     *   }
     * })
     * 
     */
    create<T extends OftalmologiaDetalleCreateArgs>(args: SelectSubset<T, OftalmologiaDetalleCreateArgs<ExtArgs>>): Prisma__OftalmologiaDetalleClient<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OftalmologiaDetalles.
     * @param {OftalmologiaDetalleCreateManyArgs} args - Arguments to create many OftalmologiaDetalles.
     * @example
     * // Create many OftalmologiaDetalles
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OftalmologiaDetalleCreateManyArgs>(args?: SelectSubset<T, OftalmologiaDetalleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OftalmologiaDetalles and returns the data saved in the database.
     * @param {OftalmologiaDetalleCreateManyAndReturnArgs} args - Arguments to create many OftalmologiaDetalles.
     * @example
     * // Create many OftalmologiaDetalles
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OftalmologiaDetalles and only return the `id`
     * const oftalmologiaDetalleWithIdOnly = await prisma.oftalmologiaDetalle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OftalmologiaDetalleCreateManyAndReturnArgs>(args?: SelectSubset<T, OftalmologiaDetalleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OftalmologiaDetalle.
     * @param {OftalmologiaDetalleDeleteArgs} args - Arguments to delete one OftalmologiaDetalle.
     * @example
     * // Delete one OftalmologiaDetalle
     * const OftalmologiaDetalle = await prisma.oftalmologiaDetalle.delete({
     *   where: {
     *     // ... filter to delete one OftalmologiaDetalle
     *   }
     * })
     * 
     */
    delete<T extends OftalmologiaDetalleDeleteArgs>(args: SelectSubset<T, OftalmologiaDetalleDeleteArgs<ExtArgs>>): Prisma__OftalmologiaDetalleClient<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OftalmologiaDetalle.
     * @param {OftalmologiaDetalleUpdateArgs} args - Arguments to update one OftalmologiaDetalle.
     * @example
     * // Update one OftalmologiaDetalle
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OftalmologiaDetalleUpdateArgs>(args: SelectSubset<T, OftalmologiaDetalleUpdateArgs<ExtArgs>>): Prisma__OftalmologiaDetalleClient<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OftalmologiaDetalles.
     * @param {OftalmologiaDetalleDeleteManyArgs} args - Arguments to filter OftalmologiaDetalles to delete.
     * @example
     * // Delete a few OftalmologiaDetalles
     * const { count } = await prisma.oftalmologiaDetalle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OftalmologiaDetalleDeleteManyArgs>(args?: SelectSubset<T, OftalmologiaDetalleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OftalmologiaDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OftalmologiaDetalleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OftalmologiaDetalles
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OftalmologiaDetalleUpdateManyArgs>(args: SelectSubset<T, OftalmologiaDetalleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OftalmologiaDetalles and returns the data updated in the database.
     * @param {OftalmologiaDetalleUpdateManyAndReturnArgs} args - Arguments to update many OftalmologiaDetalles.
     * @example
     * // Update many OftalmologiaDetalles
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OftalmologiaDetalles and only return the `id`
     * const oftalmologiaDetalleWithIdOnly = await prisma.oftalmologiaDetalle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OftalmologiaDetalleUpdateManyAndReturnArgs>(args: SelectSubset<T, OftalmologiaDetalleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OftalmologiaDetalle.
     * @param {OftalmologiaDetalleUpsertArgs} args - Arguments to update or create a OftalmologiaDetalle.
     * @example
     * // Update or create a OftalmologiaDetalle
     * const oftalmologiaDetalle = await prisma.oftalmologiaDetalle.upsert({
     *   create: {
     *     // ... data to create a OftalmologiaDetalle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OftalmologiaDetalle we want to update
     *   }
     * })
     */
    upsert<T extends OftalmologiaDetalleUpsertArgs>(args: SelectSubset<T, OftalmologiaDetalleUpsertArgs<ExtArgs>>): Prisma__OftalmologiaDetalleClient<$Result.GetResult<Prisma.$OftalmologiaDetallePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OftalmologiaDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OftalmologiaDetalleCountArgs} args - Arguments to filter OftalmologiaDetalles to count.
     * @example
     * // Count the number of OftalmologiaDetalles
     * const count = await prisma.oftalmologiaDetalle.count({
     *   where: {
     *     // ... the filter for the OftalmologiaDetalles we want to count
     *   }
     * })
    **/
    count<T extends OftalmologiaDetalleCountArgs>(
      args?: Subset<T, OftalmologiaDetalleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OftalmologiaDetalleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OftalmologiaDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OftalmologiaDetalleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OftalmologiaDetalleAggregateArgs>(args: Subset<T, OftalmologiaDetalleAggregateArgs>): Prisma.PrismaPromise<GetOftalmologiaDetalleAggregateType<T>>

    /**
     * Group by OftalmologiaDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OftalmologiaDetalleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OftalmologiaDetalleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OftalmologiaDetalleGroupByArgs['orderBy'] }
        : { orderBy?: OftalmologiaDetalleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OftalmologiaDetalleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOftalmologiaDetalleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OftalmologiaDetalle model
   */
  readonly fields: OftalmologiaDetalleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OftalmologiaDetalle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OftalmologiaDetalleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodioClinico<T extends EpisodioClincoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClincoDefaultArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OftalmologiaDetalle model
   */
  interface OftalmologiaDetalleFieldRefs {
    readonly id: FieldRef<"OftalmologiaDetalle", 'Int'>
    readonly episodioClinicoId: FieldRef<"OftalmologiaDetalle", 'Int'>
    readonly agudezaVisualOD: FieldRef<"OftalmologiaDetalle", 'String'>
    readonly agudezaVisualOI: FieldRef<"OftalmologiaDetalle", 'String'>
    readonly presionIntraocularOD: FieldRef<"OftalmologiaDetalle", 'Decimal'>
    readonly presionIntraocularOI: FieldRef<"OftalmologiaDetalle", 'Decimal'>
    readonly fondoOjo: FieldRef<"OftalmologiaDetalle", 'String'>
    readonly formulaOptica: FieldRef<"OftalmologiaDetalle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OftalmologiaDetalle findUnique
   */
  export type OftalmologiaDetalleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OftalmologiaDetalle to fetch.
     */
    where: OftalmologiaDetalleWhereUniqueInput
  }

  /**
   * OftalmologiaDetalle findUniqueOrThrow
   */
  export type OftalmologiaDetalleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OftalmologiaDetalle to fetch.
     */
    where: OftalmologiaDetalleWhereUniqueInput
  }

  /**
   * OftalmologiaDetalle findFirst
   */
  export type OftalmologiaDetalleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OftalmologiaDetalle to fetch.
     */
    where?: OftalmologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OftalmologiaDetalles to fetch.
     */
    orderBy?: OftalmologiaDetalleOrderByWithRelationInput | OftalmologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OftalmologiaDetalles.
     */
    cursor?: OftalmologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OftalmologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OftalmologiaDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OftalmologiaDetalles.
     */
    distinct?: OftalmologiaDetalleScalarFieldEnum | OftalmologiaDetalleScalarFieldEnum[]
  }

  /**
   * OftalmologiaDetalle findFirstOrThrow
   */
  export type OftalmologiaDetalleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OftalmologiaDetalle to fetch.
     */
    where?: OftalmologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OftalmologiaDetalles to fetch.
     */
    orderBy?: OftalmologiaDetalleOrderByWithRelationInput | OftalmologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OftalmologiaDetalles.
     */
    cursor?: OftalmologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OftalmologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OftalmologiaDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OftalmologiaDetalles.
     */
    distinct?: OftalmologiaDetalleScalarFieldEnum | OftalmologiaDetalleScalarFieldEnum[]
  }

  /**
   * OftalmologiaDetalle findMany
   */
  export type OftalmologiaDetalleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which OftalmologiaDetalles to fetch.
     */
    where?: OftalmologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OftalmologiaDetalles to fetch.
     */
    orderBy?: OftalmologiaDetalleOrderByWithRelationInput | OftalmologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OftalmologiaDetalles.
     */
    cursor?: OftalmologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OftalmologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OftalmologiaDetalles.
     */
    skip?: number
    distinct?: OftalmologiaDetalleScalarFieldEnum | OftalmologiaDetalleScalarFieldEnum[]
  }

  /**
   * OftalmologiaDetalle create
   */
  export type OftalmologiaDetalleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    /**
     * The data needed to create a OftalmologiaDetalle.
     */
    data: XOR<OftalmologiaDetalleCreateInput, OftalmologiaDetalleUncheckedCreateInput>
  }

  /**
   * OftalmologiaDetalle createMany
   */
  export type OftalmologiaDetalleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OftalmologiaDetalles.
     */
    data: OftalmologiaDetalleCreateManyInput | OftalmologiaDetalleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OftalmologiaDetalle createManyAndReturn
   */
  export type OftalmologiaDetalleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * The data used to create many OftalmologiaDetalles.
     */
    data: OftalmologiaDetalleCreateManyInput | OftalmologiaDetalleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OftalmologiaDetalle update
   */
  export type OftalmologiaDetalleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    /**
     * The data needed to update a OftalmologiaDetalle.
     */
    data: XOR<OftalmologiaDetalleUpdateInput, OftalmologiaDetalleUncheckedUpdateInput>
    /**
     * Choose, which OftalmologiaDetalle to update.
     */
    where: OftalmologiaDetalleWhereUniqueInput
  }

  /**
   * OftalmologiaDetalle updateMany
   */
  export type OftalmologiaDetalleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OftalmologiaDetalles.
     */
    data: XOR<OftalmologiaDetalleUpdateManyMutationInput, OftalmologiaDetalleUncheckedUpdateManyInput>
    /**
     * Filter which OftalmologiaDetalles to update
     */
    where?: OftalmologiaDetalleWhereInput
    /**
     * Limit how many OftalmologiaDetalles to update.
     */
    limit?: number
  }

  /**
   * OftalmologiaDetalle updateManyAndReturn
   */
  export type OftalmologiaDetalleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * The data used to update OftalmologiaDetalles.
     */
    data: XOR<OftalmologiaDetalleUpdateManyMutationInput, OftalmologiaDetalleUncheckedUpdateManyInput>
    /**
     * Filter which OftalmologiaDetalles to update
     */
    where?: OftalmologiaDetalleWhereInput
    /**
     * Limit how many OftalmologiaDetalles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OftalmologiaDetalle upsert
   */
  export type OftalmologiaDetalleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    /**
     * The filter to search for the OftalmologiaDetalle to update in case it exists.
     */
    where: OftalmologiaDetalleWhereUniqueInput
    /**
     * In case the OftalmologiaDetalle found by the `where` argument doesn't exist, create a new OftalmologiaDetalle with this data.
     */
    create: XOR<OftalmologiaDetalleCreateInput, OftalmologiaDetalleUncheckedCreateInput>
    /**
     * In case the OftalmologiaDetalle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OftalmologiaDetalleUpdateInput, OftalmologiaDetalleUncheckedUpdateInput>
  }

  /**
   * OftalmologiaDetalle delete
   */
  export type OftalmologiaDetalleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter which OftalmologiaDetalle to delete.
     */
    where: OftalmologiaDetalleWhereUniqueInput
  }

  /**
   * OftalmologiaDetalle deleteMany
   */
  export type OftalmologiaDetalleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OftalmologiaDetalles to delete
     */
    where?: OftalmologiaDetalleWhereInput
    /**
     * Limit how many OftalmologiaDetalles to delete.
     */
    limit?: number
  }

  /**
   * OftalmologiaDetalle without action
   */
  export type OftalmologiaDetalleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OftalmologiaDetalle
     */
    select?: OftalmologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OftalmologiaDetalle
     */
    omit?: OftalmologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OftalmologiaDetalleInclude<ExtArgs> | null
  }


  /**
   * Model PsicologiaDetalle
   */

  export type AggregatePsicologiaDetalle = {
    _count: PsicologiaDetalleCountAggregateOutputType | null
    _avg: PsicologiaDetalleAvgAggregateOutputType | null
    _sum: PsicologiaDetalleSumAggregateOutputType | null
    _min: PsicologiaDetalleMinAggregateOutputType | null
    _max: PsicologiaDetalleMaxAggregateOutputType | null
  }

  export type PsicologiaDetalleAvgAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type PsicologiaDetalleSumAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type PsicologiaDetalleMinAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    evaluacionMental: string | null
    testAplicados: string | null
    impresionDiagnostica: string | null
    planIntervencion: string | null
    evolucion: string | null
  }

  export type PsicologiaDetalleMaxAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    evaluacionMental: string | null
    testAplicados: string | null
    impresionDiagnostica: string | null
    planIntervencion: string | null
    evolucion: string | null
  }

  export type PsicologiaDetalleCountAggregateOutputType = {
    id: number
    episodioClinicoId: number
    evaluacionMental: number
    testAplicados: number
    impresionDiagnostica: number
    planIntervencion: number
    evolucion: number
    _all: number
  }


  export type PsicologiaDetalleAvgAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type PsicologiaDetalleSumAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type PsicologiaDetalleMinAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    evaluacionMental?: true
    testAplicados?: true
    impresionDiagnostica?: true
    planIntervencion?: true
    evolucion?: true
  }

  export type PsicologiaDetalleMaxAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    evaluacionMental?: true
    testAplicados?: true
    impresionDiagnostica?: true
    planIntervencion?: true
    evolucion?: true
  }

  export type PsicologiaDetalleCountAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    evaluacionMental?: true
    testAplicados?: true
    impresionDiagnostica?: true
    planIntervencion?: true
    evolucion?: true
    _all?: true
  }

  export type PsicologiaDetalleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PsicologiaDetalle to aggregate.
     */
    where?: PsicologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsicologiaDetalles to fetch.
     */
    orderBy?: PsicologiaDetalleOrderByWithRelationInput | PsicologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PsicologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsicologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsicologiaDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PsicologiaDetalles
    **/
    _count?: true | PsicologiaDetalleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PsicologiaDetalleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PsicologiaDetalleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PsicologiaDetalleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PsicologiaDetalleMaxAggregateInputType
  }

  export type GetPsicologiaDetalleAggregateType<T extends PsicologiaDetalleAggregateArgs> = {
        [P in keyof T & keyof AggregatePsicologiaDetalle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePsicologiaDetalle[P]>
      : GetScalarType<T[P], AggregatePsicologiaDetalle[P]>
  }




  export type PsicologiaDetalleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PsicologiaDetalleWhereInput
    orderBy?: PsicologiaDetalleOrderByWithAggregationInput | PsicologiaDetalleOrderByWithAggregationInput[]
    by: PsicologiaDetalleScalarFieldEnum[] | PsicologiaDetalleScalarFieldEnum
    having?: PsicologiaDetalleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PsicologiaDetalleCountAggregateInputType | true
    _avg?: PsicologiaDetalleAvgAggregateInputType
    _sum?: PsicologiaDetalleSumAggregateInputType
    _min?: PsicologiaDetalleMinAggregateInputType
    _max?: PsicologiaDetalleMaxAggregateInputType
  }

  export type PsicologiaDetalleGroupByOutputType = {
    id: number
    episodioClinicoId: number
    evaluacionMental: string | null
    testAplicados: string | null
    impresionDiagnostica: string | null
    planIntervencion: string | null
    evolucion: string | null
    _count: PsicologiaDetalleCountAggregateOutputType | null
    _avg: PsicologiaDetalleAvgAggregateOutputType | null
    _sum: PsicologiaDetalleSumAggregateOutputType | null
    _min: PsicologiaDetalleMinAggregateOutputType | null
    _max: PsicologiaDetalleMaxAggregateOutputType | null
  }

  type GetPsicologiaDetalleGroupByPayload<T extends PsicologiaDetalleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PsicologiaDetalleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PsicologiaDetalleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PsicologiaDetalleGroupByOutputType[P]>
            : GetScalarType<T[P], PsicologiaDetalleGroupByOutputType[P]>
        }
      >
    >


  export type PsicologiaDetalleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    evaluacionMental?: boolean
    testAplicados?: boolean
    impresionDiagnostica?: boolean
    planIntervencion?: boolean
    evolucion?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["psicologiaDetalle"]>

  export type PsicologiaDetalleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    evaluacionMental?: boolean
    testAplicados?: boolean
    impresionDiagnostica?: boolean
    planIntervencion?: boolean
    evolucion?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["psicologiaDetalle"]>

  export type PsicologiaDetalleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    evaluacionMental?: boolean
    testAplicados?: boolean
    impresionDiagnostica?: boolean
    planIntervencion?: boolean
    evolucion?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["psicologiaDetalle"]>

  export type PsicologiaDetalleSelectScalar = {
    id?: boolean
    episodioClinicoId?: boolean
    evaluacionMental?: boolean
    testAplicados?: boolean
    impresionDiagnostica?: boolean
    planIntervencion?: boolean
    evolucion?: boolean
  }

  export type PsicologiaDetalleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodioClinicoId" | "evaluacionMental" | "testAplicados" | "impresionDiagnostica" | "planIntervencion" | "evolucion", ExtArgs["result"]["psicologiaDetalle"]>
  export type PsicologiaDetalleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type PsicologiaDetalleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type PsicologiaDetalleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }

  export type $PsicologiaDetallePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PsicologiaDetalle"
    objects: {
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodioClinicoId: number
      evaluacionMental: string | null
      testAplicados: string | null
      impresionDiagnostica: string | null
      planIntervencion: string | null
      evolucion: string | null
    }, ExtArgs["result"]["psicologiaDetalle"]>
    composites: {}
  }

  type PsicologiaDetalleGetPayload<S extends boolean | null | undefined | PsicologiaDetalleDefaultArgs> = $Result.GetResult<Prisma.$PsicologiaDetallePayload, S>

  type PsicologiaDetalleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PsicologiaDetalleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PsicologiaDetalleCountAggregateInputType | true
    }

  export interface PsicologiaDetalleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PsicologiaDetalle'], meta: { name: 'PsicologiaDetalle' } }
    /**
     * Find zero or one PsicologiaDetalle that matches the filter.
     * @param {PsicologiaDetalleFindUniqueArgs} args - Arguments to find a PsicologiaDetalle
     * @example
     * // Get one PsicologiaDetalle
     * const psicologiaDetalle = await prisma.psicologiaDetalle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PsicologiaDetalleFindUniqueArgs>(args: SelectSubset<T, PsicologiaDetalleFindUniqueArgs<ExtArgs>>): Prisma__PsicologiaDetalleClient<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PsicologiaDetalle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PsicologiaDetalleFindUniqueOrThrowArgs} args - Arguments to find a PsicologiaDetalle
     * @example
     * // Get one PsicologiaDetalle
     * const psicologiaDetalle = await prisma.psicologiaDetalle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PsicologiaDetalleFindUniqueOrThrowArgs>(args: SelectSubset<T, PsicologiaDetalleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PsicologiaDetalleClient<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PsicologiaDetalle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsicologiaDetalleFindFirstArgs} args - Arguments to find a PsicologiaDetalle
     * @example
     * // Get one PsicologiaDetalle
     * const psicologiaDetalle = await prisma.psicologiaDetalle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PsicologiaDetalleFindFirstArgs>(args?: SelectSubset<T, PsicologiaDetalleFindFirstArgs<ExtArgs>>): Prisma__PsicologiaDetalleClient<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PsicologiaDetalle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsicologiaDetalleFindFirstOrThrowArgs} args - Arguments to find a PsicologiaDetalle
     * @example
     * // Get one PsicologiaDetalle
     * const psicologiaDetalle = await prisma.psicologiaDetalle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PsicologiaDetalleFindFirstOrThrowArgs>(args?: SelectSubset<T, PsicologiaDetalleFindFirstOrThrowArgs<ExtArgs>>): Prisma__PsicologiaDetalleClient<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PsicologiaDetalles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsicologiaDetalleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PsicologiaDetalles
     * const psicologiaDetalles = await prisma.psicologiaDetalle.findMany()
     * 
     * // Get first 10 PsicologiaDetalles
     * const psicologiaDetalles = await prisma.psicologiaDetalle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const psicologiaDetalleWithIdOnly = await prisma.psicologiaDetalle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PsicologiaDetalleFindManyArgs>(args?: SelectSubset<T, PsicologiaDetalleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PsicologiaDetalle.
     * @param {PsicologiaDetalleCreateArgs} args - Arguments to create a PsicologiaDetalle.
     * @example
     * // Create one PsicologiaDetalle
     * const PsicologiaDetalle = await prisma.psicologiaDetalle.create({
     *   data: {
     *     // ... data to create a PsicologiaDetalle
     *   }
     * })
     * 
     */
    create<T extends PsicologiaDetalleCreateArgs>(args: SelectSubset<T, PsicologiaDetalleCreateArgs<ExtArgs>>): Prisma__PsicologiaDetalleClient<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PsicologiaDetalles.
     * @param {PsicologiaDetalleCreateManyArgs} args - Arguments to create many PsicologiaDetalles.
     * @example
     * // Create many PsicologiaDetalles
     * const psicologiaDetalle = await prisma.psicologiaDetalle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PsicologiaDetalleCreateManyArgs>(args?: SelectSubset<T, PsicologiaDetalleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PsicologiaDetalles and returns the data saved in the database.
     * @param {PsicologiaDetalleCreateManyAndReturnArgs} args - Arguments to create many PsicologiaDetalles.
     * @example
     * // Create many PsicologiaDetalles
     * const psicologiaDetalle = await prisma.psicologiaDetalle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PsicologiaDetalles and only return the `id`
     * const psicologiaDetalleWithIdOnly = await prisma.psicologiaDetalle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PsicologiaDetalleCreateManyAndReturnArgs>(args?: SelectSubset<T, PsicologiaDetalleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PsicologiaDetalle.
     * @param {PsicologiaDetalleDeleteArgs} args - Arguments to delete one PsicologiaDetalle.
     * @example
     * // Delete one PsicologiaDetalle
     * const PsicologiaDetalle = await prisma.psicologiaDetalle.delete({
     *   where: {
     *     // ... filter to delete one PsicologiaDetalle
     *   }
     * })
     * 
     */
    delete<T extends PsicologiaDetalleDeleteArgs>(args: SelectSubset<T, PsicologiaDetalleDeleteArgs<ExtArgs>>): Prisma__PsicologiaDetalleClient<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PsicologiaDetalle.
     * @param {PsicologiaDetalleUpdateArgs} args - Arguments to update one PsicologiaDetalle.
     * @example
     * // Update one PsicologiaDetalle
     * const psicologiaDetalle = await prisma.psicologiaDetalle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PsicologiaDetalleUpdateArgs>(args: SelectSubset<T, PsicologiaDetalleUpdateArgs<ExtArgs>>): Prisma__PsicologiaDetalleClient<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PsicologiaDetalles.
     * @param {PsicologiaDetalleDeleteManyArgs} args - Arguments to filter PsicologiaDetalles to delete.
     * @example
     * // Delete a few PsicologiaDetalles
     * const { count } = await prisma.psicologiaDetalle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PsicologiaDetalleDeleteManyArgs>(args?: SelectSubset<T, PsicologiaDetalleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PsicologiaDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsicologiaDetalleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PsicologiaDetalles
     * const psicologiaDetalle = await prisma.psicologiaDetalle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PsicologiaDetalleUpdateManyArgs>(args: SelectSubset<T, PsicologiaDetalleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PsicologiaDetalles and returns the data updated in the database.
     * @param {PsicologiaDetalleUpdateManyAndReturnArgs} args - Arguments to update many PsicologiaDetalles.
     * @example
     * // Update many PsicologiaDetalles
     * const psicologiaDetalle = await prisma.psicologiaDetalle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PsicologiaDetalles and only return the `id`
     * const psicologiaDetalleWithIdOnly = await prisma.psicologiaDetalle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PsicologiaDetalleUpdateManyAndReturnArgs>(args: SelectSubset<T, PsicologiaDetalleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PsicologiaDetalle.
     * @param {PsicologiaDetalleUpsertArgs} args - Arguments to update or create a PsicologiaDetalle.
     * @example
     * // Update or create a PsicologiaDetalle
     * const psicologiaDetalle = await prisma.psicologiaDetalle.upsert({
     *   create: {
     *     // ... data to create a PsicologiaDetalle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PsicologiaDetalle we want to update
     *   }
     * })
     */
    upsert<T extends PsicologiaDetalleUpsertArgs>(args: SelectSubset<T, PsicologiaDetalleUpsertArgs<ExtArgs>>): Prisma__PsicologiaDetalleClient<$Result.GetResult<Prisma.$PsicologiaDetallePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PsicologiaDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsicologiaDetalleCountArgs} args - Arguments to filter PsicologiaDetalles to count.
     * @example
     * // Count the number of PsicologiaDetalles
     * const count = await prisma.psicologiaDetalle.count({
     *   where: {
     *     // ... the filter for the PsicologiaDetalles we want to count
     *   }
     * })
    **/
    count<T extends PsicologiaDetalleCountArgs>(
      args?: Subset<T, PsicologiaDetalleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PsicologiaDetalleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PsicologiaDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsicologiaDetalleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PsicologiaDetalleAggregateArgs>(args: Subset<T, PsicologiaDetalleAggregateArgs>): Prisma.PrismaPromise<GetPsicologiaDetalleAggregateType<T>>

    /**
     * Group by PsicologiaDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsicologiaDetalleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PsicologiaDetalleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PsicologiaDetalleGroupByArgs['orderBy'] }
        : { orderBy?: PsicologiaDetalleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PsicologiaDetalleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPsicologiaDetalleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PsicologiaDetalle model
   */
  readonly fields: PsicologiaDetalleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PsicologiaDetalle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PsicologiaDetalleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodioClinico<T extends EpisodioClincoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClincoDefaultArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PsicologiaDetalle model
   */
  interface PsicologiaDetalleFieldRefs {
    readonly id: FieldRef<"PsicologiaDetalle", 'Int'>
    readonly episodioClinicoId: FieldRef<"PsicologiaDetalle", 'Int'>
    readonly evaluacionMental: FieldRef<"PsicologiaDetalle", 'String'>
    readonly testAplicados: FieldRef<"PsicologiaDetalle", 'String'>
    readonly impresionDiagnostica: FieldRef<"PsicologiaDetalle", 'String'>
    readonly planIntervencion: FieldRef<"PsicologiaDetalle", 'String'>
    readonly evolucion: FieldRef<"PsicologiaDetalle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PsicologiaDetalle findUnique
   */
  export type PsicologiaDetalleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which PsicologiaDetalle to fetch.
     */
    where: PsicologiaDetalleWhereUniqueInput
  }

  /**
   * PsicologiaDetalle findUniqueOrThrow
   */
  export type PsicologiaDetalleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which PsicologiaDetalle to fetch.
     */
    where: PsicologiaDetalleWhereUniqueInput
  }

  /**
   * PsicologiaDetalle findFirst
   */
  export type PsicologiaDetalleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which PsicologiaDetalle to fetch.
     */
    where?: PsicologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsicologiaDetalles to fetch.
     */
    orderBy?: PsicologiaDetalleOrderByWithRelationInput | PsicologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PsicologiaDetalles.
     */
    cursor?: PsicologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsicologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsicologiaDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PsicologiaDetalles.
     */
    distinct?: PsicologiaDetalleScalarFieldEnum | PsicologiaDetalleScalarFieldEnum[]
  }

  /**
   * PsicologiaDetalle findFirstOrThrow
   */
  export type PsicologiaDetalleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which PsicologiaDetalle to fetch.
     */
    where?: PsicologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsicologiaDetalles to fetch.
     */
    orderBy?: PsicologiaDetalleOrderByWithRelationInput | PsicologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PsicologiaDetalles.
     */
    cursor?: PsicologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsicologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsicologiaDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PsicologiaDetalles.
     */
    distinct?: PsicologiaDetalleScalarFieldEnum | PsicologiaDetalleScalarFieldEnum[]
  }

  /**
   * PsicologiaDetalle findMany
   */
  export type PsicologiaDetalleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter, which PsicologiaDetalles to fetch.
     */
    where?: PsicologiaDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsicologiaDetalles to fetch.
     */
    orderBy?: PsicologiaDetalleOrderByWithRelationInput | PsicologiaDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PsicologiaDetalles.
     */
    cursor?: PsicologiaDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsicologiaDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsicologiaDetalles.
     */
    skip?: number
    distinct?: PsicologiaDetalleScalarFieldEnum | PsicologiaDetalleScalarFieldEnum[]
  }

  /**
   * PsicologiaDetalle create
   */
  export type PsicologiaDetalleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    /**
     * The data needed to create a PsicologiaDetalle.
     */
    data: XOR<PsicologiaDetalleCreateInput, PsicologiaDetalleUncheckedCreateInput>
  }

  /**
   * PsicologiaDetalle createMany
   */
  export type PsicologiaDetalleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PsicologiaDetalles.
     */
    data: PsicologiaDetalleCreateManyInput | PsicologiaDetalleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PsicologiaDetalle createManyAndReturn
   */
  export type PsicologiaDetalleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * The data used to create many PsicologiaDetalles.
     */
    data: PsicologiaDetalleCreateManyInput | PsicologiaDetalleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PsicologiaDetalle update
   */
  export type PsicologiaDetalleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    /**
     * The data needed to update a PsicologiaDetalle.
     */
    data: XOR<PsicologiaDetalleUpdateInput, PsicologiaDetalleUncheckedUpdateInput>
    /**
     * Choose, which PsicologiaDetalle to update.
     */
    where: PsicologiaDetalleWhereUniqueInput
  }

  /**
   * PsicologiaDetalle updateMany
   */
  export type PsicologiaDetalleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PsicologiaDetalles.
     */
    data: XOR<PsicologiaDetalleUpdateManyMutationInput, PsicologiaDetalleUncheckedUpdateManyInput>
    /**
     * Filter which PsicologiaDetalles to update
     */
    where?: PsicologiaDetalleWhereInput
    /**
     * Limit how many PsicologiaDetalles to update.
     */
    limit?: number
  }

  /**
   * PsicologiaDetalle updateManyAndReturn
   */
  export type PsicologiaDetalleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * The data used to update PsicologiaDetalles.
     */
    data: XOR<PsicologiaDetalleUpdateManyMutationInput, PsicologiaDetalleUncheckedUpdateManyInput>
    /**
     * Filter which PsicologiaDetalles to update
     */
    where?: PsicologiaDetalleWhereInput
    /**
     * Limit how many PsicologiaDetalles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PsicologiaDetalle upsert
   */
  export type PsicologiaDetalleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    /**
     * The filter to search for the PsicologiaDetalle to update in case it exists.
     */
    where: PsicologiaDetalleWhereUniqueInput
    /**
     * In case the PsicologiaDetalle found by the `where` argument doesn't exist, create a new PsicologiaDetalle with this data.
     */
    create: XOR<PsicologiaDetalleCreateInput, PsicologiaDetalleUncheckedCreateInput>
    /**
     * In case the PsicologiaDetalle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PsicologiaDetalleUpdateInput, PsicologiaDetalleUncheckedUpdateInput>
  }

  /**
   * PsicologiaDetalle delete
   */
  export type PsicologiaDetalleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
    /**
     * Filter which PsicologiaDetalle to delete.
     */
    where: PsicologiaDetalleWhereUniqueInput
  }

  /**
   * PsicologiaDetalle deleteMany
   */
  export type PsicologiaDetalleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PsicologiaDetalles to delete
     */
    where?: PsicologiaDetalleWhereInput
    /**
     * Limit how many PsicologiaDetalles to delete.
     */
    limit?: number
  }

  /**
   * PsicologiaDetalle without action
   */
  export type PsicologiaDetalleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsicologiaDetalle
     */
    select?: PsicologiaDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsicologiaDetalle
     */
    omit?: PsicologiaDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsicologiaDetalleInclude<ExtArgs> | null
  }


  /**
   * Model TrabajoSocialDetalle
   */

  export type AggregateTrabajoSocialDetalle = {
    _count: TrabajoSocialDetalleCountAggregateOutputType | null
    _avg: TrabajoSocialDetalleAvgAggregateOutputType | null
    _sum: TrabajoSocialDetalleSumAggregateOutputType | null
    _min: TrabajoSocialDetalleMinAggregateOutputType | null
    _max: TrabajoSocialDetalleMaxAggregateOutputType | null
  }

  export type TrabajoSocialDetalleAvgAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type TrabajoSocialDetalleSumAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
  }

  export type TrabajoSocialDetalleMinAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    evaluacionSocioeconomica: string | null
    dinamicaFamiliar: string | null
    redesApoyo: string | null
    intervencionRealizada: string | null
    seguimientoCaso: string | null
  }

  export type TrabajoSocialDetalleMaxAggregateOutputType = {
    id: number | null
    episodioClinicoId: number | null
    evaluacionSocioeconomica: string | null
    dinamicaFamiliar: string | null
    redesApoyo: string | null
    intervencionRealizada: string | null
    seguimientoCaso: string | null
  }

  export type TrabajoSocialDetalleCountAggregateOutputType = {
    id: number
    episodioClinicoId: number
    evaluacionSocioeconomica: number
    dinamicaFamiliar: number
    redesApoyo: number
    intervencionRealizada: number
    seguimientoCaso: number
    _all: number
  }


  export type TrabajoSocialDetalleAvgAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type TrabajoSocialDetalleSumAggregateInputType = {
    id?: true
    episodioClinicoId?: true
  }

  export type TrabajoSocialDetalleMinAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    evaluacionSocioeconomica?: true
    dinamicaFamiliar?: true
    redesApoyo?: true
    intervencionRealizada?: true
    seguimientoCaso?: true
  }

  export type TrabajoSocialDetalleMaxAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    evaluacionSocioeconomica?: true
    dinamicaFamiliar?: true
    redesApoyo?: true
    intervencionRealizada?: true
    seguimientoCaso?: true
  }

  export type TrabajoSocialDetalleCountAggregateInputType = {
    id?: true
    episodioClinicoId?: true
    evaluacionSocioeconomica?: true
    dinamicaFamiliar?: true
    redesApoyo?: true
    intervencionRealizada?: true
    seguimientoCaso?: true
    _all?: true
  }

  export type TrabajoSocialDetalleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrabajoSocialDetalle to aggregate.
     */
    where?: TrabajoSocialDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrabajoSocialDetalles to fetch.
     */
    orderBy?: TrabajoSocialDetalleOrderByWithRelationInput | TrabajoSocialDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrabajoSocialDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrabajoSocialDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrabajoSocialDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrabajoSocialDetalles
    **/
    _count?: true | TrabajoSocialDetalleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrabajoSocialDetalleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrabajoSocialDetalleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrabajoSocialDetalleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrabajoSocialDetalleMaxAggregateInputType
  }

  export type GetTrabajoSocialDetalleAggregateType<T extends TrabajoSocialDetalleAggregateArgs> = {
        [P in keyof T & keyof AggregateTrabajoSocialDetalle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrabajoSocialDetalle[P]>
      : GetScalarType<T[P], AggregateTrabajoSocialDetalle[P]>
  }




  export type TrabajoSocialDetalleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrabajoSocialDetalleWhereInput
    orderBy?: TrabajoSocialDetalleOrderByWithAggregationInput | TrabajoSocialDetalleOrderByWithAggregationInput[]
    by: TrabajoSocialDetalleScalarFieldEnum[] | TrabajoSocialDetalleScalarFieldEnum
    having?: TrabajoSocialDetalleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrabajoSocialDetalleCountAggregateInputType | true
    _avg?: TrabajoSocialDetalleAvgAggregateInputType
    _sum?: TrabajoSocialDetalleSumAggregateInputType
    _min?: TrabajoSocialDetalleMinAggregateInputType
    _max?: TrabajoSocialDetalleMaxAggregateInputType
  }

  export type TrabajoSocialDetalleGroupByOutputType = {
    id: number
    episodioClinicoId: number
    evaluacionSocioeconomica: string | null
    dinamicaFamiliar: string | null
    redesApoyo: string | null
    intervencionRealizada: string | null
    seguimientoCaso: string | null
    _count: TrabajoSocialDetalleCountAggregateOutputType | null
    _avg: TrabajoSocialDetalleAvgAggregateOutputType | null
    _sum: TrabajoSocialDetalleSumAggregateOutputType | null
    _min: TrabajoSocialDetalleMinAggregateOutputType | null
    _max: TrabajoSocialDetalleMaxAggregateOutputType | null
  }

  type GetTrabajoSocialDetalleGroupByPayload<T extends TrabajoSocialDetalleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrabajoSocialDetalleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrabajoSocialDetalleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrabajoSocialDetalleGroupByOutputType[P]>
            : GetScalarType<T[P], TrabajoSocialDetalleGroupByOutputType[P]>
        }
      >
    >


  export type TrabajoSocialDetalleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    evaluacionSocioeconomica?: boolean
    dinamicaFamiliar?: boolean
    redesApoyo?: boolean
    intervencionRealizada?: boolean
    seguimientoCaso?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trabajoSocialDetalle"]>

  export type TrabajoSocialDetalleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    evaluacionSocioeconomica?: boolean
    dinamicaFamiliar?: boolean
    redesApoyo?: boolean
    intervencionRealizada?: boolean
    seguimientoCaso?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trabajoSocialDetalle"]>

  export type TrabajoSocialDetalleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodioClinicoId?: boolean
    evaluacionSocioeconomica?: boolean
    dinamicaFamiliar?: boolean
    redesApoyo?: boolean
    intervencionRealizada?: boolean
    seguimientoCaso?: boolean
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trabajoSocialDetalle"]>

  export type TrabajoSocialDetalleSelectScalar = {
    id?: boolean
    episodioClinicoId?: boolean
    evaluacionSocioeconomica?: boolean
    dinamicaFamiliar?: boolean
    redesApoyo?: boolean
    intervencionRealizada?: boolean
    seguimientoCaso?: boolean
  }

  export type TrabajoSocialDetalleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodioClinicoId" | "evaluacionSocioeconomica" | "dinamicaFamiliar" | "redesApoyo" | "intervencionRealizada" | "seguimientoCaso", ExtArgs["result"]["trabajoSocialDetalle"]>
  export type TrabajoSocialDetalleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type TrabajoSocialDetalleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }
  export type TrabajoSocialDetalleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodioClinico?: boolean | EpisodioClincoDefaultArgs<ExtArgs>
  }

  export type $TrabajoSocialDetallePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrabajoSocialDetalle"
    objects: {
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodioClinicoId: number
      evaluacionSocioeconomica: string | null
      dinamicaFamiliar: string | null
      redesApoyo: string | null
      intervencionRealizada: string | null
      seguimientoCaso: string | null
    }, ExtArgs["result"]["trabajoSocialDetalle"]>
    composites: {}
  }

  type TrabajoSocialDetalleGetPayload<S extends boolean | null | undefined | TrabajoSocialDetalleDefaultArgs> = $Result.GetResult<Prisma.$TrabajoSocialDetallePayload, S>

  type TrabajoSocialDetalleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrabajoSocialDetalleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrabajoSocialDetalleCountAggregateInputType | true
    }

  export interface TrabajoSocialDetalleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrabajoSocialDetalle'], meta: { name: 'TrabajoSocialDetalle' } }
    /**
     * Find zero or one TrabajoSocialDetalle that matches the filter.
     * @param {TrabajoSocialDetalleFindUniqueArgs} args - Arguments to find a TrabajoSocialDetalle
     * @example
     * // Get one TrabajoSocialDetalle
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrabajoSocialDetalleFindUniqueArgs>(args: SelectSubset<T, TrabajoSocialDetalleFindUniqueArgs<ExtArgs>>): Prisma__TrabajoSocialDetalleClient<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrabajoSocialDetalle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrabajoSocialDetalleFindUniqueOrThrowArgs} args - Arguments to find a TrabajoSocialDetalle
     * @example
     * // Get one TrabajoSocialDetalle
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrabajoSocialDetalleFindUniqueOrThrowArgs>(args: SelectSubset<T, TrabajoSocialDetalleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrabajoSocialDetalleClient<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrabajoSocialDetalle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabajoSocialDetalleFindFirstArgs} args - Arguments to find a TrabajoSocialDetalle
     * @example
     * // Get one TrabajoSocialDetalle
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrabajoSocialDetalleFindFirstArgs>(args?: SelectSubset<T, TrabajoSocialDetalleFindFirstArgs<ExtArgs>>): Prisma__TrabajoSocialDetalleClient<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrabajoSocialDetalle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabajoSocialDetalleFindFirstOrThrowArgs} args - Arguments to find a TrabajoSocialDetalle
     * @example
     * // Get one TrabajoSocialDetalle
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrabajoSocialDetalleFindFirstOrThrowArgs>(args?: SelectSubset<T, TrabajoSocialDetalleFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrabajoSocialDetalleClient<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrabajoSocialDetalles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabajoSocialDetalleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrabajoSocialDetalles
     * const trabajoSocialDetalles = await prisma.trabajoSocialDetalle.findMany()
     * 
     * // Get first 10 TrabajoSocialDetalles
     * const trabajoSocialDetalles = await prisma.trabajoSocialDetalle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trabajoSocialDetalleWithIdOnly = await prisma.trabajoSocialDetalle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrabajoSocialDetalleFindManyArgs>(args?: SelectSubset<T, TrabajoSocialDetalleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrabajoSocialDetalle.
     * @param {TrabajoSocialDetalleCreateArgs} args - Arguments to create a TrabajoSocialDetalle.
     * @example
     * // Create one TrabajoSocialDetalle
     * const TrabajoSocialDetalle = await prisma.trabajoSocialDetalle.create({
     *   data: {
     *     // ... data to create a TrabajoSocialDetalle
     *   }
     * })
     * 
     */
    create<T extends TrabajoSocialDetalleCreateArgs>(args: SelectSubset<T, TrabajoSocialDetalleCreateArgs<ExtArgs>>): Prisma__TrabajoSocialDetalleClient<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrabajoSocialDetalles.
     * @param {TrabajoSocialDetalleCreateManyArgs} args - Arguments to create many TrabajoSocialDetalles.
     * @example
     * // Create many TrabajoSocialDetalles
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrabajoSocialDetalleCreateManyArgs>(args?: SelectSubset<T, TrabajoSocialDetalleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrabajoSocialDetalles and returns the data saved in the database.
     * @param {TrabajoSocialDetalleCreateManyAndReturnArgs} args - Arguments to create many TrabajoSocialDetalles.
     * @example
     * // Create many TrabajoSocialDetalles
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrabajoSocialDetalles and only return the `id`
     * const trabajoSocialDetalleWithIdOnly = await prisma.trabajoSocialDetalle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrabajoSocialDetalleCreateManyAndReturnArgs>(args?: SelectSubset<T, TrabajoSocialDetalleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrabajoSocialDetalle.
     * @param {TrabajoSocialDetalleDeleteArgs} args - Arguments to delete one TrabajoSocialDetalle.
     * @example
     * // Delete one TrabajoSocialDetalle
     * const TrabajoSocialDetalle = await prisma.trabajoSocialDetalle.delete({
     *   where: {
     *     // ... filter to delete one TrabajoSocialDetalle
     *   }
     * })
     * 
     */
    delete<T extends TrabajoSocialDetalleDeleteArgs>(args: SelectSubset<T, TrabajoSocialDetalleDeleteArgs<ExtArgs>>): Prisma__TrabajoSocialDetalleClient<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrabajoSocialDetalle.
     * @param {TrabajoSocialDetalleUpdateArgs} args - Arguments to update one TrabajoSocialDetalle.
     * @example
     * // Update one TrabajoSocialDetalle
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrabajoSocialDetalleUpdateArgs>(args: SelectSubset<T, TrabajoSocialDetalleUpdateArgs<ExtArgs>>): Prisma__TrabajoSocialDetalleClient<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrabajoSocialDetalles.
     * @param {TrabajoSocialDetalleDeleteManyArgs} args - Arguments to filter TrabajoSocialDetalles to delete.
     * @example
     * // Delete a few TrabajoSocialDetalles
     * const { count } = await prisma.trabajoSocialDetalle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrabajoSocialDetalleDeleteManyArgs>(args?: SelectSubset<T, TrabajoSocialDetalleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrabajoSocialDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabajoSocialDetalleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrabajoSocialDetalles
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrabajoSocialDetalleUpdateManyArgs>(args: SelectSubset<T, TrabajoSocialDetalleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrabajoSocialDetalles and returns the data updated in the database.
     * @param {TrabajoSocialDetalleUpdateManyAndReturnArgs} args - Arguments to update many TrabajoSocialDetalles.
     * @example
     * // Update many TrabajoSocialDetalles
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrabajoSocialDetalles and only return the `id`
     * const trabajoSocialDetalleWithIdOnly = await prisma.trabajoSocialDetalle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrabajoSocialDetalleUpdateManyAndReturnArgs>(args: SelectSubset<T, TrabajoSocialDetalleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrabajoSocialDetalle.
     * @param {TrabajoSocialDetalleUpsertArgs} args - Arguments to update or create a TrabajoSocialDetalle.
     * @example
     * // Update or create a TrabajoSocialDetalle
     * const trabajoSocialDetalle = await prisma.trabajoSocialDetalle.upsert({
     *   create: {
     *     // ... data to create a TrabajoSocialDetalle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrabajoSocialDetalle we want to update
     *   }
     * })
     */
    upsert<T extends TrabajoSocialDetalleUpsertArgs>(args: SelectSubset<T, TrabajoSocialDetalleUpsertArgs<ExtArgs>>): Prisma__TrabajoSocialDetalleClient<$Result.GetResult<Prisma.$TrabajoSocialDetallePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrabajoSocialDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabajoSocialDetalleCountArgs} args - Arguments to filter TrabajoSocialDetalles to count.
     * @example
     * // Count the number of TrabajoSocialDetalles
     * const count = await prisma.trabajoSocialDetalle.count({
     *   where: {
     *     // ... the filter for the TrabajoSocialDetalles we want to count
     *   }
     * })
    **/
    count<T extends TrabajoSocialDetalleCountArgs>(
      args?: Subset<T, TrabajoSocialDetalleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrabajoSocialDetalleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrabajoSocialDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabajoSocialDetalleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrabajoSocialDetalleAggregateArgs>(args: Subset<T, TrabajoSocialDetalleAggregateArgs>): Prisma.PrismaPromise<GetTrabajoSocialDetalleAggregateType<T>>

    /**
     * Group by TrabajoSocialDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrabajoSocialDetalleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrabajoSocialDetalleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrabajoSocialDetalleGroupByArgs['orderBy'] }
        : { orderBy?: TrabajoSocialDetalleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrabajoSocialDetalleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrabajoSocialDetalleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrabajoSocialDetalle model
   */
  readonly fields: TrabajoSocialDetalleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrabajoSocialDetalle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrabajoSocialDetalleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodioClinico<T extends EpisodioClincoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EpisodioClincoDefaultArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrabajoSocialDetalle model
   */
  interface TrabajoSocialDetalleFieldRefs {
    readonly id: FieldRef<"TrabajoSocialDetalle", 'Int'>
    readonly episodioClinicoId: FieldRef<"TrabajoSocialDetalle", 'Int'>
    readonly evaluacionSocioeconomica: FieldRef<"TrabajoSocialDetalle", 'String'>
    readonly dinamicaFamiliar: FieldRef<"TrabajoSocialDetalle", 'String'>
    readonly redesApoyo: FieldRef<"TrabajoSocialDetalle", 'String'>
    readonly intervencionRealizada: FieldRef<"TrabajoSocialDetalle", 'String'>
    readonly seguimientoCaso: FieldRef<"TrabajoSocialDetalle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TrabajoSocialDetalle findUnique
   */
  export type TrabajoSocialDetalleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    /**
     * Filter, which TrabajoSocialDetalle to fetch.
     */
    where: TrabajoSocialDetalleWhereUniqueInput
  }

  /**
   * TrabajoSocialDetalle findUniqueOrThrow
   */
  export type TrabajoSocialDetalleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    /**
     * Filter, which TrabajoSocialDetalle to fetch.
     */
    where: TrabajoSocialDetalleWhereUniqueInput
  }

  /**
   * TrabajoSocialDetalle findFirst
   */
  export type TrabajoSocialDetalleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    /**
     * Filter, which TrabajoSocialDetalle to fetch.
     */
    where?: TrabajoSocialDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrabajoSocialDetalles to fetch.
     */
    orderBy?: TrabajoSocialDetalleOrderByWithRelationInput | TrabajoSocialDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrabajoSocialDetalles.
     */
    cursor?: TrabajoSocialDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrabajoSocialDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrabajoSocialDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrabajoSocialDetalles.
     */
    distinct?: TrabajoSocialDetalleScalarFieldEnum | TrabajoSocialDetalleScalarFieldEnum[]
  }

  /**
   * TrabajoSocialDetalle findFirstOrThrow
   */
  export type TrabajoSocialDetalleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    /**
     * Filter, which TrabajoSocialDetalle to fetch.
     */
    where?: TrabajoSocialDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrabajoSocialDetalles to fetch.
     */
    orderBy?: TrabajoSocialDetalleOrderByWithRelationInput | TrabajoSocialDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrabajoSocialDetalles.
     */
    cursor?: TrabajoSocialDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrabajoSocialDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrabajoSocialDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrabajoSocialDetalles.
     */
    distinct?: TrabajoSocialDetalleScalarFieldEnum | TrabajoSocialDetalleScalarFieldEnum[]
  }

  /**
   * TrabajoSocialDetalle findMany
   */
  export type TrabajoSocialDetalleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    /**
     * Filter, which TrabajoSocialDetalles to fetch.
     */
    where?: TrabajoSocialDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrabajoSocialDetalles to fetch.
     */
    orderBy?: TrabajoSocialDetalleOrderByWithRelationInput | TrabajoSocialDetalleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrabajoSocialDetalles.
     */
    cursor?: TrabajoSocialDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrabajoSocialDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrabajoSocialDetalles.
     */
    skip?: number
    distinct?: TrabajoSocialDetalleScalarFieldEnum | TrabajoSocialDetalleScalarFieldEnum[]
  }

  /**
   * TrabajoSocialDetalle create
   */
  export type TrabajoSocialDetalleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    /**
     * The data needed to create a TrabajoSocialDetalle.
     */
    data: XOR<TrabajoSocialDetalleCreateInput, TrabajoSocialDetalleUncheckedCreateInput>
  }

  /**
   * TrabajoSocialDetalle createMany
   */
  export type TrabajoSocialDetalleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrabajoSocialDetalles.
     */
    data: TrabajoSocialDetalleCreateManyInput | TrabajoSocialDetalleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrabajoSocialDetalle createManyAndReturn
   */
  export type TrabajoSocialDetalleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * The data used to create many TrabajoSocialDetalles.
     */
    data: TrabajoSocialDetalleCreateManyInput | TrabajoSocialDetalleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrabajoSocialDetalle update
   */
  export type TrabajoSocialDetalleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    /**
     * The data needed to update a TrabajoSocialDetalle.
     */
    data: XOR<TrabajoSocialDetalleUpdateInput, TrabajoSocialDetalleUncheckedUpdateInput>
    /**
     * Choose, which TrabajoSocialDetalle to update.
     */
    where: TrabajoSocialDetalleWhereUniqueInput
  }

  /**
   * TrabajoSocialDetalle updateMany
   */
  export type TrabajoSocialDetalleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrabajoSocialDetalles.
     */
    data: XOR<TrabajoSocialDetalleUpdateManyMutationInput, TrabajoSocialDetalleUncheckedUpdateManyInput>
    /**
     * Filter which TrabajoSocialDetalles to update
     */
    where?: TrabajoSocialDetalleWhereInput
    /**
     * Limit how many TrabajoSocialDetalles to update.
     */
    limit?: number
  }

  /**
   * TrabajoSocialDetalle updateManyAndReturn
   */
  export type TrabajoSocialDetalleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * The data used to update TrabajoSocialDetalles.
     */
    data: XOR<TrabajoSocialDetalleUpdateManyMutationInput, TrabajoSocialDetalleUncheckedUpdateManyInput>
    /**
     * Filter which TrabajoSocialDetalles to update
     */
    where?: TrabajoSocialDetalleWhereInput
    /**
     * Limit how many TrabajoSocialDetalles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrabajoSocialDetalle upsert
   */
  export type TrabajoSocialDetalleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    /**
     * The filter to search for the TrabajoSocialDetalle to update in case it exists.
     */
    where: TrabajoSocialDetalleWhereUniqueInput
    /**
     * In case the TrabajoSocialDetalle found by the `where` argument doesn't exist, create a new TrabajoSocialDetalle with this data.
     */
    create: XOR<TrabajoSocialDetalleCreateInput, TrabajoSocialDetalleUncheckedCreateInput>
    /**
     * In case the TrabajoSocialDetalle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrabajoSocialDetalleUpdateInput, TrabajoSocialDetalleUncheckedUpdateInput>
  }

  /**
   * TrabajoSocialDetalle delete
   */
  export type TrabajoSocialDetalleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
    /**
     * Filter which TrabajoSocialDetalle to delete.
     */
    where: TrabajoSocialDetalleWhereUniqueInput
  }

  /**
   * TrabajoSocialDetalle deleteMany
   */
  export type TrabajoSocialDetalleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrabajoSocialDetalles to delete
     */
    where?: TrabajoSocialDetalleWhereInput
    /**
     * Limit how many TrabajoSocialDetalles to delete.
     */
    limit?: number
  }

  /**
   * TrabajoSocialDetalle without action
   */
  export type TrabajoSocialDetalleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrabajoSocialDetalle
     */
    select?: TrabajoSocialDetalleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrabajoSocialDetalle
     */
    omit?: TrabajoSocialDetalleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrabajoSocialDetalleInclude<ExtArgs> | null
  }


  /**
   * Model AuditoriaHistoria
   */

  export type AggregateAuditoriaHistoria = {
    _count: AuditoriaHistoriaCountAggregateOutputType | null
    _avg: AuditoriaHistoriaAvgAggregateOutputType | null
    _sum: AuditoriaHistoriaSumAggregateOutputType | null
    _min: AuditoriaHistoriaMinAggregateOutputType | null
    _max: AuditoriaHistoriaMaxAggregateOutputType | null
  }

  export type AuditoriaHistoriaAvgAggregateOutputType = {
    id: number | null
    historiaClinicaId: number | null
    episodioClinicoId: number | null
    usuarioId: number | null
    idRegistro: number | null
  }

  export type AuditoriaHistoriaSumAggregateOutputType = {
    id: number | null
    historiaClinicaId: number | null
    episodioClinicoId: number | null
    usuarioId: number | null
    idRegistro: number | null
  }

  export type AuditoriaHistoriaMinAggregateOutputType = {
    id: number | null
    historiaClinicaId: number | null
    episodioClinicoId: number | null
    usuarioId: number | null
    fechaAccion: Date | null
    tipoAccion: string | null
    descripcion: string | null
    tablaAfectada: string | null
    idRegistro: number | null
    datosAntiguos: string | null
    datosNuevos: string | null
    direccionIp: string | null
  }

  export type AuditoriaHistoriaMaxAggregateOutputType = {
    id: number | null
    historiaClinicaId: number | null
    episodioClinicoId: number | null
    usuarioId: number | null
    fechaAccion: Date | null
    tipoAccion: string | null
    descripcion: string | null
    tablaAfectada: string | null
    idRegistro: number | null
    datosAntiguos: string | null
    datosNuevos: string | null
    direccionIp: string | null
  }

  export type AuditoriaHistoriaCountAggregateOutputType = {
    id: number
    historiaClinicaId: number
    episodioClinicoId: number
    usuarioId: number
    fechaAccion: number
    tipoAccion: number
    descripcion: number
    tablaAfectada: number
    idRegistro: number
    datosAntiguos: number
    datosNuevos: number
    direccionIp: number
    _all: number
  }


  export type AuditoriaHistoriaAvgAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    episodioClinicoId?: true
    usuarioId?: true
    idRegistro?: true
  }

  export type AuditoriaHistoriaSumAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    episodioClinicoId?: true
    usuarioId?: true
    idRegistro?: true
  }

  export type AuditoriaHistoriaMinAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    episodioClinicoId?: true
    usuarioId?: true
    fechaAccion?: true
    tipoAccion?: true
    descripcion?: true
    tablaAfectada?: true
    idRegistro?: true
    datosAntiguos?: true
    datosNuevos?: true
    direccionIp?: true
  }

  export type AuditoriaHistoriaMaxAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    episodioClinicoId?: true
    usuarioId?: true
    fechaAccion?: true
    tipoAccion?: true
    descripcion?: true
    tablaAfectada?: true
    idRegistro?: true
    datosAntiguos?: true
    datosNuevos?: true
    direccionIp?: true
  }

  export type AuditoriaHistoriaCountAggregateInputType = {
    id?: true
    historiaClinicaId?: true
    episodioClinicoId?: true
    usuarioId?: true
    fechaAccion?: true
    tipoAccion?: true
    descripcion?: true
    tablaAfectada?: true
    idRegistro?: true
    datosAntiguos?: true
    datosNuevos?: true
    direccionIp?: true
    _all?: true
  }

  export type AuditoriaHistoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditoriaHistoria to aggregate.
     */
    where?: AuditoriaHistoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditoriaHistorias to fetch.
     */
    orderBy?: AuditoriaHistoriaOrderByWithRelationInput | AuditoriaHistoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditoriaHistoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditoriaHistorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditoriaHistorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditoriaHistorias
    **/
    _count?: true | AuditoriaHistoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditoriaHistoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditoriaHistoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditoriaHistoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditoriaHistoriaMaxAggregateInputType
  }

  export type GetAuditoriaHistoriaAggregateType<T extends AuditoriaHistoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditoriaHistoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditoriaHistoria[P]>
      : GetScalarType<T[P], AggregateAuditoriaHistoria[P]>
  }




  export type AuditoriaHistoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditoriaHistoriaWhereInput
    orderBy?: AuditoriaHistoriaOrderByWithAggregationInput | AuditoriaHistoriaOrderByWithAggregationInput[]
    by: AuditoriaHistoriaScalarFieldEnum[] | AuditoriaHistoriaScalarFieldEnum
    having?: AuditoriaHistoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditoriaHistoriaCountAggregateInputType | true
    _avg?: AuditoriaHistoriaAvgAggregateInputType
    _sum?: AuditoriaHistoriaSumAggregateInputType
    _min?: AuditoriaHistoriaMinAggregateInputType
    _max?: AuditoriaHistoriaMaxAggregateInputType
  }

  export type AuditoriaHistoriaGroupByOutputType = {
    id: number
    historiaClinicaId: number | null
    episodioClinicoId: number | null
    usuarioId: number
    fechaAccion: Date
    tipoAccion: string
    descripcion: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos: string | null
    datosNuevos: string | null
    direccionIp: string
    _count: AuditoriaHistoriaCountAggregateOutputType | null
    _avg: AuditoriaHistoriaAvgAggregateOutputType | null
    _sum: AuditoriaHistoriaSumAggregateOutputType | null
    _min: AuditoriaHistoriaMinAggregateOutputType | null
    _max: AuditoriaHistoriaMaxAggregateOutputType | null
  }

  type GetAuditoriaHistoriaGroupByPayload<T extends AuditoriaHistoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditoriaHistoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditoriaHistoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditoriaHistoriaGroupByOutputType[P]>
            : GetScalarType<T[P], AuditoriaHistoriaGroupByOutputType[P]>
        }
      >
    >


  export type AuditoriaHistoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historiaClinicaId?: boolean
    episodioClinicoId?: boolean
    usuarioId?: boolean
    fechaAccion?: boolean
    tipoAccion?: boolean
    descripcion?: boolean
    tablaAfectada?: boolean
    idRegistro?: boolean
    datosAntiguos?: boolean
    datosNuevos?: boolean
    direccionIp?: boolean
    historiaClinica?: boolean | AuditoriaHistoria$historiaClinicaArgs<ExtArgs>
    episodioClinico?: boolean | AuditoriaHistoria$episodioClinicoArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditoriaHistoria"]>

  export type AuditoriaHistoriaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historiaClinicaId?: boolean
    episodioClinicoId?: boolean
    usuarioId?: boolean
    fechaAccion?: boolean
    tipoAccion?: boolean
    descripcion?: boolean
    tablaAfectada?: boolean
    idRegistro?: boolean
    datosAntiguos?: boolean
    datosNuevos?: boolean
    direccionIp?: boolean
    historiaClinica?: boolean | AuditoriaHistoria$historiaClinicaArgs<ExtArgs>
    episodioClinico?: boolean | AuditoriaHistoria$episodioClinicoArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditoriaHistoria"]>

  export type AuditoriaHistoriaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historiaClinicaId?: boolean
    episodioClinicoId?: boolean
    usuarioId?: boolean
    fechaAccion?: boolean
    tipoAccion?: boolean
    descripcion?: boolean
    tablaAfectada?: boolean
    idRegistro?: boolean
    datosAntiguos?: boolean
    datosNuevos?: boolean
    direccionIp?: boolean
    historiaClinica?: boolean | AuditoriaHistoria$historiaClinicaArgs<ExtArgs>
    episodioClinico?: boolean | AuditoriaHistoria$episodioClinicoArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditoriaHistoria"]>

  export type AuditoriaHistoriaSelectScalar = {
    id?: boolean
    historiaClinicaId?: boolean
    episodioClinicoId?: boolean
    usuarioId?: boolean
    fechaAccion?: boolean
    tipoAccion?: boolean
    descripcion?: boolean
    tablaAfectada?: boolean
    idRegistro?: boolean
    datosAntiguos?: boolean
    datosNuevos?: boolean
    direccionIp?: boolean
  }

  export type AuditoriaHistoriaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "historiaClinicaId" | "episodioClinicoId" | "usuarioId" | "fechaAccion" | "tipoAccion" | "descripcion" | "tablaAfectada" | "idRegistro" | "datosAntiguos" | "datosNuevos" | "direccionIp", ExtArgs["result"]["auditoriaHistoria"]>
  export type AuditoriaHistoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historiaClinica?: boolean | AuditoriaHistoria$historiaClinicaArgs<ExtArgs>
    episodioClinico?: boolean | AuditoriaHistoria$episodioClinicoArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type AuditoriaHistoriaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historiaClinica?: boolean | AuditoriaHistoria$historiaClinicaArgs<ExtArgs>
    episodioClinico?: boolean | AuditoriaHistoria$episodioClinicoArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type AuditoriaHistoriaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historiaClinica?: boolean | AuditoriaHistoria$historiaClinicaArgs<ExtArgs>
    episodioClinico?: boolean | AuditoriaHistoria$episodioClinicoArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $AuditoriaHistoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditoriaHistoria"
    objects: {
      historiaClinica: Prisma.$HistoriaClinicaPayload<ExtArgs> | null
      episodioClinico: Prisma.$EpisodioClincoPayload<ExtArgs> | null
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      historiaClinicaId: number | null
      episodioClinicoId: number | null
      usuarioId: number
      fechaAccion: Date
      tipoAccion: string
      descripcion: string | null
      tablaAfectada: string
      idRegistro: number
      datosAntiguos: string | null
      datosNuevos: string | null
      direccionIp: string
    }, ExtArgs["result"]["auditoriaHistoria"]>
    composites: {}
  }

  type AuditoriaHistoriaGetPayload<S extends boolean | null | undefined | AuditoriaHistoriaDefaultArgs> = $Result.GetResult<Prisma.$AuditoriaHistoriaPayload, S>

  type AuditoriaHistoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditoriaHistoriaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditoriaHistoriaCountAggregateInputType | true
    }

  export interface AuditoriaHistoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditoriaHistoria'], meta: { name: 'AuditoriaHistoria' } }
    /**
     * Find zero or one AuditoriaHistoria that matches the filter.
     * @param {AuditoriaHistoriaFindUniqueArgs} args - Arguments to find a AuditoriaHistoria
     * @example
     * // Get one AuditoriaHistoria
     * const auditoriaHistoria = await prisma.auditoriaHistoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditoriaHistoriaFindUniqueArgs>(args: SelectSubset<T, AuditoriaHistoriaFindUniqueArgs<ExtArgs>>): Prisma__AuditoriaHistoriaClient<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditoriaHistoria that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditoriaHistoriaFindUniqueOrThrowArgs} args - Arguments to find a AuditoriaHistoria
     * @example
     * // Get one AuditoriaHistoria
     * const auditoriaHistoria = await prisma.auditoriaHistoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditoriaHistoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditoriaHistoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditoriaHistoriaClient<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditoriaHistoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaHistoriaFindFirstArgs} args - Arguments to find a AuditoriaHistoria
     * @example
     * // Get one AuditoriaHistoria
     * const auditoriaHistoria = await prisma.auditoriaHistoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditoriaHistoriaFindFirstArgs>(args?: SelectSubset<T, AuditoriaHistoriaFindFirstArgs<ExtArgs>>): Prisma__AuditoriaHistoriaClient<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditoriaHistoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaHistoriaFindFirstOrThrowArgs} args - Arguments to find a AuditoriaHistoria
     * @example
     * // Get one AuditoriaHistoria
     * const auditoriaHistoria = await prisma.auditoriaHistoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditoriaHistoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditoriaHistoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditoriaHistoriaClient<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditoriaHistorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaHistoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditoriaHistorias
     * const auditoriaHistorias = await prisma.auditoriaHistoria.findMany()
     * 
     * // Get first 10 AuditoriaHistorias
     * const auditoriaHistorias = await prisma.auditoriaHistoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditoriaHistoriaWithIdOnly = await prisma.auditoriaHistoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditoriaHistoriaFindManyArgs>(args?: SelectSubset<T, AuditoriaHistoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditoriaHistoria.
     * @param {AuditoriaHistoriaCreateArgs} args - Arguments to create a AuditoriaHistoria.
     * @example
     * // Create one AuditoriaHistoria
     * const AuditoriaHistoria = await prisma.auditoriaHistoria.create({
     *   data: {
     *     // ... data to create a AuditoriaHistoria
     *   }
     * })
     * 
     */
    create<T extends AuditoriaHistoriaCreateArgs>(args: SelectSubset<T, AuditoriaHistoriaCreateArgs<ExtArgs>>): Prisma__AuditoriaHistoriaClient<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditoriaHistorias.
     * @param {AuditoriaHistoriaCreateManyArgs} args - Arguments to create many AuditoriaHistorias.
     * @example
     * // Create many AuditoriaHistorias
     * const auditoriaHistoria = await prisma.auditoriaHistoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditoriaHistoriaCreateManyArgs>(args?: SelectSubset<T, AuditoriaHistoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditoriaHistorias and returns the data saved in the database.
     * @param {AuditoriaHistoriaCreateManyAndReturnArgs} args - Arguments to create many AuditoriaHistorias.
     * @example
     * // Create many AuditoriaHistorias
     * const auditoriaHistoria = await prisma.auditoriaHistoria.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditoriaHistorias and only return the `id`
     * const auditoriaHistoriaWithIdOnly = await prisma.auditoriaHistoria.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditoriaHistoriaCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditoriaHistoriaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditoriaHistoria.
     * @param {AuditoriaHistoriaDeleteArgs} args - Arguments to delete one AuditoriaHistoria.
     * @example
     * // Delete one AuditoriaHistoria
     * const AuditoriaHistoria = await prisma.auditoriaHistoria.delete({
     *   where: {
     *     // ... filter to delete one AuditoriaHistoria
     *   }
     * })
     * 
     */
    delete<T extends AuditoriaHistoriaDeleteArgs>(args: SelectSubset<T, AuditoriaHistoriaDeleteArgs<ExtArgs>>): Prisma__AuditoriaHistoriaClient<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditoriaHistoria.
     * @param {AuditoriaHistoriaUpdateArgs} args - Arguments to update one AuditoriaHistoria.
     * @example
     * // Update one AuditoriaHistoria
     * const auditoriaHistoria = await prisma.auditoriaHistoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditoriaHistoriaUpdateArgs>(args: SelectSubset<T, AuditoriaHistoriaUpdateArgs<ExtArgs>>): Prisma__AuditoriaHistoriaClient<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditoriaHistorias.
     * @param {AuditoriaHistoriaDeleteManyArgs} args - Arguments to filter AuditoriaHistorias to delete.
     * @example
     * // Delete a few AuditoriaHistorias
     * const { count } = await prisma.auditoriaHistoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditoriaHistoriaDeleteManyArgs>(args?: SelectSubset<T, AuditoriaHistoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditoriaHistorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaHistoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditoriaHistorias
     * const auditoriaHistoria = await prisma.auditoriaHistoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditoriaHistoriaUpdateManyArgs>(args: SelectSubset<T, AuditoriaHistoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditoriaHistorias and returns the data updated in the database.
     * @param {AuditoriaHistoriaUpdateManyAndReturnArgs} args - Arguments to update many AuditoriaHistorias.
     * @example
     * // Update many AuditoriaHistorias
     * const auditoriaHistoria = await prisma.auditoriaHistoria.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditoriaHistorias and only return the `id`
     * const auditoriaHistoriaWithIdOnly = await prisma.auditoriaHistoria.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditoriaHistoriaUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditoriaHistoriaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditoriaHistoria.
     * @param {AuditoriaHistoriaUpsertArgs} args - Arguments to update or create a AuditoriaHistoria.
     * @example
     * // Update or create a AuditoriaHistoria
     * const auditoriaHistoria = await prisma.auditoriaHistoria.upsert({
     *   create: {
     *     // ... data to create a AuditoriaHistoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditoriaHistoria we want to update
     *   }
     * })
     */
    upsert<T extends AuditoriaHistoriaUpsertArgs>(args: SelectSubset<T, AuditoriaHistoriaUpsertArgs<ExtArgs>>): Prisma__AuditoriaHistoriaClient<$Result.GetResult<Prisma.$AuditoriaHistoriaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditoriaHistorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaHistoriaCountArgs} args - Arguments to filter AuditoriaHistorias to count.
     * @example
     * // Count the number of AuditoriaHistorias
     * const count = await prisma.auditoriaHistoria.count({
     *   where: {
     *     // ... the filter for the AuditoriaHistorias we want to count
     *   }
     * })
    **/
    count<T extends AuditoriaHistoriaCountArgs>(
      args?: Subset<T, AuditoriaHistoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditoriaHistoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditoriaHistoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaHistoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditoriaHistoriaAggregateArgs>(args: Subset<T, AuditoriaHistoriaAggregateArgs>): Prisma.PrismaPromise<GetAuditoriaHistoriaAggregateType<T>>

    /**
     * Group by AuditoriaHistoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditoriaHistoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditoriaHistoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditoriaHistoriaGroupByArgs['orderBy'] }
        : { orderBy?: AuditoriaHistoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditoriaHistoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditoriaHistoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditoriaHistoria model
   */
  readonly fields: AuditoriaHistoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditoriaHistoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditoriaHistoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    historiaClinica<T extends AuditoriaHistoria$historiaClinicaArgs<ExtArgs> = {}>(args?: Subset<T, AuditoriaHistoria$historiaClinicaArgs<ExtArgs>>): Prisma__HistoriaClinicaClient<$Result.GetResult<Prisma.$HistoriaClinicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    episodioClinico<T extends AuditoriaHistoria$episodioClinicoArgs<ExtArgs> = {}>(args?: Subset<T, AuditoriaHistoria$episodioClinicoArgs<ExtArgs>>): Prisma__EpisodioClincoClient<$Result.GetResult<Prisma.$EpisodioClincoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditoriaHistoria model
   */
  interface AuditoriaHistoriaFieldRefs {
    readonly id: FieldRef<"AuditoriaHistoria", 'Int'>
    readonly historiaClinicaId: FieldRef<"AuditoriaHistoria", 'Int'>
    readonly episodioClinicoId: FieldRef<"AuditoriaHistoria", 'Int'>
    readonly usuarioId: FieldRef<"AuditoriaHistoria", 'Int'>
    readonly fechaAccion: FieldRef<"AuditoriaHistoria", 'DateTime'>
    readonly tipoAccion: FieldRef<"AuditoriaHistoria", 'String'>
    readonly descripcion: FieldRef<"AuditoriaHistoria", 'String'>
    readonly tablaAfectada: FieldRef<"AuditoriaHistoria", 'String'>
    readonly idRegistro: FieldRef<"AuditoriaHistoria", 'Int'>
    readonly datosAntiguos: FieldRef<"AuditoriaHistoria", 'String'>
    readonly datosNuevos: FieldRef<"AuditoriaHistoria", 'String'>
    readonly direccionIp: FieldRef<"AuditoriaHistoria", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditoriaHistoria findUnique
   */
  export type AuditoriaHistoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriaHistoria to fetch.
     */
    where: AuditoriaHistoriaWhereUniqueInput
  }

  /**
   * AuditoriaHistoria findUniqueOrThrow
   */
  export type AuditoriaHistoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriaHistoria to fetch.
     */
    where: AuditoriaHistoriaWhereUniqueInput
  }

  /**
   * AuditoriaHistoria findFirst
   */
  export type AuditoriaHistoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriaHistoria to fetch.
     */
    where?: AuditoriaHistoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditoriaHistorias to fetch.
     */
    orderBy?: AuditoriaHistoriaOrderByWithRelationInput | AuditoriaHistoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditoriaHistorias.
     */
    cursor?: AuditoriaHistoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditoriaHistorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditoriaHistorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditoriaHistorias.
     */
    distinct?: AuditoriaHistoriaScalarFieldEnum | AuditoriaHistoriaScalarFieldEnum[]
  }

  /**
   * AuditoriaHistoria findFirstOrThrow
   */
  export type AuditoriaHistoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriaHistoria to fetch.
     */
    where?: AuditoriaHistoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditoriaHistorias to fetch.
     */
    orderBy?: AuditoriaHistoriaOrderByWithRelationInput | AuditoriaHistoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditoriaHistorias.
     */
    cursor?: AuditoriaHistoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditoriaHistorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditoriaHistorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditoriaHistorias.
     */
    distinct?: AuditoriaHistoriaScalarFieldEnum | AuditoriaHistoriaScalarFieldEnum[]
  }

  /**
   * AuditoriaHistoria findMany
   */
  export type AuditoriaHistoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    /**
     * Filter, which AuditoriaHistorias to fetch.
     */
    where?: AuditoriaHistoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditoriaHistorias to fetch.
     */
    orderBy?: AuditoriaHistoriaOrderByWithRelationInput | AuditoriaHistoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditoriaHistorias.
     */
    cursor?: AuditoriaHistoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditoriaHistorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditoriaHistorias.
     */
    skip?: number
    distinct?: AuditoriaHistoriaScalarFieldEnum | AuditoriaHistoriaScalarFieldEnum[]
  }

  /**
   * AuditoriaHistoria create
   */
  export type AuditoriaHistoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditoriaHistoria.
     */
    data: XOR<AuditoriaHistoriaCreateInput, AuditoriaHistoriaUncheckedCreateInput>
  }

  /**
   * AuditoriaHistoria createMany
   */
  export type AuditoriaHistoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditoriaHistorias.
     */
    data: AuditoriaHistoriaCreateManyInput | AuditoriaHistoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditoriaHistoria createManyAndReturn
   */
  export type AuditoriaHistoriaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * The data used to create many AuditoriaHistorias.
     */
    data: AuditoriaHistoriaCreateManyInput | AuditoriaHistoriaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditoriaHistoria update
   */
  export type AuditoriaHistoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditoriaHistoria.
     */
    data: XOR<AuditoriaHistoriaUpdateInput, AuditoriaHistoriaUncheckedUpdateInput>
    /**
     * Choose, which AuditoriaHistoria to update.
     */
    where: AuditoriaHistoriaWhereUniqueInput
  }

  /**
   * AuditoriaHistoria updateMany
   */
  export type AuditoriaHistoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditoriaHistorias.
     */
    data: XOR<AuditoriaHistoriaUpdateManyMutationInput, AuditoriaHistoriaUncheckedUpdateManyInput>
    /**
     * Filter which AuditoriaHistorias to update
     */
    where?: AuditoriaHistoriaWhereInput
    /**
     * Limit how many AuditoriaHistorias to update.
     */
    limit?: number
  }

  /**
   * AuditoriaHistoria updateManyAndReturn
   */
  export type AuditoriaHistoriaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * The data used to update AuditoriaHistorias.
     */
    data: XOR<AuditoriaHistoriaUpdateManyMutationInput, AuditoriaHistoriaUncheckedUpdateManyInput>
    /**
     * Filter which AuditoriaHistorias to update
     */
    where?: AuditoriaHistoriaWhereInput
    /**
     * Limit how many AuditoriaHistorias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditoriaHistoria upsert
   */
  export type AuditoriaHistoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditoriaHistoria to update in case it exists.
     */
    where: AuditoriaHistoriaWhereUniqueInput
    /**
     * In case the AuditoriaHistoria found by the `where` argument doesn't exist, create a new AuditoriaHistoria with this data.
     */
    create: XOR<AuditoriaHistoriaCreateInput, AuditoriaHistoriaUncheckedCreateInput>
    /**
     * In case the AuditoriaHistoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditoriaHistoriaUpdateInput, AuditoriaHistoriaUncheckedUpdateInput>
  }

  /**
   * AuditoriaHistoria delete
   */
  export type AuditoriaHistoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
    /**
     * Filter which AuditoriaHistoria to delete.
     */
    where: AuditoriaHistoriaWhereUniqueInput
  }

  /**
   * AuditoriaHistoria deleteMany
   */
  export type AuditoriaHistoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditoriaHistorias to delete
     */
    where?: AuditoriaHistoriaWhereInput
    /**
     * Limit how many AuditoriaHistorias to delete.
     */
    limit?: number
  }

  /**
   * AuditoriaHistoria.historiaClinica
   */
  export type AuditoriaHistoria$historiaClinicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoriaClinica
     */
    select?: HistoriaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoriaClinica
     */
    omit?: HistoriaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoriaClinicaInclude<ExtArgs> | null
    where?: HistoriaClinicaWhereInput
  }

  /**
   * AuditoriaHistoria.episodioClinico
   */
  export type AuditoriaHistoria$episodioClinicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodioClinco
     */
    select?: EpisodioClincoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EpisodioClinco
     */
    omit?: EpisodioClincoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EpisodioClincoInclude<ExtArgs> | null
    where?: EpisodioClincoWhereInput
  }

  /**
   * AuditoriaHistoria without action
   */
  export type AuditoriaHistoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditoriaHistoria
     */
    select?: AuditoriaHistoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditoriaHistoria
     */
    omit?: AuditoriaHistoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditoriaHistoriaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nombreUsuario: 'nombreUsuario',
    contrasenaHash: 'contrasenaHash',
    tipoUsuario: 'tipoUsuario',
    email: 'email',
    ultimoAcceso: 'ultimoAcceso',
    activo: 'activo',
    fechaRegistro: 'fechaRegistro'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const MedicoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    tipoDocumento: 'tipoDocumento',
    numDocumento: 'numDocumento',
    nombres: 'nombres',
    apellidos: 'apellidos',
    numLicencia: 'numLicencia',
    telefono: 'telefono',
    correo: 'correo',
    fechaRegistro: 'fechaRegistro',
    activo: 'activo'
  };

  export type MedicoScalarFieldEnum = (typeof MedicoScalarFieldEnum)[keyof typeof MedicoScalarFieldEnum]


  export const EnfermeraScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    tipoDocumento: 'tipoDocumento',
    numDocumento: 'numDocumento',
    nombres: 'nombres',
    apellidos: 'apellidos',
    numLicencia: 'numLicencia',
    telefono: 'telefono',
    correo: 'correo',
    fechaRegistro: 'fechaRegistro',
    activo: 'activo'
  };

  export type EnfermeraScalarFieldEnum = (typeof EnfermeraScalarFieldEnum)[keyof typeof EnfermeraScalarFieldEnum]


  export const FacultadScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    codigo: 'codigo',
    descripcion: 'descripcion',
    activo: 'activo'
  };

  export type FacultadScalarFieldEnum = (typeof FacultadScalarFieldEnum)[keyof typeof FacultadScalarFieldEnum]


  export const ProgramaAcademicoScalarFieldEnum: {
    id: 'id',
    facultadId: 'facultadId',
    nombre: 'nombre',
    codigo: 'codigo',
    descripcion: 'descripcion',
    nivel: 'nivel',
    activo: 'activo'
  };

  export type ProgramaAcademicoScalarFieldEnum = (typeof ProgramaAcademicoScalarFieldEnum)[keyof typeof ProgramaAcademicoScalarFieldEnum]


  export const SedeScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    direccion: 'direccion',
    telefono: 'telefono',
    horarioAtencion: 'horarioAtencion',
    activo: 'activo'
  };

  export type SedeScalarFieldEnum = (typeof SedeScalarFieldEnum)[keyof typeof SedeScalarFieldEnum]


  export const ConsultorioScalarFieldEnum: {
    id: 'id',
    sedeId: 'sedeId',
    nombre: 'nombre',
    codigo: 'codigo',
    tipo: 'tipo',
    activo: 'activo'
  };

  export type ConsultorioScalarFieldEnum = (typeof ConsultorioScalarFieldEnum)[keyof typeof ConsultorioScalarFieldEnum]


  export const EspecialidadScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    codigo: 'codigo',
    activo: 'activo'
  };

  export type EspecialidadScalarFieldEnum = (typeof EspecialidadScalarFieldEnum)[keyof typeof EspecialidadScalarFieldEnum]


  export const MedicoEspecialidadScalarFieldEnum: {
    id: 'id',
    medicoId: 'medicoId',
    especialidadId: 'especialidadId',
    fechaInicio: 'fechaInicio',
    fechaFin: 'fechaFin',
    activo: 'activo'
  };

  export type MedicoEspecialidadScalarFieldEnum = (typeof MedicoEspecialidadScalarFieldEnum)[keyof typeof MedicoEspecialidadScalarFieldEnum]


  export const PacienteScalarFieldEnum: {
    id: 'id',
    tipoDocumento: 'tipoDocumento',
    numDocumento: 'numDocumento',
    nombres: 'nombres',
    apellidos: 'apellidos',
    fechaNacimiento: 'fechaNacimiento',
    genero: 'genero',
    direccion: 'direccion',
    telefono: 'telefono',
    correo: 'correo',
    grupoSanguineo: 'grupoSanguineo',
    alergias: 'alergias',
    antecedentesFamiliares: 'antecedentesFamiliares',
    estadoCivil: 'estadoCivil',
    fechaRegistro: 'fechaRegistro',
    activo: 'activo',
    programaAcademicoId: 'programaAcademicoId'
  };

  export type PacienteScalarFieldEnum = (typeof PacienteScalarFieldEnum)[keyof typeof PacienteScalarFieldEnum]


  export const ContactoEmergenciaScalarFieldEnum: {
    id: 'id',
    pacienteId: 'pacienteId',
    nombres: 'nombres',
    apellidos: 'apellidos',
    parentesco: 'parentesco',
    telefonoPrincipal: 'telefonoPrincipal',
    telefonoSecundario: 'telefonoSecundario',
    direccion: 'direccion',
    activo: 'activo'
  };

  export type ContactoEmergenciaScalarFieldEnum = (typeof ContactoEmergenciaScalarFieldEnum)[keyof typeof ContactoEmergenciaScalarFieldEnum]


  export const HistoriaClinicaScalarFieldEnum: {
    id: 'id',
    pacienteId: 'pacienteId',
    fechaApertura: 'fechaApertura',
    estado: 'estado',
    observacionesGenerales: 'observacionesGenerales',
    ultimaActualizacion: 'ultimaActualizacion'
  };

  export type HistoriaClinicaScalarFieldEnum = (typeof HistoriaClinicaScalarFieldEnum)[keyof typeof HistoriaClinicaScalarFieldEnum]


  export const EpisodioClincoScalarFieldEnum: {
    id: 'id',
    historiaClinicaId: 'historiaClinicaId',
    especialidadId: 'especialidadId',
    medicoId: 'medicoId',
    enfermeraId: 'enfermeraId',
    consultorioId: 'consultorioId',
    fechaEpisodio: 'fechaEpisodio',
    motivoConsulta: 'motivoConsulta',
    sintomas: 'sintomas',
    tratamiento: 'tratamiento',
    observaciones: 'observaciones'
  };

  export type EpisodioClincoScalarFieldEnum = (typeof EpisodioClincoScalarFieldEnum)[keyof typeof EpisodioClincoScalarFieldEnum]


  export const SignosVitalesScalarFieldEnum: {
    id: 'id',
    episodioClinicoId: 'episodioClinicoId',
    presionArterial: 'presionArterial',
    temperatura: 'temperatura',
    frecuenciaCardiaca: 'frecuenciaCardiaca',
    frecuenciaRespiratoria: 'frecuenciaRespiratoria',
    saturacionOxigeno: 'saturacionOxigeno',
    peso: 'peso',
    altura: 'altura',
    imc: 'imc',
    fechaRegistro: 'fechaRegistro'
  };

  export type SignosVitalesScalarFieldEnum = (typeof SignosVitalesScalarFieldEnum)[keyof typeof SignosVitalesScalarFieldEnum]


  export const CodigoCIE10ScalarFieldEnum: {
    codigo: 'codigo',
    descripcion: 'descripcion',
    categoria: 'categoria',
    subcategoria: 'subcategoria',
    activo: 'activo'
  };

  export type CodigoCIE10ScalarFieldEnum = (typeof CodigoCIE10ScalarFieldEnum)[keyof typeof CodigoCIE10ScalarFieldEnum]


  export const DiagnosticoScalarFieldEnum: {
    id: 'id',
    episodioClinicoId: 'episodioClinicoId',
    codigoCIE10Id: 'codigoCIE10Id',
    tipo: 'tipo',
    descripcionAdicional: 'descripcionAdicional',
    fechaRegistro: 'fechaRegistro'
  };

  export type DiagnosticoScalarFieldEnum = (typeof DiagnosticoScalarFieldEnum)[keyof typeof DiagnosticoScalarFieldEnum]


  export const PrescripcionScalarFieldEnum: {
    id: 'id',
    episodioClinicoId: 'episodioClinicoId',
    nombreMedicamento: 'nombreMedicamento',
    dosis: 'dosis',
    viaAdministracion: 'viaAdministracion',
    frecuencia: 'frecuencia',
    duracion: 'duracion',
    indicaciones: 'indicaciones',
    fechaPrescripcion: 'fechaPrescripcion'
  };

  export type PrescripcionScalarFieldEnum = (typeof PrescripcionScalarFieldEnum)[keyof typeof PrescripcionScalarFieldEnum]


  export const DocumentoClinicoScalarFieldEnum: {
    id: 'id',
    episodioClinicoId: 'episodioClinicoId',
    tipoDocumento: 'tipoDocumento',
    titulo: 'titulo',
    rutaArchivo: 'rutaArchivo',
    contenido: 'contenido',
    formato: 'formato',
    fechaDocumento: 'fechaDocumento',
    fechaRegistro: 'fechaRegistro',
    observaciones: 'observaciones'
  };

  export type DocumentoClinicoScalarFieldEnum = (typeof DocumentoClinicoScalarFieldEnum)[keyof typeof DocumentoClinicoScalarFieldEnum]


  export const ConsentimientoInformadoScalarFieldEnum: {
    id: 'id',
    episodioClinicoId: 'episodioClinicoId',
    tipoProcedimiento: 'tipoProcedimiento',
    contenido: 'contenido',
    fechaFirma: 'fechaFirma',
    firmadoPaciente: 'firmadoPaciente',
    firmadoRepresentante: 'firmadoRepresentante',
    nombreRepresentante: 'nombreRepresentante',
    documentoRepresentante: 'documentoRepresentante',
    documentoDigitalizado: 'documentoDigitalizado'
  };

  export type ConsentimientoInformadoScalarFieldEnum = (typeof ConsentimientoInformadoScalarFieldEnum)[keyof typeof ConsentimientoInformadoScalarFieldEnum]


  export const OdontologiaDetalleScalarFieldEnum: {
    id: 'id',
    episodioClinicoId: 'episodioClinicoId',
    odontograma: 'odontograma',
    indiceCPOD: 'indiceCPOD',
    observacionesDentales: 'observacionesDentales',
    procedimientosRealizados: 'procedimientosRealizados'
  };

  export type OdontologiaDetalleScalarFieldEnum = (typeof OdontologiaDetalleScalarFieldEnum)[keyof typeof OdontologiaDetalleScalarFieldEnum]


  export const OftalmologiaDetalleScalarFieldEnum: {
    id: 'id',
    episodioClinicoId: 'episodioClinicoId',
    agudezaVisualOD: 'agudezaVisualOD',
    agudezaVisualOI: 'agudezaVisualOI',
    presionIntraocularOD: 'presionIntraocularOD',
    presionIntraocularOI: 'presionIntraocularOI',
    fondoOjo: 'fondoOjo',
    formulaOptica: 'formulaOptica'
  };

  export type OftalmologiaDetalleScalarFieldEnum = (typeof OftalmologiaDetalleScalarFieldEnum)[keyof typeof OftalmologiaDetalleScalarFieldEnum]


  export const PsicologiaDetalleScalarFieldEnum: {
    id: 'id',
    episodioClinicoId: 'episodioClinicoId',
    evaluacionMental: 'evaluacionMental',
    testAplicados: 'testAplicados',
    impresionDiagnostica: 'impresionDiagnostica',
    planIntervencion: 'planIntervencion',
    evolucion: 'evolucion'
  };

  export type PsicologiaDetalleScalarFieldEnum = (typeof PsicologiaDetalleScalarFieldEnum)[keyof typeof PsicologiaDetalleScalarFieldEnum]


  export const TrabajoSocialDetalleScalarFieldEnum: {
    id: 'id',
    episodioClinicoId: 'episodioClinicoId',
    evaluacionSocioeconomica: 'evaluacionSocioeconomica',
    dinamicaFamiliar: 'dinamicaFamiliar',
    redesApoyo: 'redesApoyo',
    intervencionRealizada: 'intervencionRealizada',
    seguimientoCaso: 'seguimientoCaso'
  };

  export type TrabajoSocialDetalleScalarFieldEnum = (typeof TrabajoSocialDetalleScalarFieldEnum)[keyof typeof TrabajoSocialDetalleScalarFieldEnum]


  export const AuditoriaHistoriaScalarFieldEnum: {
    id: 'id',
    historiaClinicaId: 'historiaClinicaId',
    episodioClinicoId: 'episodioClinicoId',
    usuarioId: 'usuarioId',
    fechaAccion: 'fechaAccion',
    tipoAccion: 'tipoAccion',
    descripcion: 'descripcion',
    tablaAfectada: 'tablaAfectada',
    idRegistro: 'idRegistro',
    datosAntiguos: 'datosAntiguos',
    datosNuevos: 'datosNuevos',
    direccionIp: 'direccionIp'
  };

  export type AuditoriaHistoriaScalarFieldEnum = (typeof AuditoriaHistoriaScalarFieldEnum)[keyof typeof AuditoriaHistoriaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'TipoUsuario'
   */
  export type EnumTipoUsuarioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoUsuario'>
    


  /**
   * Reference to a field of type 'TipoUsuario[]'
   */
  export type ListEnumTipoUsuarioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoUsuario[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'TipoDiagnostico'
   */
  export type EnumTipoDiagnosticoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoDiagnostico'>
    


  /**
   * Reference to a field of type 'TipoDiagnostico[]'
   */
  export type ListEnumTipoDiagnosticoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoDiagnostico[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nombreUsuario?: StringFilter<"Usuario"> | string
    contrasenaHash?: StringFilter<"Usuario"> | string
    tipoUsuario?: EnumTipoUsuarioFilter<"Usuario"> | $Enums.TipoUsuario
    email?: StringFilter<"Usuario"> | string
    ultimoAcceso?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    activo?: BoolFilter<"Usuario"> | boolean
    fechaRegistro?: DateTimeFilter<"Usuario"> | Date | string
    medico?: XOR<MedicoNullableScalarRelationFilter, MedicoWhereInput> | null
    enfermera?: XOR<EnfermeraNullableScalarRelationFilter, EnfermeraWhereInput> | null
    auditorias?: AuditoriaHistoriaListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nombreUsuario?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    email?: SortOrder
    ultimoAcceso?: SortOrderInput | SortOrder
    activo?: SortOrder
    fechaRegistro?: SortOrder
    medico?: MedicoOrderByWithRelationInput
    enfermera?: EnfermeraOrderByWithRelationInput
    auditorias?: AuditoriaHistoriaOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombreUsuario?: string
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    contrasenaHash?: StringFilter<"Usuario"> | string
    tipoUsuario?: EnumTipoUsuarioFilter<"Usuario"> | $Enums.TipoUsuario
    ultimoAcceso?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    activo?: BoolFilter<"Usuario"> | boolean
    fechaRegistro?: DateTimeFilter<"Usuario"> | Date | string
    medico?: XOR<MedicoNullableScalarRelationFilter, MedicoWhereInput> | null
    enfermera?: XOR<EnfermeraNullableScalarRelationFilter, EnfermeraWhereInput> | null
    auditorias?: AuditoriaHistoriaListRelationFilter
  }, "id" | "nombreUsuario" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nombreUsuario?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    email?: SortOrder
    ultimoAcceso?: SortOrderInput | SortOrder
    activo?: SortOrder
    fechaRegistro?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nombreUsuario?: StringWithAggregatesFilter<"Usuario"> | string
    contrasenaHash?: StringWithAggregatesFilter<"Usuario"> | string
    tipoUsuario?: EnumTipoUsuarioWithAggregatesFilter<"Usuario"> | $Enums.TipoUsuario
    email?: StringWithAggregatesFilter<"Usuario"> | string
    ultimoAcceso?: DateTimeNullableWithAggregatesFilter<"Usuario"> | Date | string | null
    activo?: BoolWithAggregatesFilter<"Usuario"> | boolean
    fechaRegistro?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
  }

  export type MedicoWhereInput = {
    AND?: MedicoWhereInput | MedicoWhereInput[]
    OR?: MedicoWhereInput[]
    NOT?: MedicoWhereInput | MedicoWhereInput[]
    id?: IntFilter<"Medico"> | number
    usuarioId?: IntFilter<"Medico"> | number
    tipoDocumento?: StringFilter<"Medico"> | string
    numDocumento?: StringFilter<"Medico"> | string
    nombres?: StringFilter<"Medico"> | string
    apellidos?: StringFilter<"Medico"> | string
    numLicencia?: StringFilter<"Medico"> | string
    telefono?: StringNullableFilter<"Medico"> | string | null
    correo?: StringNullableFilter<"Medico"> | string | null
    fechaRegistro?: DateTimeFilter<"Medico"> | Date | string
    activo?: BoolFilter<"Medico"> | boolean
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    especialidades?: MedicoEspecialidadListRelationFilter
    episodiosClinicos?: EpisodioClincoListRelationFilter
  }

  export type MedicoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    especialidades?: MedicoEspecialidadOrderByRelationAggregateInput
    episodiosClinicos?: EpisodioClincoOrderByRelationAggregateInput
  }

  export type MedicoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioId?: number
    tipoDocumento_numDocumento?: MedicoTipoDocumentoNumDocumentoCompoundUniqueInput
    AND?: MedicoWhereInput | MedicoWhereInput[]
    OR?: MedicoWhereInput[]
    NOT?: MedicoWhereInput | MedicoWhereInput[]
    tipoDocumento?: StringFilter<"Medico"> | string
    numDocumento?: StringFilter<"Medico"> | string
    nombres?: StringFilter<"Medico"> | string
    apellidos?: StringFilter<"Medico"> | string
    numLicencia?: StringFilter<"Medico"> | string
    telefono?: StringNullableFilter<"Medico"> | string | null
    correo?: StringNullableFilter<"Medico"> | string | null
    fechaRegistro?: DateTimeFilter<"Medico"> | Date | string
    activo?: BoolFilter<"Medico"> | boolean
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    especialidades?: MedicoEspecialidadListRelationFilter
    episodiosClinicos?: EpisodioClincoListRelationFilter
  }, "id" | "usuarioId" | "tipoDocumento_numDocumento">

  export type MedicoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
    _count?: MedicoCountOrderByAggregateInput
    _avg?: MedicoAvgOrderByAggregateInput
    _max?: MedicoMaxOrderByAggregateInput
    _min?: MedicoMinOrderByAggregateInput
    _sum?: MedicoSumOrderByAggregateInput
  }

  export type MedicoScalarWhereWithAggregatesInput = {
    AND?: MedicoScalarWhereWithAggregatesInput | MedicoScalarWhereWithAggregatesInput[]
    OR?: MedicoScalarWhereWithAggregatesInput[]
    NOT?: MedicoScalarWhereWithAggregatesInput | MedicoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Medico"> | number
    usuarioId?: IntWithAggregatesFilter<"Medico"> | number
    tipoDocumento?: StringWithAggregatesFilter<"Medico"> | string
    numDocumento?: StringWithAggregatesFilter<"Medico"> | string
    nombres?: StringWithAggregatesFilter<"Medico"> | string
    apellidos?: StringWithAggregatesFilter<"Medico"> | string
    numLicencia?: StringWithAggregatesFilter<"Medico"> | string
    telefono?: StringNullableWithAggregatesFilter<"Medico"> | string | null
    correo?: StringNullableWithAggregatesFilter<"Medico"> | string | null
    fechaRegistro?: DateTimeWithAggregatesFilter<"Medico"> | Date | string
    activo?: BoolWithAggregatesFilter<"Medico"> | boolean
  }

  export type EnfermeraWhereInput = {
    AND?: EnfermeraWhereInput | EnfermeraWhereInput[]
    OR?: EnfermeraWhereInput[]
    NOT?: EnfermeraWhereInput | EnfermeraWhereInput[]
    id?: IntFilter<"Enfermera"> | number
    usuarioId?: IntFilter<"Enfermera"> | number
    tipoDocumento?: StringFilter<"Enfermera"> | string
    numDocumento?: StringFilter<"Enfermera"> | string
    nombres?: StringFilter<"Enfermera"> | string
    apellidos?: StringFilter<"Enfermera"> | string
    numLicencia?: StringFilter<"Enfermera"> | string
    telefono?: StringNullableFilter<"Enfermera"> | string | null
    correo?: StringNullableFilter<"Enfermera"> | string | null
    fechaRegistro?: DateTimeFilter<"Enfermera"> | Date | string
    activo?: BoolFilter<"Enfermera"> | boolean
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    episodiosClinicos?: EpisodioClincoListRelationFilter
  }

  export type EnfermeraOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    episodiosClinicos?: EpisodioClincoOrderByRelationAggregateInput
  }

  export type EnfermeraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioId?: number
    tipoDocumento_numDocumento?: EnfermeraTipoDocumentoNumDocumentoCompoundUniqueInput
    AND?: EnfermeraWhereInput | EnfermeraWhereInput[]
    OR?: EnfermeraWhereInput[]
    NOT?: EnfermeraWhereInput | EnfermeraWhereInput[]
    tipoDocumento?: StringFilter<"Enfermera"> | string
    numDocumento?: StringFilter<"Enfermera"> | string
    nombres?: StringFilter<"Enfermera"> | string
    apellidos?: StringFilter<"Enfermera"> | string
    numLicencia?: StringFilter<"Enfermera"> | string
    telefono?: StringNullableFilter<"Enfermera"> | string | null
    correo?: StringNullableFilter<"Enfermera"> | string | null
    fechaRegistro?: DateTimeFilter<"Enfermera"> | Date | string
    activo?: BoolFilter<"Enfermera"> | boolean
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    episodiosClinicos?: EpisodioClincoListRelationFilter
  }, "id" | "usuarioId" | "tipoDocumento_numDocumento">

  export type EnfermeraOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
    _count?: EnfermeraCountOrderByAggregateInput
    _avg?: EnfermeraAvgOrderByAggregateInput
    _max?: EnfermeraMaxOrderByAggregateInput
    _min?: EnfermeraMinOrderByAggregateInput
    _sum?: EnfermeraSumOrderByAggregateInput
  }

  export type EnfermeraScalarWhereWithAggregatesInput = {
    AND?: EnfermeraScalarWhereWithAggregatesInput | EnfermeraScalarWhereWithAggregatesInput[]
    OR?: EnfermeraScalarWhereWithAggregatesInput[]
    NOT?: EnfermeraScalarWhereWithAggregatesInput | EnfermeraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Enfermera"> | number
    usuarioId?: IntWithAggregatesFilter<"Enfermera"> | number
    tipoDocumento?: StringWithAggregatesFilter<"Enfermera"> | string
    numDocumento?: StringWithAggregatesFilter<"Enfermera"> | string
    nombres?: StringWithAggregatesFilter<"Enfermera"> | string
    apellidos?: StringWithAggregatesFilter<"Enfermera"> | string
    numLicencia?: StringWithAggregatesFilter<"Enfermera"> | string
    telefono?: StringNullableWithAggregatesFilter<"Enfermera"> | string | null
    correo?: StringNullableWithAggregatesFilter<"Enfermera"> | string | null
    fechaRegistro?: DateTimeWithAggregatesFilter<"Enfermera"> | Date | string
    activo?: BoolWithAggregatesFilter<"Enfermera"> | boolean
  }

  export type FacultadWhereInput = {
    AND?: FacultadWhereInput | FacultadWhereInput[]
    OR?: FacultadWhereInput[]
    NOT?: FacultadWhereInput | FacultadWhereInput[]
    id?: IntFilter<"Facultad"> | number
    nombre?: StringFilter<"Facultad"> | string
    codigo?: StringFilter<"Facultad"> | string
    descripcion?: StringNullableFilter<"Facultad"> | string | null
    activo?: BoolFilter<"Facultad"> | boolean
    programasAcademicos?: ProgramaAcademicoListRelationFilter
  }

  export type FacultadOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    activo?: SortOrder
    programasAcademicos?: ProgramaAcademicoOrderByRelationAggregateInput
  }

  export type FacultadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    codigo?: string
    AND?: FacultadWhereInput | FacultadWhereInput[]
    OR?: FacultadWhereInput[]
    NOT?: FacultadWhereInput | FacultadWhereInput[]
    nombre?: StringFilter<"Facultad"> | string
    descripcion?: StringNullableFilter<"Facultad"> | string | null
    activo?: BoolFilter<"Facultad"> | boolean
    programasAcademicos?: ProgramaAcademicoListRelationFilter
  }, "id" | "codigo">

  export type FacultadOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    activo?: SortOrder
    _count?: FacultadCountOrderByAggregateInput
    _avg?: FacultadAvgOrderByAggregateInput
    _max?: FacultadMaxOrderByAggregateInput
    _min?: FacultadMinOrderByAggregateInput
    _sum?: FacultadSumOrderByAggregateInput
  }

  export type FacultadScalarWhereWithAggregatesInput = {
    AND?: FacultadScalarWhereWithAggregatesInput | FacultadScalarWhereWithAggregatesInput[]
    OR?: FacultadScalarWhereWithAggregatesInput[]
    NOT?: FacultadScalarWhereWithAggregatesInput | FacultadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Facultad"> | number
    nombre?: StringWithAggregatesFilter<"Facultad"> | string
    codigo?: StringWithAggregatesFilter<"Facultad"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Facultad"> | string | null
    activo?: BoolWithAggregatesFilter<"Facultad"> | boolean
  }

  export type ProgramaAcademicoWhereInput = {
    AND?: ProgramaAcademicoWhereInput | ProgramaAcademicoWhereInput[]
    OR?: ProgramaAcademicoWhereInput[]
    NOT?: ProgramaAcademicoWhereInput | ProgramaAcademicoWhereInput[]
    id?: IntFilter<"ProgramaAcademico"> | number
    facultadId?: IntFilter<"ProgramaAcademico"> | number
    nombre?: StringFilter<"ProgramaAcademico"> | string
    codigo?: StringFilter<"ProgramaAcademico"> | string
    descripcion?: StringNullableFilter<"ProgramaAcademico"> | string | null
    nivel?: StringFilter<"ProgramaAcademico"> | string
    activo?: BoolFilter<"ProgramaAcademico"> | boolean
    facultad?: XOR<FacultadScalarRelationFilter, FacultadWhereInput>
    pacientes?: PacienteListRelationFilter
  }

  export type ProgramaAcademicoOrderByWithRelationInput = {
    id?: SortOrder
    facultadId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    nivel?: SortOrder
    activo?: SortOrder
    facultad?: FacultadOrderByWithRelationInput
    pacientes?: PacienteOrderByRelationAggregateInput
  }

  export type ProgramaAcademicoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    codigo?: string
    AND?: ProgramaAcademicoWhereInput | ProgramaAcademicoWhereInput[]
    OR?: ProgramaAcademicoWhereInput[]
    NOT?: ProgramaAcademicoWhereInput | ProgramaAcademicoWhereInput[]
    facultadId?: IntFilter<"ProgramaAcademico"> | number
    nombre?: StringFilter<"ProgramaAcademico"> | string
    descripcion?: StringNullableFilter<"ProgramaAcademico"> | string | null
    nivel?: StringFilter<"ProgramaAcademico"> | string
    activo?: BoolFilter<"ProgramaAcademico"> | boolean
    facultad?: XOR<FacultadScalarRelationFilter, FacultadWhereInput>
    pacientes?: PacienteListRelationFilter
  }, "id" | "codigo">

  export type ProgramaAcademicoOrderByWithAggregationInput = {
    id?: SortOrder
    facultadId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    nivel?: SortOrder
    activo?: SortOrder
    _count?: ProgramaAcademicoCountOrderByAggregateInput
    _avg?: ProgramaAcademicoAvgOrderByAggregateInput
    _max?: ProgramaAcademicoMaxOrderByAggregateInput
    _min?: ProgramaAcademicoMinOrderByAggregateInput
    _sum?: ProgramaAcademicoSumOrderByAggregateInput
  }

  export type ProgramaAcademicoScalarWhereWithAggregatesInput = {
    AND?: ProgramaAcademicoScalarWhereWithAggregatesInput | ProgramaAcademicoScalarWhereWithAggregatesInput[]
    OR?: ProgramaAcademicoScalarWhereWithAggregatesInput[]
    NOT?: ProgramaAcademicoScalarWhereWithAggregatesInput | ProgramaAcademicoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProgramaAcademico"> | number
    facultadId?: IntWithAggregatesFilter<"ProgramaAcademico"> | number
    nombre?: StringWithAggregatesFilter<"ProgramaAcademico"> | string
    codigo?: StringWithAggregatesFilter<"ProgramaAcademico"> | string
    descripcion?: StringNullableWithAggregatesFilter<"ProgramaAcademico"> | string | null
    nivel?: StringWithAggregatesFilter<"ProgramaAcademico"> | string
    activo?: BoolWithAggregatesFilter<"ProgramaAcademico"> | boolean
  }

  export type SedeWhereInput = {
    AND?: SedeWhereInput | SedeWhereInput[]
    OR?: SedeWhereInput[]
    NOT?: SedeWhereInput | SedeWhereInput[]
    id?: IntFilter<"Sede"> | number
    nombre?: StringFilter<"Sede"> | string
    direccion?: StringFilter<"Sede"> | string
    telefono?: StringNullableFilter<"Sede"> | string | null
    horarioAtencion?: StringNullableFilter<"Sede"> | string | null
    activo?: BoolFilter<"Sede"> | boolean
    consultorios?: ConsultorioListRelationFilter
  }

  export type SedeOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrderInput | SortOrder
    horarioAtencion?: SortOrderInput | SortOrder
    activo?: SortOrder
    consultorios?: ConsultorioOrderByRelationAggregateInput
  }

  export type SedeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SedeWhereInput | SedeWhereInput[]
    OR?: SedeWhereInput[]
    NOT?: SedeWhereInput | SedeWhereInput[]
    nombre?: StringFilter<"Sede"> | string
    direccion?: StringFilter<"Sede"> | string
    telefono?: StringNullableFilter<"Sede"> | string | null
    horarioAtencion?: StringNullableFilter<"Sede"> | string | null
    activo?: BoolFilter<"Sede"> | boolean
    consultorios?: ConsultorioListRelationFilter
  }, "id">

  export type SedeOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrderInput | SortOrder
    horarioAtencion?: SortOrderInput | SortOrder
    activo?: SortOrder
    _count?: SedeCountOrderByAggregateInput
    _avg?: SedeAvgOrderByAggregateInput
    _max?: SedeMaxOrderByAggregateInput
    _min?: SedeMinOrderByAggregateInput
    _sum?: SedeSumOrderByAggregateInput
  }

  export type SedeScalarWhereWithAggregatesInput = {
    AND?: SedeScalarWhereWithAggregatesInput | SedeScalarWhereWithAggregatesInput[]
    OR?: SedeScalarWhereWithAggregatesInput[]
    NOT?: SedeScalarWhereWithAggregatesInput | SedeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sede"> | number
    nombre?: StringWithAggregatesFilter<"Sede"> | string
    direccion?: StringWithAggregatesFilter<"Sede"> | string
    telefono?: StringNullableWithAggregatesFilter<"Sede"> | string | null
    horarioAtencion?: StringNullableWithAggregatesFilter<"Sede"> | string | null
    activo?: BoolWithAggregatesFilter<"Sede"> | boolean
  }

  export type ConsultorioWhereInput = {
    AND?: ConsultorioWhereInput | ConsultorioWhereInput[]
    OR?: ConsultorioWhereInput[]
    NOT?: ConsultorioWhereInput | ConsultorioWhereInput[]
    id?: IntFilter<"Consultorio"> | number
    sedeId?: IntFilter<"Consultorio"> | number
    nombre?: StringFilter<"Consultorio"> | string
    codigo?: StringFilter<"Consultorio"> | string
    tipo?: StringFilter<"Consultorio"> | string
    activo?: BoolFilter<"Consultorio"> | boolean
    sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
    episodiosClinicos?: EpisodioClincoListRelationFilter
  }

  export type ConsultorioOrderByWithRelationInput = {
    id?: SortOrder
    sedeId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    tipo?: SortOrder
    activo?: SortOrder
    sede?: SedeOrderByWithRelationInput
    episodiosClinicos?: EpisodioClincoOrderByRelationAggregateInput
  }

  export type ConsultorioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sedeId_codigo?: ConsultorioSedeIdCodigoCompoundUniqueInput
    AND?: ConsultorioWhereInput | ConsultorioWhereInput[]
    OR?: ConsultorioWhereInput[]
    NOT?: ConsultorioWhereInput | ConsultorioWhereInput[]
    sedeId?: IntFilter<"Consultorio"> | number
    nombre?: StringFilter<"Consultorio"> | string
    codigo?: StringFilter<"Consultorio"> | string
    tipo?: StringFilter<"Consultorio"> | string
    activo?: BoolFilter<"Consultorio"> | boolean
    sede?: XOR<SedeScalarRelationFilter, SedeWhereInput>
    episodiosClinicos?: EpisodioClincoListRelationFilter
  }, "id" | "sedeId_codigo">

  export type ConsultorioOrderByWithAggregationInput = {
    id?: SortOrder
    sedeId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    tipo?: SortOrder
    activo?: SortOrder
    _count?: ConsultorioCountOrderByAggregateInput
    _avg?: ConsultorioAvgOrderByAggregateInput
    _max?: ConsultorioMaxOrderByAggregateInput
    _min?: ConsultorioMinOrderByAggregateInput
    _sum?: ConsultorioSumOrderByAggregateInput
  }

  export type ConsultorioScalarWhereWithAggregatesInput = {
    AND?: ConsultorioScalarWhereWithAggregatesInput | ConsultorioScalarWhereWithAggregatesInput[]
    OR?: ConsultorioScalarWhereWithAggregatesInput[]
    NOT?: ConsultorioScalarWhereWithAggregatesInput | ConsultorioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Consultorio"> | number
    sedeId?: IntWithAggregatesFilter<"Consultorio"> | number
    nombre?: StringWithAggregatesFilter<"Consultorio"> | string
    codigo?: StringWithAggregatesFilter<"Consultorio"> | string
    tipo?: StringWithAggregatesFilter<"Consultorio"> | string
    activo?: BoolWithAggregatesFilter<"Consultorio"> | boolean
  }

  export type EspecialidadWhereInput = {
    AND?: EspecialidadWhereInput | EspecialidadWhereInput[]
    OR?: EspecialidadWhereInput[]
    NOT?: EspecialidadWhereInput | EspecialidadWhereInput[]
    id?: IntFilter<"Especialidad"> | number
    nombre?: StringFilter<"Especialidad"> | string
    descripcion?: StringNullableFilter<"Especialidad"> | string | null
    codigo?: StringFilter<"Especialidad"> | string
    activo?: BoolFilter<"Especialidad"> | boolean
    medicoEspecialidad?: MedicoEspecialidadListRelationFilter
    episodiosClinicos?: EpisodioClincoListRelationFilter
  }

  export type EspecialidadOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    codigo?: SortOrder
    activo?: SortOrder
    medicoEspecialidad?: MedicoEspecialidadOrderByRelationAggregateInput
    episodiosClinicos?: EpisodioClincoOrderByRelationAggregateInput
  }

  export type EspecialidadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    codigo?: string
    AND?: EspecialidadWhereInput | EspecialidadWhereInput[]
    OR?: EspecialidadWhereInput[]
    NOT?: EspecialidadWhereInput | EspecialidadWhereInput[]
    nombre?: StringFilter<"Especialidad"> | string
    descripcion?: StringNullableFilter<"Especialidad"> | string | null
    activo?: BoolFilter<"Especialidad"> | boolean
    medicoEspecialidad?: MedicoEspecialidadListRelationFilter
    episodiosClinicos?: EpisodioClincoListRelationFilter
  }, "id" | "codigo">

  export type EspecialidadOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    codigo?: SortOrder
    activo?: SortOrder
    _count?: EspecialidadCountOrderByAggregateInput
    _avg?: EspecialidadAvgOrderByAggregateInput
    _max?: EspecialidadMaxOrderByAggregateInput
    _min?: EspecialidadMinOrderByAggregateInput
    _sum?: EspecialidadSumOrderByAggregateInput
  }

  export type EspecialidadScalarWhereWithAggregatesInput = {
    AND?: EspecialidadScalarWhereWithAggregatesInput | EspecialidadScalarWhereWithAggregatesInput[]
    OR?: EspecialidadScalarWhereWithAggregatesInput[]
    NOT?: EspecialidadScalarWhereWithAggregatesInput | EspecialidadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Especialidad"> | number
    nombre?: StringWithAggregatesFilter<"Especialidad"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Especialidad"> | string | null
    codigo?: StringWithAggregatesFilter<"Especialidad"> | string
    activo?: BoolWithAggregatesFilter<"Especialidad"> | boolean
  }

  export type MedicoEspecialidadWhereInput = {
    AND?: MedicoEspecialidadWhereInput | MedicoEspecialidadWhereInput[]
    OR?: MedicoEspecialidadWhereInput[]
    NOT?: MedicoEspecialidadWhereInput | MedicoEspecialidadWhereInput[]
    id?: IntFilter<"MedicoEspecialidad"> | number
    medicoId?: IntFilter<"MedicoEspecialidad"> | number
    especialidadId?: IntFilter<"MedicoEspecialidad"> | number
    fechaInicio?: DateTimeFilter<"MedicoEspecialidad"> | Date | string
    fechaFin?: DateTimeNullableFilter<"MedicoEspecialidad"> | Date | string | null
    activo?: BoolFilter<"MedicoEspecialidad"> | boolean
    medico?: XOR<MedicoScalarRelationFilter, MedicoWhereInput>
    especialidad?: XOR<EspecialidadScalarRelationFilter, EspecialidadWhereInput>
  }

  export type MedicoEspecialidadOrderByWithRelationInput = {
    id?: SortOrder
    medicoId?: SortOrder
    especialidadId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrderInput | SortOrder
    activo?: SortOrder
    medico?: MedicoOrderByWithRelationInput
    especialidad?: EspecialidadOrderByWithRelationInput
  }

  export type MedicoEspecialidadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    medicoId_especialidadId?: MedicoEspecialidadMedicoIdEspecialidadIdCompoundUniqueInput
    AND?: MedicoEspecialidadWhereInput | MedicoEspecialidadWhereInput[]
    OR?: MedicoEspecialidadWhereInput[]
    NOT?: MedicoEspecialidadWhereInput | MedicoEspecialidadWhereInput[]
    medicoId?: IntFilter<"MedicoEspecialidad"> | number
    especialidadId?: IntFilter<"MedicoEspecialidad"> | number
    fechaInicio?: DateTimeFilter<"MedicoEspecialidad"> | Date | string
    fechaFin?: DateTimeNullableFilter<"MedicoEspecialidad"> | Date | string | null
    activo?: BoolFilter<"MedicoEspecialidad"> | boolean
    medico?: XOR<MedicoScalarRelationFilter, MedicoWhereInput>
    especialidad?: XOR<EspecialidadScalarRelationFilter, EspecialidadWhereInput>
  }, "id" | "medicoId_especialidadId">

  export type MedicoEspecialidadOrderByWithAggregationInput = {
    id?: SortOrder
    medicoId?: SortOrder
    especialidadId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrderInput | SortOrder
    activo?: SortOrder
    _count?: MedicoEspecialidadCountOrderByAggregateInput
    _avg?: MedicoEspecialidadAvgOrderByAggregateInput
    _max?: MedicoEspecialidadMaxOrderByAggregateInput
    _min?: MedicoEspecialidadMinOrderByAggregateInput
    _sum?: MedicoEspecialidadSumOrderByAggregateInput
  }

  export type MedicoEspecialidadScalarWhereWithAggregatesInput = {
    AND?: MedicoEspecialidadScalarWhereWithAggregatesInput | MedicoEspecialidadScalarWhereWithAggregatesInput[]
    OR?: MedicoEspecialidadScalarWhereWithAggregatesInput[]
    NOT?: MedicoEspecialidadScalarWhereWithAggregatesInput | MedicoEspecialidadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MedicoEspecialidad"> | number
    medicoId?: IntWithAggregatesFilter<"MedicoEspecialidad"> | number
    especialidadId?: IntWithAggregatesFilter<"MedicoEspecialidad"> | number
    fechaInicio?: DateTimeWithAggregatesFilter<"MedicoEspecialidad"> | Date | string
    fechaFin?: DateTimeNullableWithAggregatesFilter<"MedicoEspecialidad"> | Date | string | null
    activo?: BoolWithAggregatesFilter<"MedicoEspecialidad"> | boolean
  }

  export type PacienteWhereInput = {
    AND?: PacienteWhereInput | PacienteWhereInput[]
    OR?: PacienteWhereInput[]
    NOT?: PacienteWhereInput | PacienteWhereInput[]
    id?: IntFilter<"Paciente"> | number
    tipoDocumento?: StringFilter<"Paciente"> | string
    numDocumento?: StringFilter<"Paciente"> | string
    nombres?: StringFilter<"Paciente"> | string
    apellidos?: StringFilter<"Paciente"> | string
    fechaNacimiento?: DateTimeFilter<"Paciente"> | Date | string
    genero?: StringFilter<"Paciente"> | string
    direccion?: StringNullableFilter<"Paciente"> | string | null
    telefono?: StringNullableFilter<"Paciente"> | string | null
    correo?: StringNullableFilter<"Paciente"> | string | null
    grupoSanguineo?: StringNullableFilter<"Paciente"> | string | null
    alergias?: StringNullableFilter<"Paciente"> | string | null
    antecedentesFamiliares?: StringNullableFilter<"Paciente"> | string | null
    estadoCivil?: StringNullableFilter<"Paciente"> | string | null
    fechaRegistro?: DateTimeFilter<"Paciente"> | Date | string
    activo?: BoolFilter<"Paciente"> | boolean
    programaAcademicoId?: IntFilter<"Paciente"> | number
    programaAcademico?: XOR<ProgramaAcademicoScalarRelationFilter, ProgramaAcademicoWhereInput>
    contactosEmergencia?: ContactoEmergenciaListRelationFilter
    historiasClinicas?: HistoriaClinicaListRelationFilter
  }

  export type PacienteOrderByWithRelationInput = {
    id?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    fechaNacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    grupoSanguineo?: SortOrderInput | SortOrder
    alergias?: SortOrderInput | SortOrder
    antecedentesFamiliares?: SortOrderInput | SortOrder
    estadoCivil?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
    programaAcademicoId?: SortOrder
    programaAcademico?: ProgramaAcademicoOrderByWithRelationInput
    contactosEmergencia?: ContactoEmergenciaOrderByRelationAggregateInput
    historiasClinicas?: HistoriaClinicaOrderByRelationAggregateInput
  }

  export type PacienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tipoDocumento_numDocumento?: PacienteTipoDocumentoNumDocumentoCompoundUniqueInput
    AND?: PacienteWhereInput | PacienteWhereInput[]
    OR?: PacienteWhereInput[]
    NOT?: PacienteWhereInput | PacienteWhereInput[]
    tipoDocumento?: StringFilter<"Paciente"> | string
    numDocumento?: StringFilter<"Paciente"> | string
    nombres?: StringFilter<"Paciente"> | string
    apellidos?: StringFilter<"Paciente"> | string
    fechaNacimiento?: DateTimeFilter<"Paciente"> | Date | string
    genero?: StringFilter<"Paciente"> | string
    direccion?: StringNullableFilter<"Paciente"> | string | null
    telefono?: StringNullableFilter<"Paciente"> | string | null
    correo?: StringNullableFilter<"Paciente"> | string | null
    grupoSanguineo?: StringNullableFilter<"Paciente"> | string | null
    alergias?: StringNullableFilter<"Paciente"> | string | null
    antecedentesFamiliares?: StringNullableFilter<"Paciente"> | string | null
    estadoCivil?: StringNullableFilter<"Paciente"> | string | null
    fechaRegistro?: DateTimeFilter<"Paciente"> | Date | string
    activo?: BoolFilter<"Paciente"> | boolean
    programaAcademicoId?: IntFilter<"Paciente"> | number
    programaAcademico?: XOR<ProgramaAcademicoScalarRelationFilter, ProgramaAcademicoWhereInput>
    contactosEmergencia?: ContactoEmergenciaListRelationFilter
    historiasClinicas?: HistoriaClinicaListRelationFilter
  }, "id" | "tipoDocumento_numDocumento">

  export type PacienteOrderByWithAggregationInput = {
    id?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    fechaNacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    grupoSanguineo?: SortOrderInput | SortOrder
    alergias?: SortOrderInput | SortOrder
    antecedentesFamiliares?: SortOrderInput | SortOrder
    estadoCivil?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
    programaAcademicoId?: SortOrder
    _count?: PacienteCountOrderByAggregateInput
    _avg?: PacienteAvgOrderByAggregateInput
    _max?: PacienteMaxOrderByAggregateInput
    _min?: PacienteMinOrderByAggregateInput
    _sum?: PacienteSumOrderByAggregateInput
  }

  export type PacienteScalarWhereWithAggregatesInput = {
    AND?: PacienteScalarWhereWithAggregatesInput | PacienteScalarWhereWithAggregatesInput[]
    OR?: PacienteScalarWhereWithAggregatesInput[]
    NOT?: PacienteScalarWhereWithAggregatesInput | PacienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Paciente"> | number
    tipoDocumento?: StringWithAggregatesFilter<"Paciente"> | string
    numDocumento?: StringWithAggregatesFilter<"Paciente"> | string
    nombres?: StringWithAggregatesFilter<"Paciente"> | string
    apellidos?: StringWithAggregatesFilter<"Paciente"> | string
    fechaNacimiento?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    genero?: StringWithAggregatesFilter<"Paciente"> | string
    direccion?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    telefono?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    correo?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    grupoSanguineo?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    alergias?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    antecedentesFamiliares?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    estadoCivil?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    fechaRegistro?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    activo?: BoolWithAggregatesFilter<"Paciente"> | boolean
    programaAcademicoId?: IntWithAggregatesFilter<"Paciente"> | number
  }

  export type ContactoEmergenciaWhereInput = {
    AND?: ContactoEmergenciaWhereInput | ContactoEmergenciaWhereInput[]
    OR?: ContactoEmergenciaWhereInput[]
    NOT?: ContactoEmergenciaWhereInput | ContactoEmergenciaWhereInput[]
    id?: IntFilter<"ContactoEmergencia"> | number
    pacienteId?: IntFilter<"ContactoEmergencia"> | number
    nombres?: StringFilter<"ContactoEmergencia"> | string
    apellidos?: StringFilter<"ContactoEmergencia"> | string
    parentesco?: StringFilter<"ContactoEmergencia"> | string
    telefonoPrincipal?: StringFilter<"ContactoEmergencia"> | string
    telefonoSecundario?: StringNullableFilter<"ContactoEmergencia"> | string | null
    direccion?: StringNullableFilter<"ContactoEmergencia"> | string | null
    activo?: BoolFilter<"ContactoEmergencia"> | boolean
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
  }

  export type ContactoEmergenciaOrderByWithRelationInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    parentesco?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    activo?: SortOrder
    paciente?: PacienteOrderByWithRelationInput
  }

  export type ContactoEmergenciaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactoEmergenciaWhereInput | ContactoEmergenciaWhereInput[]
    OR?: ContactoEmergenciaWhereInput[]
    NOT?: ContactoEmergenciaWhereInput | ContactoEmergenciaWhereInput[]
    pacienteId?: IntFilter<"ContactoEmergencia"> | number
    nombres?: StringFilter<"ContactoEmergencia"> | string
    apellidos?: StringFilter<"ContactoEmergencia"> | string
    parentesco?: StringFilter<"ContactoEmergencia"> | string
    telefonoPrincipal?: StringFilter<"ContactoEmergencia"> | string
    telefonoSecundario?: StringNullableFilter<"ContactoEmergencia"> | string | null
    direccion?: StringNullableFilter<"ContactoEmergencia"> | string | null
    activo?: BoolFilter<"ContactoEmergencia"> | boolean
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
  }, "id">

  export type ContactoEmergenciaOrderByWithAggregationInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    parentesco?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    activo?: SortOrder
    _count?: ContactoEmergenciaCountOrderByAggregateInput
    _avg?: ContactoEmergenciaAvgOrderByAggregateInput
    _max?: ContactoEmergenciaMaxOrderByAggregateInput
    _min?: ContactoEmergenciaMinOrderByAggregateInput
    _sum?: ContactoEmergenciaSumOrderByAggregateInput
  }

  export type ContactoEmergenciaScalarWhereWithAggregatesInput = {
    AND?: ContactoEmergenciaScalarWhereWithAggregatesInput | ContactoEmergenciaScalarWhereWithAggregatesInput[]
    OR?: ContactoEmergenciaScalarWhereWithAggregatesInput[]
    NOT?: ContactoEmergenciaScalarWhereWithAggregatesInput | ContactoEmergenciaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactoEmergencia"> | number
    pacienteId?: IntWithAggregatesFilter<"ContactoEmergencia"> | number
    nombres?: StringWithAggregatesFilter<"ContactoEmergencia"> | string
    apellidos?: StringWithAggregatesFilter<"ContactoEmergencia"> | string
    parentesco?: StringWithAggregatesFilter<"ContactoEmergencia"> | string
    telefonoPrincipal?: StringWithAggregatesFilter<"ContactoEmergencia"> | string
    telefonoSecundario?: StringNullableWithAggregatesFilter<"ContactoEmergencia"> | string | null
    direccion?: StringNullableWithAggregatesFilter<"ContactoEmergencia"> | string | null
    activo?: BoolWithAggregatesFilter<"ContactoEmergencia"> | boolean
  }

  export type HistoriaClinicaWhereInput = {
    AND?: HistoriaClinicaWhereInput | HistoriaClinicaWhereInput[]
    OR?: HistoriaClinicaWhereInput[]
    NOT?: HistoriaClinicaWhereInput | HistoriaClinicaWhereInput[]
    id?: IntFilter<"HistoriaClinica"> | number
    pacienteId?: IntFilter<"HistoriaClinica"> | number
    fechaApertura?: DateTimeFilter<"HistoriaClinica"> | Date | string
    estado?: StringFilter<"HistoriaClinica"> | string
    observacionesGenerales?: StringNullableFilter<"HistoriaClinica"> | string | null
    ultimaActualizacion?: DateTimeFilter<"HistoriaClinica"> | Date | string
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    episodiosClinicos?: EpisodioClincoListRelationFilter
    auditorias?: AuditoriaHistoriaListRelationFilter
  }

  export type HistoriaClinicaOrderByWithRelationInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fechaApertura?: SortOrder
    estado?: SortOrder
    observacionesGenerales?: SortOrderInput | SortOrder
    ultimaActualizacion?: SortOrder
    paciente?: PacienteOrderByWithRelationInput
    episodiosClinicos?: EpisodioClincoOrderByRelationAggregateInput
    auditorias?: AuditoriaHistoriaOrderByRelationAggregateInput
  }

  export type HistoriaClinicaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HistoriaClinicaWhereInput | HistoriaClinicaWhereInput[]
    OR?: HistoriaClinicaWhereInput[]
    NOT?: HistoriaClinicaWhereInput | HistoriaClinicaWhereInput[]
    pacienteId?: IntFilter<"HistoriaClinica"> | number
    fechaApertura?: DateTimeFilter<"HistoriaClinica"> | Date | string
    estado?: StringFilter<"HistoriaClinica"> | string
    observacionesGenerales?: StringNullableFilter<"HistoriaClinica"> | string | null
    ultimaActualizacion?: DateTimeFilter<"HistoriaClinica"> | Date | string
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    episodiosClinicos?: EpisodioClincoListRelationFilter
    auditorias?: AuditoriaHistoriaListRelationFilter
  }, "id">

  export type HistoriaClinicaOrderByWithAggregationInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fechaApertura?: SortOrder
    estado?: SortOrder
    observacionesGenerales?: SortOrderInput | SortOrder
    ultimaActualizacion?: SortOrder
    _count?: HistoriaClinicaCountOrderByAggregateInput
    _avg?: HistoriaClinicaAvgOrderByAggregateInput
    _max?: HistoriaClinicaMaxOrderByAggregateInput
    _min?: HistoriaClinicaMinOrderByAggregateInput
    _sum?: HistoriaClinicaSumOrderByAggregateInput
  }

  export type HistoriaClinicaScalarWhereWithAggregatesInput = {
    AND?: HistoriaClinicaScalarWhereWithAggregatesInput | HistoriaClinicaScalarWhereWithAggregatesInput[]
    OR?: HistoriaClinicaScalarWhereWithAggregatesInput[]
    NOT?: HistoriaClinicaScalarWhereWithAggregatesInput | HistoriaClinicaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HistoriaClinica"> | number
    pacienteId?: IntWithAggregatesFilter<"HistoriaClinica"> | number
    fechaApertura?: DateTimeWithAggregatesFilter<"HistoriaClinica"> | Date | string
    estado?: StringWithAggregatesFilter<"HistoriaClinica"> | string
    observacionesGenerales?: StringNullableWithAggregatesFilter<"HistoriaClinica"> | string | null
    ultimaActualizacion?: DateTimeWithAggregatesFilter<"HistoriaClinica"> | Date | string
  }

  export type EpisodioClincoWhereInput = {
    AND?: EpisodioClincoWhereInput | EpisodioClincoWhereInput[]
    OR?: EpisodioClincoWhereInput[]
    NOT?: EpisodioClincoWhereInput | EpisodioClincoWhereInput[]
    id?: IntFilter<"EpisodioClinco"> | number
    historiaClinicaId?: IntFilter<"EpisodioClinco"> | number
    especialidadId?: IntFilter<"EpisodioClinco"> | number
    medicoId?: IntNullableFilter<"EpisodioClinco"> | number | null
    enfermeraId?: IntFilter<"EpisodioClinco"> | number
    consultorioId?: IntFilter<"EpisodioClinco"> | number
    fechaEpisodio?: DateTimeFilter<"EpisodioClinco"> | Date | string
    motivoConsulta?: StringFilter<"EpisodioClinco"> | string
    sintomas?: StringNullableFilter<"EpisodioClinco"> | string | null
    tratamiento?: StringNullableFilter<"EpisodioClinco"> | string | null
    observaciones?: StringNullableFilter<"EpisodioClinco"> | string | null
    historiaClinica?: XOR<HistoriaClinicaScalarRelationFilter, HistoriaClinicaWhereInput>
    especialidad?: XOR<EspecialidadScalarRelationFilter, EspecialidadWhereInput>
    medico?: XOR<MedicoNullableScalarRelationFilter, MedicoWhereInput> | null
    enfermera?: XOR<EnfermeraScalarRelationFilter, EnfermeraWhereInput>
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    signosVitales?: SignosVitalesListRelationFilter
    diagnosticos?: DiagnosticoListRelationFilter
    prescripciones?: PrescripcionListRelationFilter
    documentosClinicos?: DocumentoClinicoListRelationFilter
    consentimientos?: ConsentimientoInformadoListRelationFilter
    odontologiaDetalle?: XOR<OdontologiaDetalleNullableScalarRelationFilter, OdontologiaDetalleWhereInput> | null
    oftalmologiaDetalle?: XOR<OftalmologiaDetalleNullableScalarRelationFilter, OftalmologiaDetalleWhereInput> | null
    psicologiaDetalle?: XOR<PsicologiaDetalleNullableScalarRelationFilter, PsicologiaDetalleWhereInput> | null
    trabajoSocialDetalle?: XOR<TrabajoSocialDetalleNullableScalarRelationFilter, TrabajoSocialDetalleWhereInput> | null
    auditorias?: AuditoriaHistoriaListRelationFilter
  }

  export type EpisodioClincoOrderByWithRelationInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    especialidadId?: SortOrder
    medicoId?: SortOrderInput | SortOrder
    enfermeraId?: SortOrder
    consultorioId?: SortOrder
    fechaEpisodio?: SortOrder
    motivoConsulta?: SortOrder
    sintomas?: SortOrderInput | SortOrder
    tratamiento?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    historiaClinica?: HistoriaClinicaOrderByWithRelationInput
    especialidad?: EspecialidadOrderByWithRelationInput
    medico?: MedicoOrderByWithRelationInput
    enfermera?: EnfermeraOrderByWithRelationInput
    consultorio?: ConsultorioOrderByWithRelationInput
    signosVitales?: SignosVitalesOrderByRelationAggregateInput
    diagnosticos?: DiagnosticoOrderByRelationAggregateInput
    prescripciones?: PrescripcionOrderByRelationAggregateInput
    documentosClinicos?: DocumentoClinicoOrderByRelationAggregateInput
    consentimientos?: ConsentimientoInformadoOrderByRelationAggregateInput
    odontologiaDetalle?: OdontologiaDetalleOrderByWithRelationInput
    oftalmologiaDetalle?: OftalmologiaDetalleOrderByWithRelationInput
    psicologiaDetalle?: PsicologiaDetalleOrderByWithRelationInput
    trabajoSocialDetalle?: TrabajoSocialDetalleOrderByWithRelationInput
    auditorias?: AuditoriaHistoriaOrderByRelationAggregateInput
  }

  export type EpisodioClincoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EpisodioClincoWhereInput | EpisodioClincoWhereInput[]
    OR?: EpisodioClincoWhereInput[]
    NOT?: EpisodioClincoWhereInput | EpisodioClincoWhereInput[]
    historiaClinicaId?: IntFilter<"EpisodioClinco"> | number
    especialidadId?: IntFilter<"EpisodioClinco"> | number
    medicoId?: IntNullableFilter<"EpisodioClinco"> | number | null
    enfermeraId?: IntFilter<"EpisodioClinco"> | number
    consultorioId?: IntFilter<"EpisodioClinco"> | number
    fechaEpisodio?: DateTimeFilter<"EpisodioClinco"> | Date | string
    motivoConsulta?: StringFilter<"EpisodioClinco"> | string
    sintomas?: StringNullableFilter<"EpisodioClinco"> | string | null
    tratamiento?: StringNullableFilter<"EpisodioClinco"> | string | null
    observaciones?: StringNullableFilter<"EpisodioClinco"> | string | null
    historiaClinica?: XOR<HistoriaClinicaScalarRelationFilter, HistoriaClinicaWhereInput>
    especialidad?: XOR<EspecialidadScalarRelationFilter, EspecialidadWhereInput>
    medico?: XOR<MedicoNullableScalarRelationFilter, MedicoWhereInput> | null
    enfermera?: XOR<EnfermeraScalarRelationFilter, EnfermeraWhereInput>
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    signosVitales?: SignosVitalesListRelationFilter
    diagnosticos?: DiagnosticoListRelationFilter
    prescripciones?: PrescripcionListRelationFilter
    documentosClinicos?: DocumentoClinicoListRelationFilter
    consentimientos?: ConsentimientoInformadoListRelationFilter
    odontologiaDetalle?: XOR<OdontologiaDetalleNullableScalarRelationFilter, OdontologiaDetalleWhereInput> | null
    oftalmologiaDetalle?: XOR<OftalmologiaDetalleNullableScalarRelationFilter, OftalmologiaDetalleWhereInput> | null
    psicologiaDetalle?: XOR<PsicologiaDetalleNullableScalarRelationFilter, PsicologiaDetalleWhereInput> | null
    trabajoSocialDetalle?: XOR<TrabajoSocialDetalleNullableScalarRelationFilter, TrabajoSocialDetalleWhereInput> | null
    auditorias?: AuditoriaHistoriaListRelationFilter
  }, "id">

  export type EpisodioClincoOrderByWithAggregationInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    especialidadId?: SortOrder
    medicoId?: SortOrderInput | SortOrder
    enfermeraId?: SortOrder
    consultorioId?: SortOrder
    fechaEpisodio?: SortOrder
    motivoConsulta?: SortOrder
    sintomas?: SortOrderInput | SortOrder
    tratamiento?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    _count?: EpisodioClincoCountOrderByAggregateInput
    _avg?: EpisodioClincoAvgOrderByAggregateInput
    _max?: EpisodioClincoMaxOrderByAggregateInput
    _min?: EpisodioClincoMinOrderByAggregateInput
    _sum?: EpisodioClincoSumOrderByAggregateInput
  }

  export type EpisodioClincoScalarWhereWithAggregatesInput = {
    AND?: EpisodioClincoScalarWhereWithAggregatesInput | EpisodioClincoScalarWhereWithAggregatesInput[]
    OR?: EpisodioClincoScalarWhereWithAggregatesInput[]
    NOT?: EpisodioClincoScalarWhereWithAggregatesInput | EpisodioClincoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EpisodioClinco"> | number
    historiaClinicaId?: IntWithAggregatesFilter<"EpisodioClinco"> | number
    especialidadId?: IntWithAggregatesFilter<"EpisodioClinco"> | number
    medicoId?: IntNullableWithAggregatesFilter<"EpisodioClinco"> | number | null
    enfermeraId?: IntWithAggregatesFilter<"EpisodioClinco"> | number
    consultorioId?: IntWithAggregatesFilter<"EpisodioClinco"> | number
    fechaEpisodio?: DateTimeWithAggregatesFilter<"EpisodioClinco"> | Date | string
    motivoConsulta?: StringWithAggregatesFilter<"EpisodioClinco"> | string
    sintomas?: StringNullableWithAggregatesFilter<"EpisodioClinco"> | string | null
    tratamiento?: StringNullableWithAggregatesFilter<"EpisodioClinco"> | string | null
    observaciones?: StringNullableWithAggregatesFilter<"EpisodioClinco"> | string | null
  }

  export type SignosVitalesWhereInput = {
    AND?: SignosVitalesWhereInput | SignosVitalesWhereInput[]
    OR?: SignosVitalesWhereInput[]
    NOT?: SignosVitalesWhereInput | SignosVitalesWhereInput[]
    id?: IntFilter<"SignosVitales"> | number
    episodioClinicoId?: IntFilter<"SignosVitales"> | number
    presionArterial?: StringNullableFilter<"SignosVitales"> | string | null
    temperatura?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: IntNullableFilter<"SignosVitales"> | number | null
    frecuenciaRespiratoria?: IntNullableFilter<"SignosVitales"> | number | null
    saturacionOxigeno?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    peso?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    altura?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    imc?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFilter<"SignosVitales"> | Date | string
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }

  export type SignosVitalesOrderByWithRelationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    presionArterial?: SortOrderInput | SortOrder
    temperatura?: SortOrderInput | SortOrder
    frecuenciaCardiaca?: SortOrderInput | SortOrder
    frecuenciaRespiratoria?: SortOrderInput | SortOrder
    saturacionOxigeno?: SortOrderInput | SortOrder
    peso?: SortOrderInput | SortOrder
    altura?: SortOrderInput | SortOrder
    imc?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
  }

  export type SignosVitalesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SignosVitalesWhereInput | SignosVitalesWhereInput[]
    OR?: SignosVitalesWhereInput[]
    NOT?: SignosVitalesWhereInput | SignosVitalesWhereInput[]
    episodioClinicoId?: IntFilter<"SignosVitales"> | number
    presionArterial?: StringNullableFilter<"SignosVitales"> | string | null
    temperatura?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: IntNullableFilter<"SignosVitales"> | number | null
    frecuenciaRespiratoria?: IntNullableFilter<"SignosVitales"> | number | null
    saturacionOxigeno?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    peso?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    altura?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    imc?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFilter<"SignosVitales"> | Date | string
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }, "id">

  export type SignosVitalesOrderByWithAggregationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    presionArterial?: SortOrderInput | SortOrder
    temperatura?: SortOrderInput | SortOrder
    frecuenciaCardiaca?: SortOrderInput | SortOrder
    frecuenciaRespiratoria?: SortOrderInput | SortOrder
    saturacionOxigeno?: SortOrderInput | SortOrder
    peso?: SortOrderInput | SortOrder
    altura?: SortOrderInput | SortOrder
    imc?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    _count?: SignosVitalesCountOrderByAggregateInput
    _avg?: SignosVitalesAvgOrderByAggregateInput
    _max?: SignosVitalesMaxOrderByAggregateInput
    _min?: SignosVitalesMinOrderByAggregateInput
    _sum?: SignosVitalesSumOrderByAggregateInput
  }

  export type SignosVitalesScalarWhereWithAggregatesInput = {
    AND?: SignosVitalesScalarWhereWithAggregatesInput | SignosVitalesScalarWhereWithAggregatesInput[]
    OR?: SignosVitalesScalarWhereWithAggregatesInput[]
    NOT?: SignosVitalesScalarWhereWithAggregatesInput | SignosVitalesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SignosVitales"> | number
    episodioClinicoId?: IntWithAggregatesFilter<"SignosVitales"> | number
    presionArterial?: StringNullableWithAggregatesFilter<"SignosVitales"> | string | null
    temperatura?: DecimalNullableWithAggregatesFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: IntNullableWithAggregatesFilter<"SignosVitales"> | number | null
    frecuenciaRespiratoria?: IntNullableWithAggregatesFilter<"SignosVitales"> | number | null
    saturacionOxigeno?: DecimalNullableWithAggregatesFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    peso?: DecimalNullableWithAggregatesFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    altura?: DecimalNullableWithAggregatesFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    imc?: DecimalNullableWithAggregatesFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeWithAggregatesFilter<"SignosVitales"> | Date | string
  }

  export type CodigoCIE10WhereInput = {
    AND?: CodigoCIE10WhereInput | CodigoCIE10WhereInput[]
    OR?: CodigoCIE10WhereInput[]
    NOT?: CodigoCIE10WhereInput | CodigoCIE10WhereInput[]
    codigo?: StringFilter<"CodigoCIE10"> | string
    descripcion?: StringFilter<"CodigoCIE10"> | string
    categoria?: StringFilter<"CodigoCIE10"> | string
    subcategoria?: StringNullableFilter<"CodigoCIE10"> | string | null
    activo?: BoolFilter<"CodigoCIE10"> | boolean
    diagnosticos?: DiagnosticoListRelationFilter
  }

  export type CodigoCIE10OrderByWithRelationInput = {
    codigo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    subcategoria?: SortOrderInput | SortOrder
    activo?: SortOrder
    diagnosticos?: DiagnosticoOrderByRelationAggregateInput
  }

  export type CodigoCIE10WhereUniqueInput = Prisma.AtLeast<{
    codigo?: string
    AND?: CodigoCIE10WhereInput | CodigoCIE10WhereInput[]
    OR?: CodigoCIE10WhereInput[]
    NOT?: CodigoCIE10WhereInput | CodigoCIE10WhereInput[]
    descripcion?: StringFilter<"CodigoCIE10"> | string
    categoria?: StringFilter<"CodigoCIE10"> | string
    subcategoria?: StringNullableFilter<"CodigoCIE10"> | string | null
    activo?: BoolFilter<"CodigoCIE10"> | boolean
    diagnosticos?: DiagnosticoListRelationFilter
  }, "codigo">

  export type CodigoCIE10OrderByWithAggregationInput = {
    codigo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    subcategoria?: SortOrderInput | SortOrder
    activo?: SortOrder
    _count?: CodigoCIE10CountOrderByAggregateInput
    _max?: CodigoCIE10MaxOrderByAggregateInput
    _min?: CodigoCIE10MinOrderByAggregateInput
  }

  export type CodigoCIE10ScalarWhereWithAggregatesInput = {
    AND?: CodigoCIE10ScalarWhereWithAggregatesInput | CodigoCIE10ScalarWhereWithAggregatesInput[]
    OR?: CodigoCIE10ScalarWhereWithAggregatesInput[]
    NOT?: CodigoCIE10ScalarWhereWithAggregatesInput | CodigoCIE10ScalarWhereWithAggregatesInput[]
    codigo?: StringWithAggregatesFilter<"CodigoCIE10"> | string
    descripcion?: StringWithAggregatesFilter<"CodigoCIE10"> | string
    categoria?: StringWithAggregatesFilter<"CodigoCIE10"> | string
    subcategoria?: StringNullableWithAggregatesFilter<"CodigoCIE10"> | string | null
    activo?: BoolWithAggregatesFilter<"CodigoCIE10"> | boolean
  }

  export type DiagnosticoWhereInput = {
    AND?: DiagnosticoWhereInput | DiagnosticoWhereInput[]
    OR?: DiagnosticoWhereInput[]
    NOT?: DiagnosticoWhereInput | DiagnosticoWhereInput[]
    id?: IntFilter<"Diagnostico"> | number
    episodioClinicoId?: IntFilter<"Diagnostico"> | number
    codigoCIE10Id?: StringFilter<"Diagnostico"> | string
    tipo?: EnumTipoDiagnosticoFilter<"Diagnostico"> | $Enums.TipoDiagnostico
    descripcionAdicional?: StringNullableFilter<"Diagnostico"> | string | null
    fechaRegistro?: DateTimeFilter<"Diagnostico"> | Date | string
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
    codigoCIE10?: XOR<CodigoCIE10ScalarRelationFilter, CodigoCIE10WhereInput>
  }

  export type DiagnosticoOrderByWithRelationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    codigoCIE10Id?: SortOrder
    tipo?: SortOrder
    descripcionAdicional?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
    codigoCIE10?: CodigoCIE10OrderByWithRelationInput
  }

  export type DiagnosticoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DiagnosticoWhereInput | DiagnosticoWhereInput[]
    OR?: DiagnosticoWhereInput[]
    NOT?: DiagnosticoWhereInput | DiagnosticoWhereInput[]
    episodioClinicoId?: IntFilter<"Diagnostico"> | number
    codigoCIE10Id?: StringFilter<"Diagnostico"> | string
    tipo?: EnumTipoDiagnosticoFilter<"Diagnostico"> | $Enums.TipoDiagnostico
    descripcionAdicional?: StringNullableFilter<"Diagnostico"> | string | null
    fechaRegistro?: DateTimeFilter<"Diagnostico"> | Date | string
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
    codigoCIE10?: XOR<CodigoCIE10ScalarRelationFilter, CodigoCIE10WhereInput>
  }, "id">

  export type DiagnosticoOrderByWithAggregationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    codigoCIE10Id?: SortOrder
    tipo?: SortOrder
    descripcionAdicional?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    _count?: DiagnosticoCountOrderByAggregateInput
    _avg?: DiagnosticoAvgOrderByAggregateInput
    _max?: DiagnosticoMaxOrderByAggregateInput
    _min?: DiagnosticoMinOrderByAggregateInput
    _sum?: DiagnosticoSumOrderByAggregateInput
  }

  export type DiagnosticoScalarWhereWithAggregatesInput = {
    AND?: DiagnosticoScalarWhereWithAggregatesInput | DiagnosticoScalarWhereWithAggregatesInput[]
    OR?: DiagnosticoScalarWhereWithAggregatesInput[]
    NOT?: DiagnosticoScalarWhereWithAggregatesInput | DiagnosticoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Diagnostico"> | number
    episodioClinicoId?: IntWithAggregatesFilter<"Diagnostico"> | number
    codigoCIE10Id?: StringWithAggregatesFilter<"Diagnostico"> | string
    tipo?: EnumTipoDiagnosticoWithAggregatesFilter<"Diagnostico"> | $Enums.TipoDiagnostico
    descripcionAdicional?: StringNullableWithAggregatesFilter<"Diagnostico"> | string | null
    fechaRegistro?: DateTimeWithAggregatesFilter<"Diagnostico"> | Date | string
  }

  export type PrescripcionWhereInput = {
    AND?: PrescripcionWhereInput | PrescripcionWhereInput[]
    OR?: PrescripcionWhereInput[]
    NOT?: PrescripcionWhereInput | PrescripcionWhereInput[]
    id?: IntFilter<"Prescripcion"> | number
    episodioClinicoId?: IntFilter<"Prescripcion"> | number
    nombreMedicamento?: StringFilter<"Prescripcion"> | string
    dosis?: StringFilter<"Prescripcion"> | string
    viaAdministracion?: StringFilter<"Prescripcion"> | string
    frecuencia?: StringFilter<"Prescripcion"> | string
    duracion?: StringFilter<"Prescripcion"> | string
    indicaciones?: StringNullableFilter<"Prescripcion"> | string | null
    fechaPrescripcion?: DateTimeFilter<"Prescripcion"> | Date | string
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }

  export type PrescripcionOrderByWithRelationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    nombreMedicamento?: SortOrder
    dosis?: SortOrder
    viaAdministracion?: SortOrder
    frecuencia?: SortOrder
    duracion?: SortOrder
    indicaciones?: SortOrderInput | SortOrder
    fechaPrescripcion?: SortOrder
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
  }

  export type PrescripcionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PrescripcionWhereInput | PrescripcionWhereInput[]
    OR?: PrescripcionWhereInput[]
    NOT?: PrescripcionWhereInput | PrescripcionWhereInput[]
    episodioClinicoId?: IntFilter<"Prescripcion"> | number
    nombreMedicamento?: StringFilter<"Prescripcion"> | string
    dosis?: StringFilter<"Prescripcion"> | string
    viaAdministracion?: StringFilter<"Prescripcion"> | string
    frecuencia?: StringFilter<"Prescripcion"> | string
    duracion?: StringFilter<"Prescripcion"> | string
    indicaciones?: StringNullableFilter<"Prescripcion"> | string | null
    fechaPrescripcion?: DateTimeFilter<"Prescripcion"> | Date | string
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }, "id">

  export type PrescripcionOrderByWithAggregationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    nombreMedicamento?: SortOrder
    dosis?: SortOrder
    viaAdministracion?: SortOrder
    frecuencia?: SortOrder
    duracion?: SortOrder
    indicaciones?: SortOrderInput | SortOrder
    fechaPrescripcion?: SortOrder
    _count?: PrescripcionCountOrderByAggregateInput
    _avg?: PrescripcionAvgOrderByAggregateInput
    _max?: PrescripcionMaxOrderByAggregateInput
    _min?: PrescripcionMinOrderByAggregateInput
    _sum?: PrescripcionSumOrderByAggregateInput
  }

  export type PrescripcionScalarWhereWithAggregatesInput = {
    AND?: PrescripcionScalarWhereWithAggregatesInput | PrescripcionScalarWhereWithAggregatesInput[]
    OR?: PrescripcionScalarWhereWithAggregatesInput[]
    NOT?: PrescripcionScalarWhereWithAggregatesInput | PrescripcionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Prescripcion"> | number
    episodioClinicoId?: IntWithAggregatesFilter<"Prescripcion"> | number
    nombreMedicamento?: StringWithAggregatesFilter<"Prescripcion"> | string
    dosis?: StringWithAggregatesFilter<"Prescripcion"> | string
    viaAdministracion?: StringWithAggregatesFilter<"Prescripcion"> | string
    frecuencia?: StringWithAggregatesFilter<"Prescripcion"> | string
    duracion?: StringWithAggregatesFilter<"Prescripcion"> | string
    indicaciones?: StringNullableWithAggregatesFilter<"Prescripcion"> | string | null
    fechaPrescripcion?: DateTimeWithAggregatesFilter<"Prescripcion"> | Date | string
  }

  export type DocumentoClinicoWhereInput = {
    AND?: DocumentoClinicoWhereInput | DocumentoClinicoWhereInput[]
    OR?: DocumentoClinicoWhereInput[]
    NOT?: DocumentoClinicoWhereInput | DocumentoClinicoWhereInput[]
    id?: IntFilter<"DocumentoClinico"> | number
    episodioClinicoId?: IntFilter<"DocumentoClinico"> | number
    tipoDocumento?: StringFilter<"DocumentoClinico"> | string
    titulo?: StringFilter<"DocumentoClinico"> | string
    rutaArchivo?: StringFilter<"DocumentoClinico"> | string
    contenido?: BytesNullableFilter<"DocumentoClinico"> | Uint8Array | null
    formato?: StringFilter<"DocumentoClinico"> | string
    fechaDocumento?: DateTimeFilter<"DocumentoClinico"> | Date | string
    fechaRegistro?: DateTimeFilter<"DocumentoClinico"> | Date | string
    observaciones?: StringNullableFilter<"DocumentoClinico"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }

  export type DocumentoClinicoOrderByWithRelationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoDocumento?: SortOrder
    titulo?: SortOrder
    rutaArchivo?: SortOrder
    contenido?: SortOrderInput | SortOrder
    formato?: SortOrder
    fechaDocumento?: SortOrder
    fechaRegistro?: SortOrder
    observaciones?: SortOrderInput | SortOrder
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
  }

  export type DocumentoClinicoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentoClinicoWhereInput | DocumentoClinicoWhereInput[]
    OR?: DocumentoClinicoWhereInput[]
    NOT?: DocumentoClinicoWhereInput | DocumentoClinicoWhereInput[]
    episodioClinicoId?: IntFilter<"DocumentoClinico"> | number
    tipoDocumento?: StringFilter<"DocumentoClinico"> | string
    titulo?: StringFilter<"DocumentoClinico"> | string
    rutaArchivo?: StringFilter<"DocumentoClinico"> | string
    contenido?: BytesNullableFilter<"DocumentoClinico"> | Uint8Array | null
    formato?: StringFilter<"DocumentoClinico"> | string
    fechaDocumento?: DateTimeFilter<"DocumentoClinico"> | Date | string
    fechaRegistro?: DateTimeFilter<"DocumentoClinico"> | Date | string
    observaciones?: StringNullableFilter<"DocumentoClinico"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }, "id">

  export type DocumentoClinicoOrderByWithAggregationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoDocumento?: SortOrder
    titulo?: SortOrder
    rutaArchivo?: SortOrder
    contenido?: SortOrderInput | SortOrder
    formato?: SortOrder
    fechaDocumento?: SortOrder
    fechaRegistro?: SortOrder
    observaciones?: SortOrderInput | SortOrder
    _count?: DocumentoClinicoCountOrderByAggregateInput
    _avg?: DocumentoClinicoAvgOrderByAggregateInput
    _max?: DocumentoClinicoMaxOrderByAggregateInput
    _min?: DocumentoClinicoMinOrderByAggregateInput
    _sum?: DocumentoClinicoSumOrderByAggregateInput
  }

  export type DocumentoClinicoScalarWhereWithAggregatesInput = {
    AND?: DocumentoClinicoScalarWhereWithAggregatesInput | DocumentoClinicoScalarWhereWithAggregatesInput[]
    OR?: DocumentoClinicoScalarWhereWithAggregatesInput[]
    NOT?: DocumentoClinicoScalarWhereWithAggregatesInput | DocumentoClinicoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DocumentoClinico"> | number
    episodioClinicoId?: IntWithAggregatesFilter<"DocumentoClinico"> | number
    tipoDocumento?: StringWithAggregatesFilter<"DocumentoClinico"> | string
    titulo?: StringWithAggregatesFilter<"DocumentoClinico"> | string
    rutaArchivo?: StringWithAggregatesFilter<"DocumentoClinico"> | string
    contenido?: BytesNullableWithAggregatesFilter<"DocumentoClinico"> | Uint8Array | null
    formato?: StringWithAggregatesFilter<"DocumentoClinico"> | string
    fechaDocumento?: DateTimeWithAggregatesFilter<"DocumentoClinico"> | Date | string
    fechaRegistro?: DateTimeWithAggregatesFilter<"DocumentoClinico"> | Date | string
    observaciones?: StringNullableWithAggregatesFilter<"DocumentoClinico"> | string | null
  }

  export type ConsentimientoInformadoWhereInput = {
    AND?: ConsentimientoInformadoWhereInput | ConsentimientoInformadoWhereInput[]
    OR?: ConsentimientoInformadoWhereInput[]
    NOT?: ConsentimientoInformadoWhereInput | ConsentimientoInformadoWhereInput[]
    id?: IntFilter<"ConsentimientoInformado"> | number
    episodioClinicoId?: IntFilter<"ConsentimientoInformado"> | number
    tipoProcedimiento?: StringFilter<"ConsentimientoInformado"> | string
    contenido?: StringFilter<"ConsentimientoInformado"> | string
    fechaFirma?: DateTimeNullableFilter<"ConsentimientoInformado"> | Date | string | null
    firmadoPaciente?: BoolFilter<"ConsentimientoInformado"> | boolean
    firmadoRepresentante?: BoolFilter<"ConsentimientoInformado"> | boolean
    nombreRepresentante?: StringNullableFilter<"ConsentimientoInformado"> | string | null
    documentoRepresentante?: StringNullableFilter<"ConsentimientoInformado"> | string | null
    documentoDigitalizado?: BytesNullableFilter<"ConsentimientoInformado"> | Uint8Array | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }

  export type ConsentimientoInformadoOrderByWithRelationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoProcedimiento?: SortOrder
    contenido?: SortOrder
    fechaFirma?: SortOrderInput | SortOrder
    firmadoPaciente?: SortOrder
    firmadoRepresentante?: SortOrder
    nombreRepresentante?: SortOrderInput | SortOrder
    documentoRepresentante?: SortOrderInput | SortOrder
    documentoDigitalizado?: SortOrderInput | SortOrder
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
  }

  export type ConsentimientoInformadoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConsentimientoInformadoWhereInput | ConsentimientoInformadoWhereInput[]
    OR?: ConsentimientoInformadoWhereInput[]
    NOT?: ConsentimientoInformadoWhereInput | ConsentimientoInformadoWhereInput[]
    episodioClinicoId?: IntFilter<"ConsentimientoInformado"> | number
    tipoProcedimiento?: StringFilter<"ConsentimientoInformado"> | string
    contenido?: StringFilter<"ConsentimientoInformado"> | string
    fechaFirma?: DateTimeNullableFilter<"ConsentimientoInformado"> | Date | string | null
    firmadoPaciente?: BoolFilter<"ConsentimientoInformado"> | boolean
    firmadoRepresentante?: BoolFilter<"ConsentimientoInformado"> | boolean
    nombreRepresentante?: StringNullableFilter<"ConsentimientoInformado"> | string | null
    documentoRepresentante?: StringNullableFilter<"ConsentimientoInformado"> | string | null
    documentoDigitalizado?: BytesNullableFilter<"ConsentimientoInformado"> | Uint8Array | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }, "id">

  export type ConsentimientoInformadoOrderByWithAggregationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoProcedimiento?: SortOrder
    contenido?: SortOrder
    fechaFirma?: SortOrderInput | SortOrder
    firmadoPaciente?: SortOrder
    firmadoRepresentante?: SortOrder
    nombreRepresentante?: SortOrderInput | SortOrder
    documentoRepresentante?: SortOrderInput | SortOrder
    documentoDigitalizado?: SortOrderInput | SortOrder
    _count?: ConsentimientoInformadoCountOrderByAggregateInput
    _avg?: ConsentimientoInformadoAvgOrderByAggregateInput
    _max?: ConsentimientoInformadoMaxOrderByAggregateInput
    _min?: ConsentimientoInformadoMinOrderByAggregateInput
    _sum?: ConsentimientoInformadoSumOrderByAggregateInput
  }

  export type ConsentimientoInformadoScalarWhereWithAggregatesInput = {
    AND?: ConsentimientoInformadoScalarWhereWithAggregatesInput | ConsentimientoInformadoScalarWhereWithAggregatesInput[]
    OR?: ConsentimientoInformadoScalarWhereWithAggregatesInput[]
    NOT?: ConsentimientoInformadoScalarWhereWithAggregatesInput | ConsentimientoInformadoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ConsentimientoInformado"> | number
    episodioClinicoId?: IntWithAggregatesFilter<"ConsentimientoInformado"> | number
    tipoProcedimiento?: StringWithAggregatesFilter<"ConsentimientoInformado"> | string
    contenido?: StringWithAggregatesFilter<"ConsentimientoInformado"> | string
    fechaFirma?: DateTimeNullableWithAggregatesFilter<"ConsentimientoInformado"> | Date | string | null
    firmadoPaciente?: BoolWithAggregatesFilter<"ConsentimientoInformado"> | boolean
    firmadoRepresentante?: BoolWithAggregatesFilter<"ConsentimientoInformado"> | boolean
    nombreRepresentante?: StringNullableWithAggregatesFilter<"ConsentimientoInformado"> | string | null
    documentoRepresentante?: StringNullableWithAggregatesFilter<"ConsentimientoInformado"> | string | null
    documentoDigitalizado?: BytesNullableWithAggregatesFilter<"ConsentimientoInformado"> | Uint8Array | null
  }

  export type OdontologiaDetalleWhereInput = {
    AND?: OdontologiaDetalleWhereInput | OdontologiaDetalleWhereInput[]
    OR?: OdontologiaDetalleWhereInput[]
    NOT?: OdontologiaDetalleWhereInput | OdontologiaDetalleWhereInput[]
    id?: IntFilter<"OdontologiaDetalle"> | number
    episodioClinicoId?: IntFilter<"OdontologiaDetalle"> | number
    odontograma?: BytesNullableFilter<"OdontologiaDetalle"> | Uint8Array | null
    indiceCPOD?: DecimalNullableFilter<"OdontologiaDetalle"> | Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: StringNullableFilter<"OdontologiaDetalle"> | string | null
    procedimientosRealizados?: StringNullableFilter<"OdontologiaDetalle"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }

  export type OdontologiaDetalleOrderByWithRelationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    odontograma?: SortOrderInput | SortOrder
    indiceCPOD?: SortOrderInput | SortOrder
    observacionesDentales?: SortOrderInput | SortOrder
    procedimientosRealizados?: SortOrderInput | SortOrder
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
  }

  export type OdontologiaDetalleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    episodioClinicoId?: number
    AND?: OdontologiaDetalleWhereInput | OdontologiaDetalleWhereInput[]
    OR?: OdontologiaDetalleWhereInput[]
    NOT?: OdontologiaDetalleWhereInput | OdontologiaDetalleWhereInput[]
    odontograma?: BytesNullableFilter<"OdontologiaDetalle"> | Uint8Array | null
    indiceCPOD?: DecimalNullableFilter<"OdontologiaDetalle"> | Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: StringNullableFilter<"OdontologiaDetalle"> | string | null
    procedimientosRealizados?: StringNullableFilter<"OdontologiaDetalle"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }, "id" | "episodioClinicoId">

  export type OdontologiaDetalleOrderByWithAggregationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    odontograma?: SortOrderInput | SortOrder
    indiceCPOD?: SortOrderInput | SortOrder
    observacionesDentales?: SortOrderInput | SortOrder
    procedimientosRealizados?: SortOrderInput | SortOrder
    _count?: OdontologiaDetalleCountOrderByAggregateInput
    _avg?: OdontologiaDetalleAvgOrderByAggregateInput
    _max?: OdontologiaDetalleMaxOrderByAggregateInput
    _min?: OdontologiaDetalleMinOrderByAggregateInput
    _sum?: OdontologiaDetalleSumOrderByAggregateInput
  }

  export type OdontologiaDetalleScalarWhereWithAggregatesInput = {
    AND?: OdontologiaDetalleScalarWhereWithAggregatesInput | OdontologiaDetalleScalarWhereWithAggregatesInput[]
    OR?: OdontologiaDetalleScalarWhereWithAggregatesInput[]
    NOT?: OdontologiaDetalleScalarWhereWithAggregatesInput | OdontologiaDetalleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OdontologiaDetalle"> | number
    episodioClinicoId?: IntWithAggregatesFilter<"OdontologiaDetalle"> | number
    odontograma?: BytesNullableWithAggregatesFilter<"OdontologiaDetalle"> | Uint8Array | null
    indiceCPOD?: DecimalNullableWithAggregatesFilter<"OdontologiaDetalle"> | Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: StringNullableWithAggregatesFilter<"OdontologiaDetalle"> | string | null
    procedimientosRealizados?: StringNullableWithAggregatesFilter<"OdontologiaDetalle"> | string | null
  }

  export type OftalmologiaDetalleWhereInput = {
    AND?: OftalmologiaDetalleWhereInput | OftalmologiaDetalleWhereInput[]
    OR?: OftalmologiaDetalleWhereInput[]
    NOT?: OftalmologiaDetalleWhereInput | OftalmologiaDetalleWhereInput[]
    id?: IntFilter<"OftalmologiaDetalle"> | number
    episodioClinicoId?: IntFilter<"OftalmologiaDetalle"> | number
    agudezaVisualOD?: StringNullableFilter<"OftalmologiaDetalle"> | string | null
    agudezaVisualOI?: StringNullableFilter<"OftalmologiaDetalle"> | string | null
    presionIntraocularOD?: DecimalNullableFilter<"OftalmologiaDetalle"> | Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: DecimalNullableFilter<"OftalmologiaDetalle"> | Decimal | DecimalJsLike | number | string | null
    fondoOjo?: StringNullableFilter<"OftalmologiaDetalle"> | string | null
    formulaOptica?: StringNullableFilter<"OftalmologiaDetalle"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }

  export type OftalmologiaDetalleOrderByWithRelationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    agudezaVisualOD?: SortOrderInput | SortOrder
    agudezaVisualOI?: SortOrderInput | SortOrder
    presionIntraocularOD?: SortOrderInput | SortOrder
    presionIntraocularOI?: SortOrderInput | SortOrder
    fondoOjo?: SortOrderInput | SortOrder
    formulaOptica?: SortOrderInput | SortOrder
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
  }

  export type OftalmologiaDetalleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    episodioClinicoId?: number
    AND?: OftalmologiaDetalleWhereInput | OftalmologiaDetalleWhereInput[]
    OR?: OftalmologiaDetalleWhereInput[]
    NOT?: OftalmologiaDetalleWhereInput | OftalmologiaDetalleWhereInput[]
    agudezaVisualOD?: StringNullableFilter<"OftalmologiaDetalle"> | string | null
    agudezaVisualOI?: StringNullableFilter<"OftalmologiaDetalle"> | string | null
    presionIntraocularOD?: DecimalNullableFilter<"OftalmologiaDetalle"> | Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: DecimalNullableFilter<"OftalmologiaDetalle"> | Decimal | DecimalJsLike | number | string | null
    fondoOjo?: StringNullableFilter<"OftalmologiaDetalle"> | string | null
    formulaOptica?: StringNullableFilter<"OftalmologiaDetalle"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }, "id" | "episodioClinicoId">

  export type OftalmologiaDetalleOrderByWithAggregationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    agudezaVisualOD?: SortOrderInput | SortOrder
    agudezaVisualOI?: SortOrderInput | SortOrder
    presionIntraocularOD?: SortOrderInput | SortOrder
    presionIntraocularOI?: SortOrderInput | SortOrder
    fondoOjo?: SortOrderInput | SortOrder
    formulaOptica?: SortOrderInput | SortOrder
    _count?: OftalmologiaDetalleCountOrderByAggregateInput
    _avg?: OftalmologiaDetalleAvgOrderByAggregateInput
    _max?: OftalmologiaDetalleMaxOrderByAggregateInput
    _min?: OftalmologiaDetalleMinOrderByAggregateInput
    _sum?: OftalmologiaDetalleSumOrderByAggregateInput
  }

  export type OftalmologiaDetalleScalarWhereWithAggregatesInput = {
    AND?: OftalmologiaDetalleScalarWhereWithAggregatesInput | OftalmologiaDetalleScalarWhereWithAggregatesInput[]
    OR?: OftalmologiaDetalleScalarWhereWithAggregatesInput[]
    NOT?: OftalmologiaDetalleScalarWhereWithAggregatesInput | OftalmologiaDetalleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OftalmologiaDetalle"> | number
    episodioClinicoId?: IntWithAggregatesFilter<"OftalmologiaDetalle"> | number
    agudezaVisualOD?: StringNullableWithAggregatesFilter<"OftalmologiaDetalle"> | string | null
    agudezaVisualOI?: StringNullableWithAggregatesFilter<"OftalmologiaDetalle"> | string | null
    presionIntraocularOD?: DecimalNullableWithAggregatesFilter<"OftalmologiaDetalle"> | Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: DecimalNullableWithAggregatesFilter<"OftalmologiaDetalle"> | Decimal | DecimalJsLike | number | string | null
    fondoOjo?: StringNullableWithAggregatesFilter<"OftalmologiaDetalle"> | string | null
    formulaOptica?: StringNullableWithAggregatesFilter<"OftalmologiaDetalle"> | string | null
  }

  export type PsicologiaDetalleWhereInput = {
    AND?: PsicologiaDetalleWhereInput | PsicologiaDetalleWhereInput[]
    OR?: PsicologiaDetalleWhereInput[]
    NOT?: PsicologiaDetalleWhereInput | PsicologiaDetalleWhereInput[]
    id?: IntFilter<"PsicologiaDetalle"> | number
    episodioClinicoId?: IntFilter<"PsicologiaDetalle"> | number
    evaluacionMental?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    testAplicados?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    impresionDiagnostica?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    planIntervencion?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    evolucion?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }

  export type PsicologiaDetalleOrderByWithRelationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionMental?: SortOrderInput | SortOrder
    testAplicados?: SortOrderInput | SortOrder
    impresionDiagnostica?: SortOrderInput | SortOrder
    planIntervencion?: SortOrderInput | SortOrder
    evolucion?: SortOrderInput | SortOrder
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
  }

  export type PsicologiaDetalleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    episodioClinicoId?: number
    AND?: PsicologiaDetalleWhereInput | PsicologiaDetalleWhereInput[]
    OR?: PsicologiaDetalleWhereInput[]
    NOT?: PsicologiaDetalleWhereInput | PsicologiaDetalleWhereInput[]
    evaluacionMental?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    testAplicados?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    impresionDiagnostica?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    planIntervencion?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    evolucion?: StringNullableFilter<"PsicologiaDetalle"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }, "id" | "episodioClinicoId">

  export type PsicologiaDetalleOrderByWithAggregationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionMental?: SortOrderInput | SortOrder
    testAplicados?: SortOrderInput | SortOrder
    impresionDiagnostica?: SortOrderInput | SortOrder
    planIntervencion?: SortOrderInput | SortOrder
    evolucion?: SortOrderInput | SortOrder
    _count?: PsicologiaDetalleCountOrderByAggregateInput
    _avg?: PsicologiaDetalleAvgOrderByAggregateInput
    _max?: PsicologiaDetalleMaxOrderByAggregateInput
    _min?: PsicologiaDetalleMinOrderByAggregateInput
    _sum?: PsicologiaDetalleSumOrderByAggregateInput
  }

  export type PsicologiaDetalleScalarWhereWithAggregatesInput = {
    AND?: PsicologiaDetalleScalarWhereWithAggregatesInput | PsicologiaDetalleScalarWhereWithAggregatesInput[]
    OR?: PsicologiaDetalleScalarWhereWithAggregatesInput[]
    NOT?: PsicologiaDetalleScalarWhereWithAggregatesInput | PsicologiaDetalleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PsicologiaDetalle"> | number
    episodioClinicoId?: IntWithAggregatesFilter<"PsicologiaDetalle"> | number
    evaluacionMental?: StringNullableWithAggregatesFilter<"PsicologiaDetalle"> | string | null
    testAplicados?: StringNullableWithAggregatesFilter<"PsicologiaDetalle"> | string | null
    impresionDiagnostica?: StringNullableWithAggregatesFilter<"PsicologiaDetalle"> | string | null
    planIntervencion?: StringNullableWithAggregatesFilter<"PsicologiaDetalle"> | string | null
    evolucion?: StringNullableWithAggregatesFilter<"PsicologiaDetalle"> | string | null
  }

  export type TrabajoSocialDetalleWhereInput = {
    AND?: TrabajoSocialDetalleWhereInput | TrabajoSocialDetalleWhereInput[]
    OR?: TrabajoSocialDetalleWhereInput[]
    NOT?: TrabajoSocialDetalleWhereInput | TrabajoSocialDetalleWhereInput[]
    id?: IntFilter<"TrabajoSocialDetalle"> | number
    episodioClinicoId?: IntFilter<"TrabajoSocialDetalle"> | number
    evaluacionSocioeconomica?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    dinamicaFamiliar?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    redesApoyo?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    intervencionRealizada?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    seguimientoCaso?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }

  export type TrabajoSocialDetalleOrderByWithRelationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionSocioeconomica?: SortOrderInput | SortOrder
    dinamicaFamiliar?: SortOrderInput | SortOrder
    redesApoyo?: SortOrderInput | SortOrder
    intervencionRealizada?: SortOrderInput | SortOrder
    seguimientoCaso?: SortOrderInput | SortOrder
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
  }

  export type TrabajoSocialDetalleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    episodioClinicoId?: number
    AND?: TrabajoSocialDetalleWhereInput | TrabajoSocialDetalleWhereInput[]
    OR?: TrabajoSocialDetalleWhereInput[]
    NOT?: TrabajoSocialDetalleWhereInput | TrabajoSocialDetalleWhereInput[]
    evaluacionSocioeconomica?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    dinamicaFamiliar?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    redesApoyo?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    intervencionRealizada?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    seguimientoCaso?: StringNullableFilter<"TrabajoSocialDetalle"> | string | null
    episodioClinico?: XOR<EpisodioClincoScalarRelationFilter, EpisodioClincoWhereInput>
  }, "id" | "episodioClinicoId">

  export type TrabajoSocialDetalleOrderByWithAggregationInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionSocioeconomica?: SortOrderInput | SortOrder
    dinamicaFamiliar?: SortOrderInput | SortOrder
    redesApoyo?: SortOrderInput | SortOrder
    intervencionRealizada?: SortOrderInput | SortOrder
    seguimientoCaso?: SortOrderInput | SortOrder
    _count?: TrabajoSocialDetalleCountOrderByAggregateInput
    _avg?: TrabajoSocialDetalleAvgOrderByAggregateInput
    _max?: TrabajoSocialDetalleMaxOrderByAggregateInput
    _min?: TrabajoSocialDetalleMinOrderByAggregateInput
    _sum?: TrabajoSocialDetalleSumOrderByAggregateInput
  }

  export type TrabajoSocialDetalleScalarWhereWithAggregatesInput = {
    AND?: TrabajoSocialDetalleScalarWhereWithAggregatesInput | TrabajoSocialDetalleScalarWhereWithAggregatesInput[]
    OR?: TrabajoSocialDetalleScalarWhereWithAggregatesInput[]
    NOT?: TrabajoSocialDetalleScalarWhereWithAggregatesInput | TrabajoSocialDetalleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TrabajoSocialDetalle"> | number
    episodioClinicoId?: IntWithAggregatesFilter<"TrabajoSocialDetalle"> | number
    evaluacionSocioeconomica?: StringNullableWithAggregatesFilter<"TrabajoSocialDetalle"> | string | null
    dinamicaFamiliar?: StringNullableWithAggregatesFilter<"TrabajoSocialDetalle"> | string | null
    redesApoyo?: StringNullableWithAggregatesFilter<"TrabajoSocialDetalle"> | string | null
    intervencionRealizada?: StringNullableWithAggregatesFilter<"TrabajoSocialDetalle"> | string | null
    seguimientoCaso?: StringNullableWithAggregatesFilter<"TrabajoSocialDetalle"> | string | null
  }

  export type AuditoriaHistoriaWhereInput = {
    AND?: AuditoriaHistoriaWhereInput | AuditoriaHistoriaWhereInput[]
    OR?: AuditoriaHistoriaWhereInput[]
    NOT?: AuditoriaHistoriaWhereInput | AuditoriaHistoriaWhereInput[]
    id?: IntFilter<"AuditoriaHistoria"> | number
    historiaClinicaId?: IntNullableFilter<"AuditoriaHistoria"> | number | null
    episodioClinicoId?: IntNullableFilter<"AuditoriaHistoria"> | number | null
    usuarioId?: IntFilter<"AuditoriaHistoria"> | number
    fechaAccion?: DateTimeFilter<"AuditoriaHistoria"> | Date | string
    tipoAccion?: StringFilter<"AuditoriaHistoria"> | string
    descripcion?: StringNullableFilter<"AuditoriaHistoria"> | string | null
    tablaAfectada?: StringFilter<"AuditoriaHistoria"> | string
    idRegistro?: IntFilter<"AuditoriaHistoria"> | number
    datosAntiguos?: StringNullableFilter<"AuditoriaHistoria"> | string | null
    datosNuevos?: StringNullableFilter<"AuditoriaHistoria"> | string | null
    direccionIp?: StringFilter<"AuditoriaHistoria"> | string
    historiaClinica?: XOR<HistoriaClinicaNullableScalarRelationFilter, HistoriaClinicaWhereInput> | null
    episodioClinico?: XOR<EpisodioClincoNullableScalarRelationFilter, EpisodioClincoWhereInput> | null
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type AuditoriaHistoriaOrderByWithRelationInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrderInput | SortOrder
    episodioClinicoId?: SortOrderInput | SortOrder
    usuarioId?: SortOrder
    fechaAccion?: SortOrder
    tipoAccion?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    tablaAfectada?: SortOrder
    idRegistro?: SortOrder
    datosAntiguos?: SortOrderInput | SortOrder
    datosNuevos?: SortOrderInput | SortOrder
    direccionIp?: SortOrder
    historiaClinica?: HistoriaClinicaOrderByWithRelationInput
    episodioClinico?: EpisodioClincoOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type AuditoriaHistoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditoriaHistoriaWhereInput | AuditoriaHistoriaWhereInput[]
    OR?: AuditoriaHistoriaWhereInput[]
    NOT?: AuditoriaHistoriaWhereInput | AuditoriaHistoriaWhereInput[]
    historiaClinicaId?: IntNullableFilter<"AuditoriaHistoria"> | number | null
    episodioClinicoId?: IntNullableFilter<"AuditoriaHistoria"> | number | null
    usuarioId?: IntFilter<"AuditoriaHistoria"> | number
    fechaAccion?: DateTimeFilter<"AuditoriaHistoria"> | Date | string
    tipoAccion?: StringFilter<"AuditoriaHistoria"> | string
    descripcion?: StringNullableFilter<"AuditoriaHistoria"> | string | null
    tablaAfectada?: StringFilter<"AuditoriaHistoria"> | string
    idRegistro?: IntFilter<"AuditoriaHistoria"> | number
    datosAntiguos?: StringNullableFilter<"AuditoriaHistoria"> | string | null
    datosNuevos?: StringNullableFilter<"AuditoriaHistoria"> | string | null
    direccionIp?: StringFilter<"AuditoriaHistoria"> | string
    historiaClinica?: XOR<HistoriaClinicaNullableScalarRelationFilter, HistoriaClinicaWhereInput> | null
    episodioClinico?: XOR<EpisodioClincoNullableScalarRelationFilter, EpisodioClincoWhereInput> | null
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type AuditoriaHistoriaOrderByWithAggregationInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrderInput | SortOrder
    episodioClinicoId?: SortOrderInput | SortOrder
    usuarioId?: SortOrder
    fechaAccion?: SortOrder
    tipoAccion?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    tablaAfectada?: SortOrder
    idRegistro?: SortOrder
    datosAntiguos?: SortOrderInput | SortOrder
    datosNuevos?: SortOrderInput | SortOrder
    direccionIp?: SortOrder
    _count?: AuditoriaHistoriaCountOrderByAggregateInput
    _avg?: AuditoriaHistoriaAvgOrderByAggregateInput
    _max?: AuditoriaHistoriaMaxOrderByAggregateInput
    _min?: AuditoriaHistoriaMinOrderByAggregateInput
    _sum?: AuditoriaHistoriaSumOrderByAggregateInput
  }

  export type AuditoriaHistoriaScalarWhereWithAggregatesInput = {
    AND?: AuditoriaHistoriaScalarWhereWithAggregatesInput | AuditoriaHistoriaScalarWhereWithAggregatesInput[]
    OR?: AuditoriaHistoriaScalarWhereWithAggregatesInput[]
    NOT?: AuditoriaHistoriaScalarWhereWithAggregatesInput | AuditoriaHistoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuditoriaHistoria"> | number
    historiaClinicaId?: IntNullableWithAggregatesFilter<"AuditoriaHistoria"> | number | null
    episodioClinicoId?: IntNullableWithAggregatesFilter<"AuditoriaHistoria"> | number | null
    usuarioId?: IntWithAggregatesFilter<"AuditoriaHistoria"> | number
    fechaAccion?: DateTimeWithAggregatesFilter<"AuditoriaHistoria"> | Date | string
    tipoAccion?: StringWithAggregatesFilter<"AuditoriaHistoria"> | string
    descripcion?: StringNullableWithAggregatesFilter<"AuditoriaHistoria"> | string | null
    tablaAfectada?: StringWithAggregatesFilter<"AuditoriaHistoria"> | string
    idRegistro?: IntWithAggregatesFilter<"AuditoriaHistoria"> | number
    datosAntiguos?: StringNullableWithAggregatesFilter<"AuditoriaHistoria"> | string | null
    datosNuevos?: StringNullableWithAggregatesFilter<"AuditoriaHistoria"> | string | null
    direccionIp?: StringWithAggregatesFilter<"AuditoriaHistoria"> | string
  }

  export type UsuarioCreateInput = {
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso?: Date | string | null
    activo?: boolean
    fechaRegistro?: Date | string
    medico?: MedicoCreateNestedOneWithoutUsuarioInput
    enfermera?: EnfermeraCreateNestedOneWithoutUsuarioInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso?: Date | string | null
    activo?: boolean
    fechaRegistro?: Date | string
    medico?: MedicoUncheckedCreateNestedOneWithoutUsuarioInput
    enfermera?: EnfermeraUncheckedCreateNestedOneWithoutUsuarioInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    medico?: MedicoUpdateOneWithoutUsuarioNestedInput
    enfermera?: EnfermeraUpdateOneWithoutUsuarioNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    medico?: MedicoUncheckedUpdateOneWithoutUsuarioNestedInput
    enfermera?: EnfermeraUncheckedUpdateOneWithoutUsuarioNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso?: Date | string | null
    activo?: boolean
    fechaRegistro?: Date | string
  }

  export type UsuarioUpdateManyMutationInput = {
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicoCreateInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    usuario: UsuarioCreateNestedOneWithoutMedicoInput
    especialidades?: MedicoEspecialidadCreateNestedManyWithoutMedicoInput
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutMedicoInput
  }

  export type MedicoUncheckedCreateInput = {
    id?: number
    usuarioId: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    especialidades?: MedicoEspecialidadUncheckedCreateNestedManyWithoutMedicoInput
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutMedicoInput
  }

  export type MedicoUpdateInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutMedicoNestedInput
    especialidades?: MedicoEspecialidadUpdateManyWithoutMedicoNestedInput
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutMedicoNestedInput
  }

  export type MedicoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    especialidades?: MedicoEspecialidadUncheckedUpdateManyWithoutMedicoNestedInput
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutMedicoNestedInput
  }

  export type MedicoCreateManyInput = {
    id?: number
    usuarioId: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
  }

  export type MedicoUpdateManyMutationInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EnfermeraCreateInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    usuario: UsuarioCreateNestedOneWithoutEnfermeraInput
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutEnfermeraInput
  }

  export type EnfermeraUncheckedCreateInput = {
    id?: number
    usuarioId: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutEnfermeraInput
  }

  export type EnfermeraUpdateInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutEnfermeraNestedInput
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutEnfermeraNestedInput
  }

  export type EnfermeraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutEnfermeraNestedInput
  }

  export type EnfermeraCreateManyInput = {
    id?: number
    usuarioId: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
  }

  export type EnfermeraUpdateManyMutationInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EnfermeraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FacultadCreateInput = {
    nombre: string
    codigo: string
    descripcion?: string | null
    activo?: boolean
    programasAcademicos?: ProgramaAcademicoCreateNestedManyWithoutFacultadInput
  }

  export type FacultadUncheckedCreateInput = {
    id?: number
    nombre: string
    codigo: string
    descripcion?: string | null
    activo?: boolean
    programasAcademicos?: ProgramaAcademicoUncheckedCreateNestedManyWithoutFacultadInput
  }

  export type FacultadUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    programasAcademicos?: ProgramaAcademicoUpdateManyWithoutFacultadNestedInput
  }

  export type FacultadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    programasAcademicos?: ProgramaAcademicoUncheckedUpdateManyWithoutFacultadNestedInput
  }

  export type FacultadCreateManyInput = {
    id?: number
    nombre: string
    codigo: string
    descripcion?: string | null
    activo?: boolean
  }

  export type FacultadUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FacultadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProgramaAcademicoCreateInput = {
    nombre: string
    codigo: string
    descripcion?: string | null
    nivel: string
    activo?: boolean
    facultad: FacultadCreateNestedOneWithoutProgramasAcademicosInput
    pacientes?: PacienteCreateNestedManyWithoutProgramaAcademicoInput
  }

  export type ProgramaAcademicoUncheckedCreateInput = {
    id?: number
    facultadId: number
    nombre: string
    codigo: string
    descripcion?: string | null
    nivel: string
    activo?: boolean
    pacientes?: PacienteUncheckedCreateNestedManyWithoutProgramaAcademicoInput
  }

  export type ProgramaAcademicoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    nivel?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    facultad?: FacultadUpdateOneRequiredWithoutProgramasAcademicosNestedInput
    pacientes?: PacienteUpdateManyWithoutProgramaAcademicoNestedInput
  }

  export type ProgramaAcademicoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    facultadId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    nivel?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    pacientes?: PacienteUncheckedUpdateManyWithoutProgramaAcademicoNestedInput
  }

  export type ProgramaAcademicoCreateManyInput = {
    id?: number
    facultadId: number
    nombre: string
    codigo: string
    descripcion?: string | null
    nivel: string
    activo?: boolean
  }

  export type ProgramaAcademicoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    nivel?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProgramaAcademicoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    facultadId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    nivel?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SedeCreateInput = {
    nombre: string
    direccion: string
    telefono?: string | null
    horarioAtencion?: string | null
    activo?: boolean
    consultorios?: ConsultorioCreateNestedManyWithoutSedeInput
  }

  export type SedeUncheckedCreateInput = {
    id?: number
    nombre: string
    direccion: string
    telefono?: string | null
    horarioAtencion?: string | null
    activo?: boolean
    consultorios?: ConsultorioUncheckedCreateNestedManyWithoutSedeInput
  }

  export type SedeUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    horarioAtencion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    consultorios?: ConsultorioUpdateManyWithoutSedeNestedInput
  }

  export type SedeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    horarioAtencion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    consultorios?: ConsultorioUncheckedUpdateManyWithoutSedeNestedInput
  }

  export type SedeCreateManyInput = {
    id?: number
    nombre: string
    direccion: string
    telefono?: string | null
    horarioAtencion?: string | null
    activo?: boolean
  }

  export type SedeUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    horarioAtencion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SedeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    horarioAtencion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConsultorioCreateInput = {
    nombre: string
    codigo: string
    tipo: string
    activo?: boolean
    sede: SedeCreateNestedOneWithoutConsultoriosInput
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateInput = {
    id?: number
    sedeId: number
    nombre: string
    codigo: string
    tipo: string
    activo?: boolean
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sede?: SedeUpdateOneRequiredWithoutConsultoriosNestedInput
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sedeId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioCreateManyInput = {
    id?: number
    sedeId: number
    nombre: string
    codigo: string
    tipo: string
    activo?: boolean
  }

  export type ConsultorioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConsultorioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sedeId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EspecialidadCreateInput = {
    nombre: string
    descripcion?: string | null
    codigo: string
    activo?: boolean
    medicoEspecialidad?: MedicoEspecialidadCreateNestedManyWithoutEspecialidadInput
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutEspecialidadInput
  }

  export type EspecialidadUncheckedCreateInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    codigo: string
    activo?: boolean
    medicoEspecialidad?: MedicoEspecialidadUncheckedCreateNestedManyWithoutEspecialidadInput
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutEspecialidadInput
  }

  export type EspecialidadUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    medicoEspecialidad?: MedicoEspecialidadUpdateManyWithoutEspecialidadNestedInput
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutEspecialidadNestedInput
  }

  export type EspecialidadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    medicoEspecialidad?: MedicoEspecialidadUncheckedUpdateManyWithoutEspecialidadNestedInput
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutEspecialidadNestedInput
  }

  export type EspecialidadCreateManyInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    codigo: string
    activo?: boolean
  }

  export type EspecialidadUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EspecialidadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicoEspecialidadCreateInput = {
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    activo?: boolean
    medico: MedicoCreateNestedOneWithoutEspecialidadesInput
    especialidad: EspecialidadCreateNestedOneWithoutMedicoEspecialidadInput
  }

  export type MedicoEspecialidadUncheckedCreateInput = {
    id?: number
    medicoId: number
    especialidadId: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    activo?: boolean
  }

  export type MedicoEspecialidadUpdateInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    medico?: MedicoUpdateOneRequiredWithoutEspecialidadesNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutMedicoEspecialidadNestedInput
  }

  export type MedicoEspecialidadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicoEspecialidadCreateManyInput = {
    id?: number
    medicoId: number
    especialidadId: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    activo?: boolean
  }

  export type MedicoEspecialidadUpdateManyMutationInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicoEspecialidadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PacienteCreateInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    programaAcademico: ProgramaAcademicoCreateNestedOneWithoutPacientesInput
    contactosEmergencia?: ContactoEmergenciaCreateNestedManyWithoutPacienteInput
    historiasClinicas?: HistoriaClinicaCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateInput = {
    id?: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    programaAcademicoId: number
    contactosEmergencia?: ContactoEmergenciaUncheckedCreateNestedManyWithoutPacienteInput
    historiasClinicas?: HistoriaClinicaUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUpdateInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    programaAcademico?: ProgramaAcademicoUpdateOneRequiredWithoutPacientesNestedInput
    contactosEmergencia?: ContactoEmergenciaUpdateManyWithoutPacienteNestedInput
    historiasClinicas?: HistoriaClinicaUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    programaAcademicoId?: IntFieldUpdateOperationsInput | number
    contactosEmergencia?: ContactoEmergenciaUncheckedUpdateManyWithoutPacienteNestedInput
    historiasClinicas?: HistoriaClinicaUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteCreateManyInput = {
    id?: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    programaAcademicoId: number
  }

  export type PacienteUpdateManyMutationInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PacienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    programaAcademicoId?: IntFieldUpdateOperationsInput | number
  }

  export type ContactoEmergenciaCreateInput = {
    nombres: string
    apellidos: string
    parentesco: string
    telefonoPrincipal: string
    telefonoSecundario?: string | null
    direccion?: string | null
    activo?: boolean
    paciente: PacienteCreateNestedOneWithoutContactosEmergenciaInput
  }

  export type ContactoEmergenciaUncheckedCreateInput = {
    id?: number
    pacienteId: number
    nombres: string
    apellidos: string
    parentesco: string
    telefonoPrincipal: string
    telefonoSecundario?: string | null
    direccion?: string | null
    activo?: boolean
  }

  export type ContactoEmergenciaUpdateInput = {
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    parentesco?: StringFieldUpdateOperationsInput | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    paciente?: PacienteUpdateOneRequiredWithoutContactosEmergenciaNestedInput
  }

  export type ContactoEmergenciaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pacienteId?: IntFieldUpdateOperationsInput | number
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    parentesco?: StringFieldUpdateOperationsInput | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactoEmergenciaCreateManyInput = {
    id?: number
    pacienteId: number
    nombres: string
    apellidos: string
    parentesco: string
    telefonoPrincipal: string
    telefonoSecundario?: string | null
    direccion?: string | null
    activo?: boolean
  }

  export type ContactoEmergenciaUpdateManyMutationInput = {
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    parentesco?: StringFieldUpdateOperationsInput | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactoEmergenciaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pacienteId?: IntFieldUpdateOperationsInput | number
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    parentesco?: StringFieldUpdateOperationsInput | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HistoriaClinicaCreateInput = {
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
    paciente: PacienteCreateNestedOneWithoutHistoriasClinicasInput
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutHistoriaClinicaInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutHistoriaClinicaInput
  }

  export type HistoriaClinicaUncheckedCreateInput = {
    id?: number
    pacienteId: number
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutHistoriaClinicaInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutHistoriaClinicaInput
  }

  export type HistoriaClinicaUpdateInput = {
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente?: PacienteUpdateOneRequiredWithoutHistoriasClinicasNestedInput
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutHistoriaClinicaNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutHistoriaClinicaNestedInput
  }

  export type HistoriaClinicaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pacienteId?: IntFieldUpdateOperationsInput | number
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutHistoriaClinicaNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutHistoriaClinicaNestedInput
  }

  export type HistoriaClinicaCreateManyInput = {
    id?: number
    pacienteId: number
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
  }

  export type HistoriaClinicaUpdateManyMutationInput = {
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoriaClinicaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pacienteId?: IntFieldUpdateOperationsInput | number
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EpisodioClincoCreateInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUpdateInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoCreateManyInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
  }

  export type EpisodioClincoUpdateManyMutationInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EpisodioClincoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SignosVitalesCreateInput = {
    presionArterial?: string | null
    temperatura?: Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: number | null
    frecuenciaRespiratoria?: number | null
    saturacionOxigeno?: Decimal | DecimalJsLike | number | string | null
    peso?: Decimal | DecimalJsLike | number | string | null
    altura?: Decimal | DecimalJsLike | number | string | null
    imc?: Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: Date | string
    episodioClinico: EpisodioClincoCreateNestedOneWithoutSignosVitalesInput
  }

  export type SignosVitalesUncheckedCreateInput = {
    id?: number
    episodioClinicoId: number
    presionArterial?: string | null
    temperatura?: Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: number | null
    frecuenciaRespiratoria?: number | null
    saturacionOxigeno?: Decimal | DecimalJsLike | number | string | null
    peso?: Decimal | DecimalJsLike | number | string | null
    altura?: Decimal | DecimalJsLike | number | string | null
    imc?: Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: Date | string
  }

  export type SignosVitalesUpdateInput = {
    presionArterial?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: NullableIntFieldUpdateOperationsInput | number | null
    frecuenciaRespiratoria?: NullableIntFieldUpdateOperationsInput | number | null
    saturacionOxigeno?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    peso?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    altura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutSignosVitalesNestedInput
  }

  export type SignosVitalesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    presionArterial?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: NullableIntFieldUpdateOperationsInput | number | null
    frecuenciaRespiratoria?: NullableIntFieldUpdateOperationsInput | number | null
    saturacionOxigeno?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    peso?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    altura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignosVitalesCreateManyInput = {
    id?: number
    episodioClinicoId: number
    presionArterial?: string | null
    temperatura?: Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: number | null
    frecuenciaRespiratoria?: number | null
    saturacionOxigeno?: Decimal | DecimalJsLike | number | string | null
    peso?: Decimal | DecimalJsLike | number | string | null
    altura?: Decimal | DecimalJsLike | number | string | null
    imc?: Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: Date | string
  }

  export type SignosVitalesUpdateManyMutationInput = {
    presionArterial?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: NullableIntFieldUpdateOperationsInput | number | null
    frecuenciaRespiratoria?: NullableIntFieldUpdateOperationsInput | number | null
    saturacionOxigeno?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    peso?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    altura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignosVitalesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    presionArterial?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: NullableIntFieldUpdateOperationsInput | number | null
    frecuenciaRespiratoria?: NullableIntFieldUpdateOperationsInput | number | null
    saturacionOxigeno?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    peso?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    altura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodigoCIE10CreateInput = {
    codigo: string
    descripcion: string
    categoria: string
    subcategoria?: string | null
    activo?: boolean
    diagnosticos?: DiagnosticoCreateNestedManyWithoutCodigoCIE10Input
  }

  export type CodigoCIE10UncheckedCreateInput = {
    codigo: string
    descripcion: string
    categoria: string
    subcategoria?: string | null
    activo?: boolean
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutCodigoCIE10Input
  }

  export type CodigoCIE10UpdateInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    subcategoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    diagnosticos?: DiagnosticoUpdateManyWithoutCodigoCIE10NestedInput
  }

  export type CodigoCIE10UncheckedUpdateInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    subcategoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutCodigoCIE10NestedInput
  }

  export type CodigoCIE10CreateManyInput = {
    codigo: string
    descripcion: string
    categoria: string
    subcategoria?: string | null
    activo?: boolean
  }

  export type CodigoCIE10UpdateManyMutationInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    subcategoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CodigoCIE10UncheckedUpdateManyInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    subcategoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DiagnosticoCreateInput = {
    tipo?: $Enums.TipoDiagnostico
    descripcionAdicional?: string | null
    fechaRegistro?: Date | string
    episodioClinico: EpisodioClincoCreateNestedOneWithoutDiagnosticosInput
    codigoCIE10: CodigoCIE10CreateNestedOneWithoutDiagnosticosInput
  }

  export type DiagnosticoUncheckedCreateInput = {
    id?: number
    episodioClinicoId: number
    codigoCIE10Id: string
    tipo?: $Enums.TipoDiagnostico
    descripcionAdicional?: string | null
    fechaRegistro?: Date | string
  }

  export type DiagnosticoUpdateInput = {
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutDiagnosticosNestedInput
    codigoCIE10?: CodigoCIE10UpdateOneRequiredWithoutDiagnosticosNestedInput
  }

  export type DiagnosticoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    codigoCIE10Id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiagnosticoCreateManyInput = {
    id?: number
    episodioClinicoId: number
    codigoCIE10Id: string
    tipo?: $Enums.TipoDiagnostico
    descripcionAdicional?: string | null
    fechaRegistro?: Date | string
  }

  export type DiagnosticoUpdateManyMutationInput = {
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiagnosticoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    codigoCIE10Id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescripcionCreateInput = {
    nombreMedicamento: string
    dosis: string
    viaAdministracion: string
    frecuencia: string
    duracion: string
    indicaciones?: string | null
    fechaPrescripcion?: Date | string
    episodioClinico: EpisodioClincoCreateNestedOneWithoutPrescripcionesInput
  }

  export type PrescripcionUncheckedCreateInput = {
    id?: number
    episodioClinicoId: number
    nombreMedicamento: string
    dosis: string
    viaAdministracion: string
    frecuencia: string
    duracion: string
    indicaciones?: string | null
    fechaPrescripcion?: Date | string
  }

  export type PrescripcionUpdateInput = {
    nombreMedicamento?: StringFieldUpdateOperationsInput | string
    dosis?: StringFieldUpdateOperationsInput | string
    viaAdministracion?: StringFieldUpdateOperationsInput | string
    frecuencia?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    indicaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaPrescripcion?: DateTimeFieldUpdateOperationsInput | Date | string
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutPrescripcionesNestedInput
  }

  export type PrescripcionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    nombreMedicamento?: StringFieldUpdateOperationsInput | string
    dosis?: StringFieldUpdateOperationsInput | string
    viaAdministracion?: StringFieldUpdateOperationsInput | string
    frecuencia?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    indicaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaPrescripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescripcionCreateManyInput = {
    id?: number
    episodioClinicoId: number
    nombreMedicamento: string
    dosis: string
    viaAdministracion: string
    frecuencia: string
    duracion: string
    indicaciones?: string | null
    fechaPrescripcion?: Date | string
  }

  export type PrescripcionUpdateManyMutationInput = {
    nombreMedicamento?: StringFieldUpdateOperationsInput | string
    dosis?: StringFieldUpdateOperationsInput | string
    viaAdministracion?: StringFieldUpdateOperationsInput | string
    frecuencia?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    indicaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaPrescripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescripcionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    nombreMedicamento?: StringFieldUpdateOperationsInput | string
    dosis?: StringFieldUpdateOperationsInput | string
    viaAdministracion?: StringFieldUpdateOperationsInput | string
    frecuencia?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    indicaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaPrescripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoClinicoCreateInput = {
    tipoDocumento: string
    titulo: string
    rutaArchivo: string
    contenido?: Uint8Array | null
    formato: string
    fechaDocumento: Date | string
    fechaRegistro?: Date | string
    observaciones?: string | null
    episodioClinico: EpisodioClincoCreateNestedOneWithoutDocumentosClinicosInput
  }

  export type DocumentoClinicoUncheckedCreateInput = {
    id?: number
    episodioClinicoId: number
    tipoDocumento: string
    titulo: string
    rutaArchivo: string
    contenido?: Uint8Array | null
    formato: string
    fechaDocumento: Date | string
    fechaRegistro?: Date | string
    observaciones?: string | null
  }

  export type DocumentoClinicoUpdateInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    rutaArchivo?: StringFieldUpdateOperationsInput | string
    contenido?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    formato?: StringFieldUpdateOperationsInput | string
    fechaDocumento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutDocumentosClinicosNestedInput
  }

  export type DocumentoClinicoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    rutaArchivo?: StringFieldUpdateOperationsInput | string
    contenido?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    formato?: StringFieldUpdateOperationsInput | string
    fechaDocumento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentoClinicoCreateManyInput = {
    id?: number
    episodioClinicoId: number
    tipoDocumento: string
    titulo: string
    rutaArchivo: string
    contenido?: Uint8Array | null
    formato: string
    fechaDocumento: Date | string
    fechaRegistro?: Date | string
    observaciones?: string | null
  }

  export type DocumentoClinicoUpdateManyMutationInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    rutaArchivo?: StringFieldUpdateOperationsInput | string
    contenido?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    formato?: StringFieldUpdateOperationsInput | string
    fechaDocumento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentoClinicoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    rutaArchivo?: StringFieldUpdateOperationsInput | string
    contenido?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    formato?: StringFieldUpdateOperationsInput | string
    fechaDocumento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsentimientoInformadoCreateInput = {
    tipoProcedimiento: string
    contenido: string
    fechaFirma?: Date | string | null
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: string | null
    documentoRepresentante?: string | null
    documentoDigitalizado?: Uint8Array | null
    episodioClinico: EpisodioClincoCreateNestedOneWithoutConsentimientosInput
  }

  export type ConsentimientoInformadoUncheckedCreateInput = {
    id?: number
    episodioClinicoId: number
    tipoProcedimiento: string
    contenido: string
    fechaFirma?: Date | string | null
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: string | null
    documentoRepresentante?: string | null
    documentoDigitalizado?: Uint8Array | null
  }

  export type ConsentimientoInformadoUpdateInput = {
    tipoProcedimiento?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fechaFirma?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firmadoPaciente?: BoolFieldUpdateOperationsInput | boolean
    firmadoRepresentante?: BoolFieldUpdateOperationsInput | boolean
    nombreRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoDigitalizado?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutConsentimientosNestedInput
  }

  export type ConsentimientoInformadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    tipoProcedimiento?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fechaFirma?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firmadoPaciente?: BoolFieldUpdateOperationsInput | boolean
    firmadoRepresentante?: BoolFieldUpdateOperationsInput | boolean
    nombreRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoDigitalizado?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type ConsentimientoInformadoCreateManyInput = {
    id?: number
    episodioClinicoId: number
    tipoProcedimiento: string
    contenido: string
    fechaFirma?: Date | string | null
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: string | null
    documentoRepresentante?: string | null
    documentoDigitalizado?: Uint8Array | null
  }

  export type ConsentimientoInformadoUpdateManyMutationInput = {
    tipoProcedimiento?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fechaFirma?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firmadoPaciente?: BoolFieldUpdateOperationsInput | boolean
    firmadoRepresentante?: BoolFieldUpdateOperationsInput | boolean
    nombreRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoDigitalizado?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type ConsentimientoInformadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    tipoProcedimiento?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fechaFirma?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firmadoPaciente?: BoolFieldUpdateOperationsInput | boolean
    firmadoRepresentante?: BoolFieldUpdateOperationsInput | boolean
    nombreRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoDigitalizado?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type OdontologiaDetalleCreateInput = {
    odontograma?: Uint8Array | null
    indiceCPOD?: Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: string | null
    procedimientosRealizados?: string | null
    episodioClinico: EpisodioClincoCreateNestedOneWithoutOdontologiaDetalleInput
  }

  export type OdontologiaDetalleUncheckedCreateInput = {
    id?: number
    episodioClinicoId: number
    odontograma?: Uint8Array | null
    indiceCPOD?: Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: string | null
    procedimientosRealizados?: string | null
  }

  export type OdontologiaDetalleUpdateInput = {
    odontograma?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    indiceCPOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: NullableStringFieldUpdateOperationsInput | string | null
    procedimientosRealizados?: NullableStringFieldUpdateOperationsInput | string | null
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutOdontologiaDetalleNestedInput
  }

  export type OdontologiaDetalleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    odontograma?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    indiceCPOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: NullableStringFieldUpdateOperationsInput | string | null
    procedimientosRealizados?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OdontologiaDetalleCreateManyInput = {
    id?: number
    episodioClinicoId: number
    odontograma?: Uint8Array | null
    indiceCPOD?: Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: string | null
    procedimientosRealizados?: string | null
  }

  export type OdontologiaDetalleUpdateManyMutationInput = {
    odontograma?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    indiceCPOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: NullableStringFieldUpdateOperationsInput | string | null
    procedimientosRealizados?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OdontologiaDetalleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    odontograma?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    indiceCPOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: NullableStringFieldUpdateOperationsInput | string | null
    procedimientosRealizados?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OftalmologiaDetalleCreateInput = {
    agudezaVisualOD?: string | null
    agudezaVisualOI?: string | null
    presionIntraocularOD?: Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: Decimal | DecimalJsLike | number | string | null
    fondoOjo?: string | null
    formulaOptica?: string | null
    episodioClinico: EpisodioClincoCreateNestedOneWithoutOftalmologiaDetalleInput
  }

  export type OftalmologiaDetalleUncheckedCreateInput = {
    id?: number
    episodioClinicoId: number
    agudezaVisualOD?: string | null
    agudezaVisualOI?: string | null
    presionIntraocularOD?: Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: Decimal | DecimalJsLike | number | string | null
    fondoOjo?: string | null
    formulaOptica?: string | null
  }

  export type OftalmologiaDetalleUpdateInput = {
    agudezaVisualOD?: NullableStringFieldUpdateOperationsInput | string | null
    agudezaVisualOI?: NullableStringFieldUpdateOperationsInput | string | null
    presionIntraocularOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fondoOjo?: NullableStringFieldUpdateOperationsInput | string | null
    formulaOptica?: NullableStringFieldUpdateOperationsInput | string | null
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutOftalmologiaDetalleNestedInput
  }

  export type OftalmologiaDetalleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    agudezaVisualOD?: NullableStringFieldUpdateOperationsInput | string | null
    agudezaVisualOI?: NullableStringFieldUpdateOperationsInput | string | null
    presionIntraocularOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fondoOjo?: NullableStringFieldUpdateOperationsInput | string | null
    formulaOptica?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OftalmologiaDetalleCreateManyInput = {
    id?: number
    episodioClinicoId: number
    agudezaVisualOD?: string | null
    agudezaVisualOI?: string | null
    presionIntraocularOD?: Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: Decimal | DecimalJsLike | number | string | null
    fondoOjo?: string | null
    formulaOptica?: string | null
  }

  export type OftalmologiaDetalleUpdateManyMutationInput = {
    agudezaVisualOD?: NullableStringFieldUpdateOperationsInput | string | null
    agudezaVisualOI?: NullableStringFieldUpdateOperationsInput | string | null
    presionIntraocularOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fondoOjo?: NullableStringFieldUpdateOperationsInput | string | null
    formulaOptica?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OftalmologiaDetalleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    agudezaVisualOD?: NullableStringFieldUpdateOperationsInput | string | null
    agudezaVisualOI?: NullableStringFieldUpdateOperationsInput | string | null
    presionIntraocularOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fondoOjo?: NullableStringFieldUpdateOperationsInput | string | null
    formulaOptica?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsicologiaDetalleCreateInput = {
    evaluacionMental?: string | null
    testAplicados?: string | null
    impresionDiagnostica?: string | null
    planIntervencion?: string | null
    evolucion?: string | null
    episodioClinico: EpisodioClincoCreateNestedOneWithoutPsicologiaDetalleInput
  }

  export type PsicologiaDetalleUncheckedCreateInput = {
    id?: number
    episodioClinicoId: number
    evaluacionMental?: string | null
    testAplicados?: string | null
    impresionDiagnostica?: string | null
    planIntervencion?: string | null
    evolucion?: string | null
  }

  export type PsicologiaDetalleUpdateInput = {
    evaluacionMental?: NullableStringFieldUpdateOperationsInput | string | null
    testAplicados?: NullableStringFieldUpdateOperationsInput | string | null
    impresionDiagnostica?: NullableStringFieldUpdateOperationsInput | string | null
    planIntervencion?: NullableStringFieldUpdateOperationsInput | string | null
    evolucion?: NullableStringFieldUpdateOperationsInput | string | null
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutPsicologiaDetalleNestedInput
  }

  export type PsicologiaDetalleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    evaluacionMental?: NullableStringFieldUpdateOperationsInput | string | null
    testAplicados?: NullableStringFieldUpdateOperationsInput | string | null
    impresionDiagnostica?: NullableStringFieldUpdateOperationsInput | string | null
    planIntervencion?: NullableStringFieldUpdateOperationsInput | string | null
    evolucion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsicologiaDetalleCreateManyInput = {
    id?: number
    episodioClinicoId: number
    evaluacionMental?: string | null
    testAplicados?: string | null
    impresionDiagnostica?: string | null
    planIntervencion?: string | null
    evolucion?: string | null
  }

  export type PsicologiaDetalleUpdateManyMutationInput = {
    evaluacionMental?: NullableStringFieldUpdateOperationsInput | string | null
    testAplicados?: NullableStringFieldUpdateOperationsInput | string | null
    impresionDiagnostica?: NullableStringFieldUpdateOperationsInput | string | null
    planIntervencion?: NullableStringFieldUpdateOperationsInput | string | null
    evolucion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsicologiaDetalleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    evaluacionMental?: NullableStringFieldUpdateOperationsInput | string | null
    testAplicados?: NullableStringFieldUpdateOperationsInput | string | null
    impresionDiagnostica?: NullableStringFieldUpdateOperationsInput | string | null
    planIntervencion?: NullableStringFieldUpdateOperationsInput | string | null
    evolucion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrabajoSocialDetalleCreateInput = {
    evaluacionSocioeconomica?: string | null
    dinamicaFamiliar?: string | null
    redesApoyo?: string | null
    intervencionRealizada?: string | null
    seguimientoCaso?: string | null
    episodioClinico: EpisodioClincoCreateNestedOneWithoutTrabajoSocialDetalleInput
  }

  export type TrabajoSocialDetalleUncheckedCreateInput = {
    id?: number
    episodioClinicoId: number
    evaluacionSocioeconomica?: string | null
    dinamicaFamiliar?: string | null
    redesApoyo?: string | null
    intervencionRealizada?: string | null
    seguimientoCaso?: string | null
  }

  export type TrabajoSocialDetalleUpdateInput = {
    evaluacionSocioeconomica?: NullableStringFieldUpdateOperationsInput | string | null
    dinamicaFamiliar?: NullableStringFieldUpdateOperationsInput | string | null
    redesApoyo?: NullableStringFieldUpdateOperationsInput | string | null
    intervencionRealizada?: NullableStringFieldUpdateOperationsInput | string | null
    seguimientoCaso?: NullableStringFieldUpdateOperationsInput | string | null
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutTrabajoSocialDetalleNestedInput
  }

  export type TrabajoSocialDetalleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    evaluacionSocioeconomica?: NullableStringFieldUpdateOperationsInput | string | null
    dinamicaFamiliar?: NullableStringFieldUpdateOperationsInput | string | null
    redesApoyo?: NullableStringFieldUpdateOperationsInput | string | null
    intervencionRealizada?: NullableStringFieldUpdateOperationsInput | string | null
    seguimientoCaso?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrabajoSocialDetalleCreateManyInput = {
    id?: number
    episodioClinicoId: number
    evaluacionSocioeconomica?: string | null
    dinamicaFamiliar?: string | null
    redesApoyo?: string | null
    intervencionRealizada?: string | null
    seguimientoCaso?: string | null
  }

  export type TrabajoSocialDetalleUpdateManyMutationInput = {
    evaluacionSocioeconomica?: NullableStringFieldUpdateOperationsInput | string | null
    dinamicaFamiliar?: NullableStringFieldUpdateOperationsInput | string | null
    redesApoyo?: NullableStringFieldUpdateOperationsInput | string | null
    intervencionRealizada?: NullableStringFieldUpdateOperationsInput | string | null
    seguimientoCaso?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrabajoSocialDetalleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    evaluacionSocioeconomica?: NullableStringFieldUpdateOperationsInput | string | null
    dinamicaFamiliar?: NullableStringFieldUpdateOperationsInput | string | null
    redesApoyo?: NullableStringFieldUpdateOperationsInput | string | null
    intervencionRealizada?: NullableStringFieldUpdateOperationsInput | string | null
    seguimientoCaso?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditoriaHistoriaCreateInput = {
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
    historiaClinica?: HistoriaClinicaCreateNestedOneWithoutAuditoriasInput
    episodioClinico?: EpisodioClincoCreateNestedOneWithoutAuditoriasInput
    usuario: UsuarioCreateNestedOneWithoutAuditoriasInput
  }

  export type AuditoriaHistoriaUncheckedCreateInput = {
    id?: number
    historiaClinicaId?: number | null
    episodioClinicoId?: number | null
    usuarioId: number
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
  }

  export type AuditoriaHistoriaUpdateInput = {
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
    historiaClinica?: HistoriaClinicaUpdateOneWithoutAuditoriasNestedInput
    episodioClinico?: EpisodioClincoUpdateOneWithoutAuditoriasNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutAuditoriasNestedInput
  }

  export type AuditoriaHistoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: NullableIntFieldUpdateOperationsInput | number | null
    episodioClinicoId?: NullableIntFieldUpdateOperationsInput | number | null
    usuarioId?: IntFieldUpdateOperationsInput | number
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriaHistoriaCreateManyInput = {
    id?: number
    historiaClinicaId?: number | null
    episodioClinicoId?: number | null
    usuarioId: number
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
  }

  export type AuditoriaHistoriaUpdateManyMutationInput = {
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriaHistoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: NullableIntFieldUpdateOperationsInput | number | null
    episodioClinicoId?: NullableIntFieldUpdateOperationsInput | number | null
    usuarioId?: IntFieldUpdateOperationsInput | number
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumTipoUsuarioFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoUsuario | EnumTipoUsuarioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoUsuario[] | ListEnumTipoUsuarioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoUsuario[] | ListEnumTipoUsuarioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoUsuarioFilter<$PrismaModel> | $Enums.TipoUsuario
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MedicoNullableScalarRelationFilter = {
    is?: MedicoWhereInput | null
    isNot?: MedicoWhereInput | null
  }

  export type EnfermeraNullableScalarRelationFilter = {
    is?: EnfermeraWhereInput | null
    isNot?: EnfermeraWhereInput | null
  }

  export type AuditoriaHistoriaListRelationFilter = {
    every?: AuditoriaHistoriaWhereInput
    some?: AuditoriaHistoriaWhereInput
    none?: AuditoriaHistoriaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AuditoriaHistoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nombreUsuario?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    email?: SortOrder
    ultimoAcceso?: SortOrder
    activo?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombreUsuario?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    email?: SortOrder
    ultimoAcceso?: SortOrder
    activo?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nombreUsuario?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    email?: SortOrder
    ultimoAcceso?: SortOrder
    activo?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumTipoUsuarioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoUsuario | EnumTipoUsuarioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoUsuario[] | ListEnumTipoUsuarioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoUsuario[] | ListEnumTipoUsuarioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoUsuarioWithAggregatesFilter<$PrismaModel> | $Enums.TipoUsuario
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoUsuarioFilter<$PrismaModel>
    _max?: NestedEnumTipoUsuarioFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type MedicoEspecialidadListRelationFilter = {
    every?: MedicoEspecialidadWhereInput
    some?: MedicoEspecialidadWhereInput
    none?: MedicoEspecialidadWhereInput
  }

  export type EpisodioClincoListRelationFilter = {
    every?: EpisodioClincoWhereInput
    some?: EpisodioClincoWhereInput
    none?: EpisodioClincoWhereInput
  }

  export type MedicoEspecialidadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EpisodioClincoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicoTipoDocumentoNumDocumentoCompoundUniqueInput = {
    tipoDocumento: string
    numDocumento: string
  }

  export type MedicoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
  }

  export type MedicoAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type MedicoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
  }

  export type MedicoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
  }

  export type MedicoSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnfermeraTipoDocumentoNumDocumentoCompoundUniqueInput = {
    tipoDocumento: string
    numDocumento: string
  }

  export type EnfermeraCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
  }

  export type EnfermeraAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type EnfermeraMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
  }

  export type EnfermeraMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    numLicencia?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
  }

  export type EnfermeraSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type ProgramaAcademicoListRelationFilter = {
    every?: ProgramaAcademicoWhereInput
    some?: ProgramaAcademicoWhereInput
    none?: ProgramaAcademicoWhereInput
  }

  export type ProgramaAcademicoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacultadCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
    activo?: SortOrder
  }

  export type FacultadAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacultadMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
    activo?: SortOrder
  }

  export type FacultadMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
    activo?: SortOrder
  }

  export type FacultadSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacultadScalarRelationFilter = {
    is?: FacultadWhereInput
    isNot?: FacultadWhereInput
  }

  export type PacienteListRelationFilter = {
    every?: PacienteWhereInput
    some?: PacienteWhereInput
    none?: PacienteWhereInput
  }

  export type PacienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProgramaAcademicoCountOrderByAggregateInput = {
    id?: SortOrder
    facultadId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
    nivel?: SortOrder
    activo?: SortOrder
  }

  export type ProgramaAcademicoAvgOrderByAggregateInput = {
    id?: SortOrder
    facultadId?: SortOrder
  }

  export type ProgramaAcademicoMaxOrderByAggregateInput = {
    id?: SortOrder
    facultadId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
    nivel?: SortOrder
    activo?: SortOrder
  }

  export type ProgramaAcademicoMinOrderByAggregateInput = {
    id?: SortOrder
    facultadId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
    nivel?: SortOrder
    activo?: SortOrder
  }

  export type ProgramaAcademicoSumOrderByAggregateInput = {
    id?: SortOrder
    facultadId?: SortOrder
  }

  export type ConsultorioListRelationFilter = {
    every?: ConsultorioWhereInput
    some?: ConsultorioWhereInput
    none?: ConsultorioWhereInput
  }

  export type ConsultorioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SedeCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    horarioAtencion?: SortOrder
    activo?: SortOrder
  }

  export type SedeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SedeMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    horarioAtencion?: SortOrder
    activo?: SortOrder
  }

  export type SedeMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    horarioAtencion?: SortOrder
    activo?: SortOrder
  }

  export type SedeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SedeScalarRelationFilter = {
    is?: SedeWhereInput
    isNot?: SedeWhereInput
  }

  export type ConsultorioSedeIdCodigoCompoundUniqueInput = {
    sedeId: number
    codigo: string
  }

  export type ConsultorioCountOrderByAggregateInput = {
    id?: SortOrder
    sedeId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    tipo?: SortOrder
    activo?: SortOrder
  }

  export type ConsultorioAvgOrderByAggregateInput = {
    id?: SortOrder
    sedeId?: SortOrder
  }

  export type ConsultorioMaxOrderByAggregateInput = {
    id?: SortOrder
    sedeId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    tipo?: SortOrder
    activo?: SortOrder
  }

  export type ConsultorioMinOrderByAggregateInput = {
    id?: SortOrder
    sedeId?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    tipo?: SortOrder
    activo?: SortOrder
  }

  export type ConsultorioSumOrderByAggregateInput = {
    id?: SortOrder
    sedeId?: SortOrder
  }

  export type EspecialidadCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    codigo?: SortOrder
    activo?: SortOrder
  }

  export type EspecialidadAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EspecialidadMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    codigo?: SortOrder
    activo?: SortOrder
  }

  export type EspecialidadMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    codigo?: SortOrder
    activo?: SortOrder
  }

  export type EspecialidadSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MedicoScalarRelationFilter = {
    is?: MedicoWhereInput
    isNot?: MedicoWhereInput
  }

  export type EspecialidadScalarRelationFilter = {
    is?: EspecialidadWhereInput
    isNot?: EspecialidadWhereInput
  }

  export type MedicoEspecialidadMedicoIdEspecialidadIdCompoundUniqueInput = {
    medicoId: number
    especialidadId: number
  }

  export type MedicoEspecialidadCountOrderByAggregateInput = {
    id?: SortOrder
    medicoId?: SortOrder
    especialidadId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    activo?: SortOrder
  }

  export type MedicoEspecialidadAvgOrderByAggregateInput = {
    id?: SortOrder
    medicoId?: SortOrder
    especialidadId?: SortOrder
  }

  export type MedicoEspecialidadMaxOrderByAggregateInput = {
    id?: SortOrder
    medicoId?: SortOrder
    especialidadId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    activo?: SortOrder
  }

  export type MedicoEspecialidadMinOrderByAggregateInput = {
    id?: SortOrder
    medicoId?: SortOrder
    especialidadId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    activo?: SortOrder
  }

  export type MedicoEspecialidadSumOrderByAggregateInput = {
    id?: SortOrder
    medicoId?: SortOrder
    especialidadId?: SortOrder
  }

  export type ProgramaAcademicoScalarRelationFilter = {
    is?: ProgramaAcademicoWhereInput
    isNot?: ProgramaAcademicoWhereInput
  }

  export type ContactoEmergenciaListRelationFilter = {
    every?: ContactoEmergenciaWhereInput
    some?: ContactoEmergenciaWhereInput
    none?: ContactoEmergenciaWhereInput
  }

  export type HistoriaClinicaListRelationFilter = {
    every?: HistoriaClinicaWhereInput
    some?: HistoriaClinicaWhereInput
    none?: HistoriaClinicaWhereInput
  }

  export type ContactoEmergenciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoriaClinicaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PacienteTipoDocumentoNumDocumentoCompoundUniqueInput = {
    tipoDocumento: string
    numDocumento: string
  }

  export type PacienteCountOrderByAggregateInput = {
    id?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    fechaNacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    grupoSanguineo?: SortOrder
    alergias?: SortOrder
    antecedentesFamiliares?: SortOrder
    estadoCivil?: SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
    programaAcademicoId?: SortOrder
  }

  export type PacienteAvgOrderByAggregateInput = {
    id?: SortOrder
    programaAcademicoId?: SortOrder
  }

  export type PacienteMaxOrderByAggregateInput = {
    id?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    fechaNacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    grupoSanguineo?: SortOrder
    alergias?: SortOrder
    antecedentesFamiliares?: SortOrder
    estadoCivil?: SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
    programaAcademicoId?: SortOrder
  }

  export type PacienteMinOrderByAggregateInput = {
    id?: SortOrder
    tipoDocumento?: SortOrder
    numDocumento?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    fechaNacimiento?: SortOrder
    genero?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    grupoSanguineo?: SortOrder
    alergias?: SortOrder
    antecedentesFamiliares?: SortOrder
    estadoCivil?: SortOrder
    fechaRegistro?: SortOrder
    activo?: SortOrder
    programaAcademicoId?: SortOrder
  }

  export type PacienteSumOrderByAggregateInput = {
    id?: SortOrder
    programaAcademicoId?: SortOrder
  }

  export type PacienteScalarRelationFilter = {
    is?: PacienteWhereInput
    isNot?: PacienteWhereInput
  }

  export type ContactoEmergenciaCountOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    parentesco?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario?: SortOrder
    direccion?: SortOrder
    activo?: SortOrder
  }

  export type ContactoEmergenciaAvgOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
  }

  export type ContactoEmergenciaMaxOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    parentesco?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario?: SortOrder
    direccion?: SortOrder
    activo?: SortOrder
  }

  export type ContactoEmergenciaMinOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    nombres?: SortOrder
    apellidos?: SortOrder
    parentesco?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario?: SortOrder
    direccion?: SortOrder
    activo?: SortOrder
  }

  export type ContactoEmergenciaSumOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
  }

  export type HistoriaClinicaCountOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fechaApertura?: SortOrder
    estado?: SortOrder
    observacionesGenerales?: SortOrder
    ultimaActualizacion?: SortOrder
  }

  export type HistoriaClinicaAvgOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
  }

  export type HistoriaClinicaMaxOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fechaApertura?: SortOrder
    estado?: SortOrder
    observacionesGenerales?: SortOrder
    ultimaActualizacion?: SortOrder
  }

  export type HistoriaClinicaMinOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    fechaApertura?: SortOrder
    estado?: SortOrder
    observacionesGenerales?: SortOrder
    ultimaActualizacion?: SortOrder
  }

  export type HistoriaClinicaSumOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type HistoriaClinicaScalarRelationFilter = {
    is?: HistoriaClinicaWhereInput
    isNot?: HistoriaClinicaWhereInput
  }

  export type EnfermeraScalarRelationFilter = {
    is?: EnfermeraWhereInput
    isNot?: EnfermeraWhereInput
  }

  export type ConsultorioScalarRelationFilter = {
    is?: ConsultorioWhereInput
    isNot?: ConsultorioWhereInput
  }

  export type SignosVitalesListRelationFilter = {
    every?: SignosVitalesWhereInput
    some?: SignosVitalesWhereInput
    none?: SignosVitalesWhereInput
  }

  export type DiagnosticoListRelationFilter = {
    every?: DiagnosticoWhereInput
    some?: DiagnosticoWhereInput
    none?: DiagnosticoWhereInput
  }

  export type PrescripcionListRelationFilter = {
    every?: PrescripcionWhereInput
    some?: PrescripcionWhereInput
    none?: PrescripcionWhereInput
  }

  export type DocumentoClinicoListRelationFilter = {
    every?: DocumentoClinicoWhereInput
    some?: DocumentoClinicoWhereInput
    none?: DocumentoClinicoWhereInput
  }

  export type ConsentimientoInformadoListRelationFilter = {
    every?: ConsentimientoInformadoWhereInput
    some?: ConsentimientoInformadoWhereInput
    none?: ConsentimientoInformadoWhereInput
  }

  export type OdontologiaDetalleNullableScalarRelationFilter = {
    is?: OdontologiaDetalleWhereInput | null
    isNot?: OdontologiaDetalleWhereInput | null
  }

  export type OftalmologiaDetalleNullableScalarRelationFilter = {
    is?: OftalmologiaDetalleWhereInput | null
    isNot?: OftalmologiaDetalleWhereInput | null
  }

  export type PsicologiaDetalleNullableScalarRelationFilter = {
    is?: PsicologiaDetalleWhereInput | null
    isNot?: PsicologiaDetalleWhereInput | null
  }

  export type TrabajoSocialDetalleNullableScalarRelationFilter = {
    is?: TrabajoSocialDetalleWhereInput | null
    isNot?: TrabajoSocialDetalleWhereInput | null
  }

  export type SignosVitalesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiagnosticoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrescripcionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentoClinicoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsentimientoInformadoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EpisodioClincoCountOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    especialidadId?: SortOrder
    medicoId?: SortOrder
    enfermeraId?: SortOrder
    consultorioId?: SortOrder
    fechaEpisodio?: SortOrder
    motivoConsulta?: SortOrder
    sintomas?: SortOrder
    tratamiento?: SortOrder
    observaciones?: SortOrder
  }

  export type EpisodioClincoAvgOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    especialidadId?: SortOrder
    medicoId?: SortOrder
    enfermeraId?: SortOrder
    consultorioId?: SortOrder
  }

  export type EpisodioClincoMaxOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    especialidadId?: SortOrder
    medicoId?: SortOrder
    enfermeraId?: SortOrder
    consultorioId?: SortOrder
    fechaEpisodio?: SortOrder
    motivoConsulta?: SortOrder
    sintomas?: SortOrder
    tratamiento?: SortOrder
    observaciones?: SortOrder
  }

  export type EpisodioClincoMinOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    especialidadId?: SortOrder
    medicoId?: SortOrder
    enfermeraId?: SortOrder
    consultorioId?: SortOrder
    fechaEpisodio?: SortOrder
    motivoConsulta?: SortOrder
    sintomas?: SortOrder
    tratamiento?: SortOrder
    observaciones?: SortOrder
  }

  export type EpisodioClincoSumOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    especialidadId?: SortOrder
    medicoId?: SortOrder
    enfermeraId?: SortOrder
    consultorioId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EpisodioClincoScalarRelationFilter = {
    is?: EpisodioClincoWhereInput
    isNot?: EpisodioClincoWhereInput
  }

  export type SignosVitalesCountOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    presionArterial?: SortOrder
    temperatura?: SortOrder
    frecuenciaCardiaca?: SortOrder
    frecuenciaRespiratoria?: SortOrder
    saturacionOxigeno?: SortOrder
    peso?: SortOrder
    altura?: SortOrder
    imc?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type SignosVitalesAvgOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    temperatura?: SortOrder
    frecuenciaCardiaca?: SortOrder
    frecuenciaRespiratoria?: SortOrder
    saturacionOxigeno?: SortOrder
    peso?: SortOrder
    altura?: SortOrder
    imc?: SortOrder
  }

  export type SignosVitalesMaxOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    presionArterial?: SortOrder
    temperatura?: SortOrder
    frecuenciaCardiaca?: SortOrder
    frecuenciaRespiratoria?: SortOrder
    saturacionOxigeno?: SortOrder
    peso?: SortOrder
    altura?: SortOrder
    imc?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type SignosVitalesMinOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    presionArterial?: SortOrder
    temperatura?: SortOrder
    frecuenciaCardiaca?: SortOrder
    frecuenciaRespiratoria?: SortOrder
    saturacionOxigeno?: SortOrder
    peso?: SortOrder
    altura?: SortOrder
    imc?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type SignosVitalesSumOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    temperatura?: SortOrder
    frecuenciaCardiaca?: SortOrder
    frecuenciaRespiratoria?: SortOrder
    saturacionOxigeno?: SortOrder
    peso?: SortOrder
    altura?: SortOrder
    imc?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type CodigoCIE10CountOrderByAggregateInput = {
    codigo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    subcategoria?: SortOrder
    activo?: SortOrder
  }

  export type CodigoCIE10MaxOrderByAggregateInput = {
    codigo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    subcategoria?: SortOrder
    activo?: SortOrder
  }

  export type CodigoCIE10MinOrderByAggregateInput = {
    codigo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    subcategoria?: SortOrder
    activo?: SortOrder
  }

  export type EnumTipoDiagnosticoFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoDiagnostico | EnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoDiagnostico[] | ListEnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoDiagnostico[] | ListEnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoDiagnosticoFilter<$PrismaModel> | $Enums.TipoDiagnostico
  }

  export type CodigoCIE10ScalarRelationFilter = {
    is?: CodigoCIE10WhereInput
    isNot?: CodigoCIE10WhereInput
  }

  export type DiagnosticoCountOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    codigoCIE10Id?: SortOrder
    tipo?: SortOrder
    descripcionAdicional?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type DiagnosticoAvgOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type DiagnosticoMaxOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    codigoCIE10Id?: SortOrder
    tipo?: SortOrder
    descripcionAdicional?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type DiagnosticoMinOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    codigoCIE10Id?: SortOrder
    tipo?: SortOrder
    descripcionAdicional?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type DiagnosticoSumOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type EnumTipoDiagnosticoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoDiagnostico | EnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoDiagnostico[] | ListEnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoDiagnostico[] | ListEnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoDiagnosticoWithAggregatesFilter<$PrismaModel> | $Enums.TipoDiagnostico
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoDiagnosticoFilter<$PrismaModel>
    _max?: NestedEnumTipoDiagnosticoFilter<$PrismaModel>
  }

  export type PrescripcionCountOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    nombreMedicamento?: SortOrder
    dosis?: SortOrder
    viaAdministracion?: SortOrder
    frecuencia?: SortOrder
    duracion?: SortOrder
    indicaciones?: SortOrder
    fechaPrescripcion?: SortOrder
  }

  export type PrescripcionAvgOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type PrescripcionMaxOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    nombreMedicamento?: SortOrder
    dosis?: SortOrder
    viaAdministracion?: SortOrder
    frecuencia?: SortOrder
    duracion?: SortOrder
    indicaciones?: SortOrder
    fechaPrescripcion?: SortOrder
  }

  export type PrescripcionMinOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    nombreMedicamento?: SortOrder
    dosis?: SortOrder
    viaAdministracion?: SortOrder
    frecuencia?: SortOrder
    duracion?: SortOrder
    indicaciones?: SortOrder
    fechaPrescripcion?: SortOrder
  }

  export type PrescripcionSumOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type DocumentoClinicoCountOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoDocumento?: SortOrder
    titulo?: SortOrder
    rutaArchivo?: SortOrder
    contenido?: SortOrder
    formato?: SortOrder
    fechaDocumento?: SortOrder
    fechaRegistro?: SortOrder
    observaciones?: SortOrder
  }

  export type DocumentoClinicoAvgOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type DocumentoClinicoMaxOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoDocumento?: SortOrder
    titulo?: SortOrder
    rutaArchivo?: SortOrder
    contenido?: SortOrder
    formato?: SortOrder
    fechaDocumento?: SortOrder
    fechaRegistro?: SortOrder
    observaciones?: SortOrder
  }

  export type DocumentoClinicoMinOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoDocumento?: SortOrder
    titulo?: SortOrder
    rutaArchivo?: SortOrder
    contenido?: SortOrder
    formato?: SortOrder
    fechaDocumento?: SortOrder
    fechaRegistro?: SortOrder
    observaciones?: SortOrder
  }

  export type DocumentoClinicoSumOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type ConsentimientoInformadoCountOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoProcedimiento?: SortOrder
    contenido?: SortOrder
    fechaFirma?: SortOrder
    firmadoPaciente?: SortOrder
    firmadoRepresentante?: SortOrder
    nombreRepresentante?: SortOrder
    documentoRepresentante?: SortOrder
    documentoDigitalizado?: SortOrder
  }

  export type ConsentimientoInformadoAvgOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type ConsentimientoInformadoMaxOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoProcedimiento?: SortOrder
    contenido?: SortOrder
    fechaFirma?: SortOrder
    firmadoPaciente?: SortOrder
    firmadoRepresentante?: SortOrder
    nombreRepresentante?: SortOrder
    documentoRepresentante?: SortOrder
    documentoDigitalizado?: SortOrder
  }

  export type ConsentimientoInformadoMinOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    tipoProcedimiento?: SortOrder
    contenido?: SortOrder
    fechaFirma?: SortOrder
    firmadoPaciente?: SortOrder
    firmadoRepresentante?: SortOrder
    nombreRepresentante?: SortOrder
    documentoRepresentante?: SortOrder
    documentoDigitalizado?: SortOrder
  }

  export type ConsentimientoInformadoSumOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type OdontologiaDetalleCountOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    odontograma?: SortOrder
    indiceCPOD?: SortOrder
    observacionesDentales?: SortOrder
    procedimientosRealizados?: SortOrder
  }

  export type OdontologiaDetalleAvgOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    indiceCPOD?: SortOrder
  }

  export type OdontologiaDetalleMaxOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    odontograma?: SortOrder
    indiceCPOD?: SortOrder
    observacionesDentales?: SortOrder
    procedimientosRealizados?: SortOrder
  }

  export type OdontologiaDetalleMinOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    odontograma?: SortOrder
    indiceCPOD?: SortOrder
    observacionesDentales?: SortOrder
    procedimientosRealizados?: SortOrder
  }

  export type OdontologiaDetalleSumOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    indiceCPOD?: SortOrder
  }

  export type OftalmologiaDetalleCountOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    agudezaVisualOD?: SortOrder
    agudezaVisualOI?: SortOrder
    presionIntraocularOD?: SortOrder
    presionIntraocularOI?: SortOrder
    fondoOjo?: SortOrder
    formulaOptica?: SortOrder
  }

  export type OftalmologiaDetalleAvgOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    presionIntraocularOD?: SortOrder
    presionIntraocularOI?: SortOrder
  }

  export type OftalmologiaDetalleMaxOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    agudezaVisualOD?: SortOrder
    agudezaVisualOI?: SortOrder
    presionIntraocularOD?: SortOrder
    presionIntraocularOI?: SortOrder
    fondoOjo?: SortOrder
    formulaOptica?: SortOrder
  }

  export type OftalmologiaDetalleMinOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    agudezaVisualOD?: SortOrder
    agudezaVisualOI?: SortOrder
    presionIntraocularOD?: SortOrder
    presionIntraocularOI?: SortOrder
    fondoOjo?: SortOrder
    formulaOptica?: SortOrder
  }

  export type OftalmologiaDetalleSumOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    presionIntraocularOD?: SortOrder
    presionIntraocularOI?: SortOrder
  }

  export type PsicologiaDetalleCountOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionMental?: SortOrder
    testAplicados?: SortOrder
    impresionDiagnostica?: SortOrder
    planIntervencion?: SortOrder
    evolucion?: SortOrder
  }

  export type PsicologiaDetalleAvgOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type PsicologiaDetalleMaxOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionMental?: SortOrder
    testAplicados?: SortOrder
    impresionDiagnostica?: SortOrder
    planIntervencion?: SortOrder
    evolucion?: SortOrder
  }

  export type PsicologiaDetalleMinOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionMental?: SortOrder
    testAplicados?: SortOrder
    impresionDiagnostica?: SortOrder
    planIntervencion?: SortOrder
    evolucion?: SortOrder
  }

  export type PsicologiaDetalleSumOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type TrabajoSocialDetalleCountOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionSocioeconomica?: SortOrder
    dinamicaFamiliar?: SortOrder
    redesApoyo?: SortOrder
    intervencionRealizada?: SortOrder
    seguimientoCaso?: SortOrder
  }

  export type TrabajoSocialDetalleAvgOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type TrabajoSocialDetalleMaxOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionSocioeconomica?: SortOrder
    dinamicaFamiliar?: SortOrder
    redesApoyo?: SortOrder
    intervencionRealizada?: SortOrder
    seguimientoCaso?: SortOrder
  }

  export type TrabajoSocialDetalleMinOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
    evaluacionSocioeconomica?: SortOrder
    dinamicaFamiliar?: SortOrder
    redesApoyo?: SortOrder
    intervencionRealizada?: SortOrder
    seguimientoCaso?: SortOrder
  }

  export type TrabajoSocialDetalleSumOrderByAggregateInput = {
    id?: SortOrder
    episodioClinicoId?: SortOrder
  }

  export type HistoriaClinicaNullableScalarRelationFilter = {
    is?: HistoriaClinicaWhereInput | null
    isNot?: HistoriaClinicaWhereInput | null
  }

  export type EpisodioClincoNullableScalarRelationFilter = {
    is?: EpisodioClincoWhereInput | null
    isNot?: EpisodioClincoWhereInput | null
  }

  export type AuditoriaHistoriaCountOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    episodioClinicoId?: SortOrder
    usuarioId?: SortOrder
    fechaAccion?: SortOrder
    tipoAccion?: SortOrder
    descripcion?: SortOrder
    tablaAfectada?: SortOrder
    idRegistro?: SortOrder
    datosAntiguos?: SortOrder
    datosNuevos?: SortOrder
    direccionIp?: SortOrder
  }

  export type AuditoriaHistoriaAvgOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    episodioClinicoId?: SortOrder
    usuarioId?: SortOrder
    idRegistro?: SortOrder
  }

  export type AuditoriaHistoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    episodioClinicoId?: SortOrder
    usuarioId?: SortOrder
    fechaAccion?: SortOrder
    tipoAccion?: SortOrder
    descripcion?: SortOrder
    tablaAfectada?: SortOrder
    idRegistro?: SortOrder
    datosAntiguos?: SortOrder
    datosNuevos?: SortOrder
    direccionIp?: SortOrder
  }

  export type AuditoriaHistoriaMinOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    episodioClinicoId?: SortOrder
    usuarioId?: SortOrder
    fechaAccion?: SortOrder
    tipoAccion?: SortOrder
    descripcion?: SortOrder
    tablaAfectada?: SortOrder
    idRegistro?: SortOrder
    datosAntiguos?: SortOrder
    datosNuevos?: SortOrder
    direccionIp?: SortOrder
  }

  export type AuditoriaHistoriaSumOrderByAggregateInput = {
    id?: SortOrder
    historiaClinicaId?: SortOrder
    episodioClinicoId?: SortOrder
    usuarioId?: SortOrder
    idRegistro?: SortOrder
  }

  export type MedicoCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<MedicoCreateWithoutUsuarioInput, MedicoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: MedicoCreateOrConnectWithoutUsuarioInput
    connect?: MedicoWhereUniqueInput
  }

  export type EnfermeraCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<EnfermeraCreateWithoutUsuarioInput, EnfermeraUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: EnfermeraCreateOrConnectWithoutUsuarioInput
    connect?: EnfermeraWhereUniqueInput
  }

  export type AuditoriaHistoriaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutUsuarioInput, AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput> | AuditoriaHistoriaCreateWithoutUsuarioInput[] | AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutUsuarioInput | AuditoriaHistoriaCreateOrConnectWithoutUsuarioInput[]
    createMany?: AuditoriaHistoriaCreateManyUsuarioInputEnvelope
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
  }

  export type MedicoUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<MedicoCreateWithoutUsuarioInput, MedicoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: MedicoCreateOrConnectWithoutUsuarioInput
    connect?: MedicoWhereUniqueInput
  }

  export type EnfermeraUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<EnfermeraCreateWithoutUsuarioInput, EnfermeraUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: EnfermeraCreateOrConnectWithoutUsuarioInput
    connect?: EnfermeraWhereUniqueInput
  }

  export type AuditoriaHistoriaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutUsuarioInput, AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput> | AuditoriaHistoriaCreateWithoutUsuarioInput[] | AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutUsuarioInput | AuditoriaHistoriaCreateOrConnectWithoutUsuarioInput[]
    createMany?: AuditoriaHistoriaCreateManyUsuarioInputEnvelope
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumTipoUsuarioFieldUpdateOperationsInput = {
    set?: $Enums.TipoUsuario
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MedicoUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<MedicoCreateWithoutUsuarioInput, MedicoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: MedicoCreateOrConnectWithoutUsuarioInput
    upsert?: MedicoUpsertWithoutUsuarioInput
    disconnect?: MedicoWhereInput | boolean
    delete?: MedicoWhereInput | boolean
    connect?: MedicoWhereUniqueInput
    update?: XOR<XOR<MedicoUpdateToOneWithWhereWithoutUsuarioInput, MedicoUpdateWithoutUsuarioInput>, MedicoUncheckedUpdateWithoutUsuarioInput>
  }

  export type EnfermeraUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<EnfermeraCreateWithoutUsuarioInput, EnfermeraUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: EnfermeraCreateOrConnectWithoutUsuarioInput
    upsert?: EnfermeraUpsertWithoutUsuarioInput
    disconnect?: EnfermeraWhereInput | boolean
    delete?: EnfermeraWhereInput | boolean
    connect?: EnfermeraWhereUniqueInput
    update?: XOR<XOR<EnfermeraUpdateToOneWithWhereWithoutUsuarioInput, EnfermeraUpdateWithoutUsuarioInput>, EnfermeraUncheckedUpdateWithoutUsuarioInput>
  }

  export type AuditoriaHistoriaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutUsuarioInput, AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput> | AuditoriaHistoriaCreateWithoutUsuarioInput[] | AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutUsuarioInput | AuditoriaHistoriaCreateOrConnectWithoutUsuarioInput[]
    upsert?: AuditoriaHistoriaUpsertWithWhereUniqueWithoutUsuarioInput | AuditoriaHistoriaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AuditoriaHistoriaCreateManyUsuarioInputEnvelope
    set?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    disconnect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    delete?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    update?: AuditoriaHistoriaUpdateWithWhereUniqueWithoutUsuarioInput | AuditoriaHistoriaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AuditoriaHistoriaUpdateManyWithWhereWithoutUsuarioInput | AuditoriaHistoriaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AuditoriaHistoriaScalarWhereInput | AuditoriaHistoriaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MedicoUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<MedicoCreateWithoutUsuarioInput, MedicoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: MedicoCreateOrConnectWithoutUsuarioInput
    upsert?: MedicoUpsertWithoutUsuarioInput
    disconnect?: MedicoWhereInput | boolean
    delete?: MedicoWhereInput | boolean
    connect?: MedicoWhereUniqueInput
    update?: XOR<XOR<MedicoUpdateToOneWithWhereWithoutUsuarioInput, MedicoUpdateWithoutUsuarioInput>, MedicoUncheckedUpdateWithoutUsuarioInput>
  }

  export type EnfermeraUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<EnfermeraCreateWithoutUsuarioInput, EnfermeraUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: EnfermeraCreateOrConnectWithoutUsuarioInput
    upsert?: EnfermeraUpsertWithoutUsuarioInput
    disconnect?: EnfermeraWhereInput | boolean
    delete?: EnfermeraWhereInput | boolean
    connect?: EnfermeraWhereUniqueInput
    update?: XOR<XOR<EnfermeraUpdateToOneWithWhereWithoutUsuarioInput, EnfermeraUpdateWithoutUsuarioInput>, EnfermeraUncheckedUpdateWithoutUsuarioInput>
  }

  export type AuditoriaHistoriaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutUsuarioInput, AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput> | AuditoriaHistoriaCreateWithoutUsuarioInput[] | AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutUsuarioInput | AuditoriaHistoriaCreateOrConnectWithoutUsuarioInput[]
    upsert?: AuditoriaHistoriaUpsertWithWhereUniqueWithoutUsuarioInput | AuditoriaHistoriaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AuditoriaHistoriaCreateManyUsuarioInputEnvelope
    set?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    disconnect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    delete?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    update?: AuditoriaHistoriaUpdateWithWhereUniqueWithoutUsuarioInput | AuditoriaHistoriaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AuditoriaHistoriaUpdateManyWithWhereWithoutUsuarioInput | AuditoriaHistoriaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AuditoriaHistoriaScalarWhereInput | AuditoriaHistoriaScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutMedicoInput = {
    create?: XOR<UsuarioCreateWithoutMedicoInput, UsuarioUncheckedCreateWithoutMedicoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMedicoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type MedicoEspecialidadCreateNestedManyWithoutMedicoInput = {
    create?: XOR<MedicoEspecialidadCreateWithoutMedicoInput, MedicoEspecialidadUncheckedCreateWithoutMedicoInput> | MedicoEspecialidadCreateWithoutMedicoInput[] | MedicoEspecialidadUncheckedCreateWithoutMedicoInput[]
    connectOrCreate?: MedicoEspecialidadCreateOrConnectWithoutMedicoInput | MedicoEspecialidadCreateOrConnectWithoutMedicoInput[]
    createMany?: MedicoEspecialidadCreateManyMedicoInputEnvelope
    connect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
  }

  export type EpisodioClincoCreateNestedManyWithoutMedicoInput = {
    create?: XOR<EpisodioClincoCreateWithoutMedicoInput, EpisodioClincoUncheckedCreateWithoutMedicoInput> | EpisodioClincoCreateWithoutMedicoInput[] | EpisodioClincoUncheckedCreateWithoutMedicoInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutMedicoInput | EpisodioClincoCreateOrConnectWithoutMedicoInput[]
    createMany?: EpisodioClincoCreateManyMedicoInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type MedicoEspecialidadUncheckedCreateNestedManyWithoutMedicoInput = {
    create?: XOR<MedicoEspecialidadCreateWithoutMedicoInput, MedicoEspecialidadUncheckedCreateWithoutMedicoInput> | MedicoEspecialidadCreateWithoutMedicoInput[] | MedicoEspecialidadUncheckedCreateWithoutMedicoInput[]
    connectOrCreate?: MedicoEspecialidadCreateOrConnectWithoutMedicoInput | MedicoEspecialidadCreateOrConnectWithoutMedicoInput[]
    createMany?: MedicoEspecialidadCreateManyMedicoInputEnvelope
    connect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
  }

  export type EpisodioClincoUncheckedCreateNestedManyWithoutMedicoInput = {
    create?: XOR<EpisodioClincoCreateWithoutMedicoInput, EpisodioClincoUncheckedCreateWithoutMedicoInput> | EpisodioClincoCreateWithoutMedicoInput[] | EpisodioClincoUncheckedCreateWithoutMedicoInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutMedicoInput | EpisodioClincoCreateOrConnectWithoutMedicoInput[]
    createMany?: EpisodioClincoCreateManyMedicoInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsuarioUpdateOneRequiredWithoutMedicoNestedInput = {
    create?: XOR<UsuarioCreateWithoutMedicoInput, UsuarioUncheckedCreateWithoutMedicoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMedicoInput
    upsert?: UsuarioUpsertWithoutMedicoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutMedicoInput, UsuarioUpdateWithoutMedicoInput>, UsuarioUncheckedUpdateWithoutMedicoInput>
  }

  export type MedicoEspecialidadUpdateManyWithoutMedicoNestedInput = {
    create?: XOR<MedicoEspecialidadCreateWithoutMedicoInput, MedicoEspecialidadUncheckedCreateWithoutMedicoInput> | MedicoEspecialidadCreateWithoutMedicoInput[] | MedicoEspecialidadUncheckedCreateWithoutMedicoInput[]
    connectOrCreate?: MedicoEspecialidadCreateOrConnectWithoutMedicoInput | MedicoEspecialidadCreateOrConnectWithoutMedicoInput[]
    upsert?: MedicoEspecialidadUpsertWithWhereUniqueWithoutMedicoInput | MedicoEspecialidadUpsertWithWhereUniqueWithoutMedicoInput[]
    createMany?: MedicoEspecialidadCreateManyMedicoInputEnvelope
    set?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    disconnect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    delete?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    connect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    update?: MedicoEspecialidadUpdateWithWhereUniqueWithoutMedicoInput | MedicoEspecialidadUpdateWithWhereUniqueWithoutMedicoInput[]
    updateMany?: MedicoEspecialidadUpdateManyWithWhereWithoutMedicoInput | MedicoEspecialidadUpdateManyWithWhereWithoutMedicoInput[]
    deleteMany?: MedicoEspecialidadScalarWhereInput | MedicoEspecialidadScalarWhereInput[]
  }

  export type EpisodioClincoUpdateManyWithoutMedicoNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutMedicoInput, EpisodioClincoUncheckedCreateWithoutMedicoInput> | EpisodioClincoCreateWithoutMedicoInput[] | EpisodioClincoUncheckedCreateWithoutMedicoInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutMedicoInput | EpisodioClincoCreateOrConnectWithoutMedicoInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutMedicoInput | EpisodioClincoUpsertWithWhereUniqueWithoutMedicoInput[]
    createMany?: EpisodioClincoCreateManyMedicoInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutMedicoInput | EpisodioClincoUpdateWithWhereUniqueWithoutMedicoInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutMedicoInput | EpisodioClincoUpdateManyWithWhereWithoutMedicoInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type MedicoEspecialidadUncheckedUpdateManyWithoutMedicoNestedInput = {
    create?: XOR<MedicoEspecialidadCreateWithoutMedicoInput, MedicoEspecialidadUncheckedCreateWithoutMedicoInput> | MedicoEspecialidadCreateWithoutMedicoInput[] | MedicoEspecialidadUncheckedCreateWithoutMedicoInput[]
    connectOrCreate?: MedicoEspecialidadCreateOrConnectWithoutMedicoInput | MedicoEspecialidadCreateOrConnectWithoutMedicoInput[]
    upsert?: MedicoEspecialidadUpsertWithWhereUniqueWithoutMedicoInput | MedicoEspecialidadUpsertWithWhereUniqueWithoutMedicoInput[]
    createMany?: MedicoEspecialidadCreateManyMedicoInputEnvelope
    set?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    disconnect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    delete?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    connect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    update?: MedicoEspecialidadUpdateWithWhereUniqueWithoutMedicoInput | MedicoEspecialidadUpdateWithWhereUniqueWithoutMedicoInput[]
    updateMany?: MedicoEspecialidadUpdateManyWithWhereWithoutMedicoInput | MedicoEspecialidadUpdateManyWithWhereWithoutMedicoInput[]
    deleteMany?: MedicoEspecialidadScalarWhereInput | MedicoEspecialidadScalarWhereInput[]
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutMedicoNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutMedicoInput, EpisodioClincoUncheckedCreateWithoutMedicoInput> | EpisodioClincoCreateWithoutMedicoInput[] | EpisodioClincoUncheckedCreateWithoutMedicoInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutMedicoInput | EpisodioClincoCreateOrConnectWithoutMedicoInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutMedicoInput | EpisodioClincoUpsertWithWhereUniqueWithoutMedicoInput[]
    createMany?: EpisodioClincoCreateManyMedicoInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutMedicoInput | EpisodioClincoUpdateWithWhereUniqueWithoutMedicoInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutMedicoInput | EpisodioClincoUpdateManyWithWhereWithoutMedicoInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutEnfermeraInput = {
    create?: XOR<UsuarioCreateWithoutEnfermeraInput, UsuarioUncheckedCreateWithoutEnfermeraInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEnfermeraInput
    connect?: UsuarioWhereUniqueInput
  }

  export type EpisodioClincoCreateNestedManyWithoutEnfermeraInput = {
    create?: XOR<EpisodioClincoCreateWithoutEnfermeraInput, EpisodioClincoUncheckedCreateWithoutEnfermeraInput> | EpisodioClincoCreateWithoutEnfermeraInput[] | EpisodioClincoUncheckedCreateWithoutEnfermeraInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutEnfermeraInput | EpisodioClincoCreateOrConnectWithoutEnfermeraInput[]
    createMany?: EpisodioClincoCreateManyEnfermeraInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type EpisodioClincoUncheckedCreateNestedManyWithoutEnfermeraInput = {
    create?: XOR<EpisodioClincoCreateWithoutEnfermeraInput, EpisodioClincoUncheckedCreateWithoutEnfermeraInput> | EpisodioClincoCreateWithoutEnfermeraInput[] | EpisodioClincoUncheckedCreateWithoutEnfermeraInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutEnfermeraInput | EpisodioClincoCreateOrConnectWithoutEnfermeraInput[]
    createMany?: EpisodioClincoCreateManyEnfermeraInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutEnfermeraNestedInput = {
    create?: XOR<UsuarioCreateWithoutEnfermeraInput, UsuarioUncheckedCreateWithoutEnfermeraInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEnfermeraInput
    upsert?: UsuarioUpsertWithoutEnfermeraInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutEnfermeraInput, UsuarioUpdateWithoutEnfermeraInput>, UsuarioUncheckedUpdateWithoutEnfermeraInput>
  }

  export type EpisodioClincoUpdateManyWithoutEnfermeraNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutEnfermeraInput, EpisodioClincoUncheckedCreateWithoutEnfermeraInput> | EpisodioClincoCreateWithoutEnfermeraInput[] | EpisodioClincoUncheckedCreateWithoutEnfermeraInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutEnfermeraInput | EpisodioClincoCreateOrConnectWithoutEnfermeraInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutEnfermeraInput | EpisodioClincoUpsertWithWhereUniqueWithoutEnfermeraInput[]
    createMany?: EpisodioClincoCreateManyEnfermeraInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutEnfermeraInput | EpisodioClincoUpdateWithWhereUniqueWithoutEnfermeraInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutEnfermeraInput | EpisodioClincoUpdateManyWithWhereWithoutEnfermeraInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutEnfermeraNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutEnfermeraInput, EpisodioClincoUncheckedCreateWithoutEnfermeraInput> | EpisodioClincoCreateWithoutEnfermeraInput[] | EpisodioClincoUncheckedCreateWithoutEnfermeraInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutEnfermeraInput | EpisodioClincoCreateOrConnectWithoutEnfermeraInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutEnfermeraInput | EpisodioClincoUpsertWithWhereUniqueWithoutEnfermeraInput[]
    createMany?: EpisodioClincoCreateManyEnfermeraInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutEnfermeraInput | EpisodioClincoUpdateWithWhereUniqueWithoutEnfermeraInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutEnfermeraInput | EpisodioClincoUpdateManyWithWhereWithoutEnfermeraInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type ProgramaAcademicoCreateNestedManyWithoutFacultadInput = {
    create?: XOR<ProgramaAcademicoCreateWithoutFacultadInput, ProgramaAcademicoUncheckedCreateWithoutFacultadInput> | ProgramaAcademicoCreateWithoutFacultadInput[] | ProgramaAcademicoUncheckedCreateWithoutFacultadInput[]
    connectOrCreate?: ProgramaAcademicoCreateOrConnectWithoutFacultadInput | ProgramaAcademicoCreateOrConnectWithoutFacultadInput[]
    createMany?: ProgramaAcademicoCreateManyFacultadInputEnvelope
    connect?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
  }

  export type ProgramaAcademicoUncheckedCreateNestedManyWithoutFacultadInput = {
    create?: XOR<ProgramaAcademicoCreateWithoutFacultadInput, ProgramaAcademicoUncheckedCreateWithoutFacultadInput> | ProgramaAcademicoCreateWithoutFacultadInput[] | ProgramaAcademicoUncheckedCreateWithoutFacultadInput[]
    connectOrCreate?: ProgramaAcademicoCreateOrConnectWithoutFacultadInput | ProgramaAcademicoCreateOrConnectWithoutFacultadInput[]
    createMany?: ProgramaAcademicoCreateManyFacultadInputEnvelope
    connect?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
  }

  export type ProgramaAcademicoUpdateManyWithoutFacultadNestedInput = {
    create?: XOR<ProgramaAcademicoCreateWithoutFacultadInput, ProgramaAcademicoUncheckedCreateWithoutFacultadInput> | ProgramaAcademicoCreateWithoutFacultadInput[] | ProgramaAcademicoUncheckedCreateWithoutFacultadInput[]
    connectOrCreate?: ProgramaAcademicoCreateOrConnectWithoutFacultadInput | ProgramaAcademicoCreateOrConnectWithoutFacultadInput[]
    upsert?: ProgramaAcademicoUpsertWithWhereUniqueWithoutFacultadInput | ProgramaAcademicoUpsertWithWhereUniqueWithoutFacultadInput[]
    createMany?: ProgramaAcademicoCreateManyFacultadInputEnvelope
    set?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
    disconnect?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
    delete?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
    connect?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
    update?: ProgramaAcademicoUpdateWithWhereUniqueWithoutFacultadInput | ProgramaAcademicoUpdateWithWhereUniqueWithoutFacultadInput[]
    updateMany?: ProgramaAcademicoUpdateManyWithWhereWithoutFacultadInput | ProgramaAcademicoUpdateManyWithWhereWithoutFacultadInput[]
    deleteMany?: ProgramaAcademicoScalarWhereInput | ProgramaAcademicoScalarWhereInput[]
  }

  export type ProgramaAcademicoUncheckedUpdateManyWithoutFacultadNestedInput = {
    create?: XOR<ProgramaAcademicoCreateWithoutFacultadInput, ProgramaAcademicoUncheckedCreateWithoutFacultadInput> | ProgramaAcademicoCreateWithoutFacultadInput[] | ProgramaAcademicoUncheckedCreateWithoutFacultadInput[]
    connectOrCreate?: ProgramaAcademicoCreateOrConnectWithoutFacultadInput | ProgramaAcademicoCreateOrConnectWithoutFacultadInput[]
    upsert?: ProgramaAcademicoUpsertWithWhereUniqueWithoutFacultadInput | ProgramaAcademicoUpsertWithWhereUniqueWithoutFacultadInput[]
    createMany?: ProgramaAcademicoCreateManyFacultadInputEnvelope
    set?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
    disconnect?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
    delete?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
    connect?: ProgramaAcademicoWhereUniqueInput | ProgramaAcademicoWhereUniqueInput[]
    update?: ProgramaAcademicoUpdateWithWhereUniqueWithoutFacultadInput | ProgramaAcademicoUpdateWithWhereUniqueWithoutFacultadInput[]
    updateMany?: ProgramaAcademicoUpdateManyWithWhereWithoutFacultadInput | ProgramaAcademicoUpdateManyWithWhereWithoutFacultadInput[]
    deleteMany?: ProgramaAcademicoScalarWhereInput | ProgramaAcademicoScalarWhereInput[]
  }

  export type FacultadCreateNestedOneWithoutProgramasAcademicosInput = {
    create?: XOR<FacultadCreateWithoutProgramasAcademicosInput, FacultadUncheckedCreateWithoutProgramasAcademicosInput>
    connectOrCreate?: FacultadCreateOrConnectWithoutProgramasAcademicosInput
    connect?: FacultadWhereUniqueInput
  }

  export type PacienteCreateNestedManyWithoutProgramaAcademicoInput = {
    create?: XOR<PacienteCreateWithoutProgramaAcademicoInput, PacienteUncheckedCreateWithoutProgramaAcademicoInput> | PacienteCreateWithoutProgramaAcademicoInput[] | PacienteUncheckedCreateWithoutProgramaAcademicoInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutProgramaAcademicoInput | PacienteCreateOrConnectWithoutProgramaAcademicoInput[]
    createMany?: PacienteCreateManyProgramaAcademicoInputEnvelope
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
  }

  export type PacienteUncheckedCreateNestedManyWithoutProgramaAcademicoInput = {
    create?: XOR<PacienteCreateWithoutProgramaAcademicoInput, PacienteUncheckedCreateWithoutProgramaAcademicoInput> | PacienteCreateWithoutProgramaAcademicoInput[] | PacienteUncheckedCreateWithoutProgramaAcademicoInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutProgramaAcademicoInput | PacienteCreateOrConnectWithoutProgramaAcademicoInput[]
    createMany?: PacienteCreateManyProgramaAcademicoInputEnvelope
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
  }

  export type FacultadUpdateOneRequiredWithoutProgramasAcademicosNestedInput = {
    create?: XOR<FacultadCreateWithoutProgramasAcademicosInput, FacultadUncheckedCreateWithoutProgramasAcademicosInput>
    connectOrCreate?: FacultadCreateOrConnectWithoutProgramasAcademicosInput
    upsert?: FacultadUpsertWithoutProgramasAcademicosInput
    connect?: FacultadWhereUniqueInput
    update?: XOR<XOR<FacultadUpdateToOneWithWhereWithoutProgramasAcademicosInput, FacultadUpdateWithoutProgramasAcademicosInput>, FacultadUncheckedUpdateWithoutProgramasAcademicosInput>
  }

  export type PacienteUpdateManyWithoutProgramaAcademicoNestedInput = {
    create?: XOR<PacienteCreateWithoutProgramaAcademicoInput, PacienteUncheckedCreateWithoutProgramaAcademicoInput> | PacienteCreateWithoutProgramaAcademicoInput[] | PacienteUncheckedCreateWithoutProgramaAcademicoInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutProgramaAcademicoInput | PacienteCreateOrConnectWithoutProgramaAcademicoInput[]
    upsert?: PacienteUpsertWithWhereUniqueWithoutProgramaAcademicoInput | PacienteUpsertWithWhereUniqueWithoutProgramaAcademicoInput[]
    createMany?: PacienteCreateManyProgramaAcademicoInputEnvelope
    set?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    disconnect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    delete?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    update?: PacienteUpdateWithWhereUniqueWithoutProgramaAcademicoInput | PacienteUpdateWithWhereUniqueWithoutProgramaAcademicoInput[]
    updateMany?: PacienteUpdateManyWithWhereWithoutProgramaAcademicoInput | PacienteUpdateManyWithWhereWithoutProgramaAcademicoInput[]
    deleteMany?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
  }

  export type PacienteUncheckedUpdateManyWithoutProgramaAcademicoNestedInput = {
    create?: XOR<PacienteCreateWithoutProgramaAcademicoInput, PacienteUncheckedCreateWithoutProgramaAcademicoInput> | PacienteCreateWithoutProgramaAcademicoInput[] | PacienteUncheckedCreateWithoutProgramaAcademicoInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutProgramaAcademicoInput | PacienteCreateOrConnectWithoutProgramaAcademicoInput[]
    upsert?: PacienteUpsertWithWhereUniqueWithoutProgramaAcademicoInput | PacienteUpsertWithWhereUniqueWithoutProgramaAcademicoInput[]
    createMany?: PacienteCreateManyProgramaAcademicoInputEnvelope
    set?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    disconnect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    delete?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    update?: PacienteUpdateWithWhereUniqueWithoutProgramaAcademicoInput | PacienteUpdateWithWhereUniqueWithoutProgramaAcademicoInput[]
    updateMany?: PacienteUpdateManyWithWhereWithoutProgramaAcademicoInput | PacienteUpdateManyWithWhereWithoutProgramaAcademicoInput[]
    deleteMany?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
  }

  export type ConsultorioCreateNestedManyWithoutSedeInput = {
    create?: XOR<ConsultorioCreateWithoutSedeInput, ConsultorioUncheckedCreateWithoutSedeInput> | ConsultorioCreateWithoutSedeInput[] | ConsultorioUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: ConsultorioCreateOrConnectWithoutSedeInput | ConsultorioCreateOrConnectWithoutSedeInput[]
    createMany?: ConsultorioCreateManySedeInputEnvelope
    connect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
  }

  export type ConsultorioUncheckedCreateNestedManyWithoutSedeInput = {
    create?: XOR<ConsultorioCreateWithoutSedeInput, ConsultorioUncheckedCreateWithoutSedeInput> | ConsultorioCreateWithoutSedeInput[] | ConsultorioUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: ConsultorioCreateOrConnectWithoutSedeInput | ConsultorioCreateOrConnectWithoutSedeInput[]
    createMany?: ConsultorioCreateManySedeInputEnvelope
    connect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
  }

  export type ConsultorioUpdateManyWithoutSedeNestedInput = {
    create?: XOR<ConsultorioCreateWithoutSedeInput, ConsultorioUncheckedCreateWithoutSedeInput> | ConsultorioCreateWithoutSedeInput[] | ConsultorioUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: ConsultorioCreateOrConnectWithoutSedeInput | ConsultorioCreateOrConnectWithoutSedeInput[]
    upsert?: ConsultorioUpsertWithWhereUniqueWithoutSedeInput | ConsultorioUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: ConsultorioCreateManySedeInputEnvelope
    set?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    disconnect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    delete?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    connect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    update?: ConsultorioUpdateWithWhereUniqueWithoutSedeInput | ConsultorioUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: ConsultorioUpdateManyWithWhereWithoutSedeInput | ConsultorioUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: ConsultorioScalarWhereInput | ConsultorioScalarWhereInput[]
  }

  export type ConsultorioUncheckedUpdateManyWithoutSedeNestedInput = {
    create?: XOR<ConsultorioCreateWithoutSedeInput, ConsultorioUncheckedCreateWithoutSedeInput> | ConsultorioCreateWithoutSedeInput[] | ConsultorioUncheckedCreateWithoutSedeInput[]
    connectOrCreate?: ConsultorioCreateOrConnectWithoutSedeInput | ConsultorioCreateOrConnectWithoutSedeInput[]
    upsert?: ConsultorioUpsertWithWhereUniqueWithoutSedeInput | ConsultorioUpsertWithWhereUniqueWithoutSedeInput[]
    createMany?: ConsultorioCreateManySedeInputEnvelope
    set?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    disconnect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    delete?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    connect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    update?: ConsultorioUpdateWithWhereUniqueWithoutSedeInput | ConsultorioUpdateWithWhereUniqueWithoutSedeInput[]
    updateMany?: ConsultorioUpdateManyWithWhereWithoutSedeInput | ConsultorioUpdateManyWithWhereWithoutSedeInput[]
    deleteMany?: ConsultorioScalarWhereInput | ConsultorioScalarWhereInput[]
  }

  export type SedeCreateNestedOneWithoutConsultoriosInput = {
    create?: XOR<SedeCreateWithoutConsultoriosInput, SedeUncheckedCreateWithoutConsultoriosInput>
    connectOrCreate?: SedeCreateOrConnectWithoutConsultoriosInput
    connect?: SedeWhereUniqueInput
  }

  export type EpisodioClincoCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<EpisodioClincoCreateWithoutConsultorioInput, EpisodioClincoUncheckedCreateWithoutConsultorioInput> | EpisodioClincoCreateWithoutConsultorioInput[] | EpisodioClincoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutConsultorioInput | EpisodioClincoCreateOrConnectWithoutConsultorioInput[]
    createMany?: EpisodioClincoCreateManyConsultorioInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type EpisodioClincoUncheckedCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<EpisodioClincoCreateWithoutConsultorioInput, EpisodioClincoUncheckedCreateWithoutConsultorioInput> | EpisodioClincoCreateWithoutConsultorioInput[] | EpisodioClincoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutConsultorioInput | EpisodioClincoCreateOrConnectWithoutConsultorioInput[]
    createMany?: EpisodioClincoCreateManyConsultorioInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type SedeUpdateOneRequiredWithoutConsultoriosNestedInput = {
    create?: XOR<SedeCreateWithoutConsultoriosInput, SedeUncheckedCreateWithoutConsultoriosInput>
    connectOrCreate?: SedeCreateOrConnectWithoutConsultoriosInput
    upsert?: SedeUpsertWithoutConsultoriosInput
    connect?: SedeWhereUniqueInput
    update?: XOR<XOR<SedeUpdateToOneWithWhereWithoutConsultoriosInput, SedeUpdateWithoutConsultoriosInput>, SedeUncheckedUpdateWithoutConsultoriosInput>
  }

  export type EpisodioClincoUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutConsultorioInput, EpisodioClincoUncheckedCreateWithoutConsultorioInput> | EpisodioClincoCreateWithoutConsultorioInput[] | EpisodioClincoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutConsultorioInput | EpisodioClincoCreateOrConnectWithoutConsultorioInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutConsultorioInput | EpisodioClincoUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: EpisodioClincoCreateManyConsultorioInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutConsultorioInput | EpisodioClincoUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutConsultorioInput | EpisodioClincoUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutConsultorioInput, EpisodioClincoUncheckedCreateWithoutConsultorioInput> | EpisodioClincoCreateWithoutConsultorioInput[] | EpisodioClincoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutConsultorioInput | EpisodioClincoCreateOrConnectWithoutConsultorioInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutConsultorioInput | EpisodioClincoUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: EpisodioClincoCreateManyConsultorioInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutConsultorioInput | EpisodioClincoUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutConsultorioInput | EpisodioClincoUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type MedicoEspecialidadCreateNestedManyWithoutEspecialidadInput = {
    create?: XOR<MedicoEspecialidadCreateWithoutEspecialidadInput, MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput> | MedicoEspecialidadCreateWithoutEspecialidadInput[] | MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput[]
    connectOrCreate?: MedicoEspecialidadCreateOrConnectWithoutEspecialidadInput | MedicoEspecialidadCreateOrConnectWithoutEspecialidadInput[]
    createMany?: MedicoEspecialidadCreateManyEspecialidadInputEnvelope
    connect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
  }

  export type EpisodioClincoCreateNestedManyWithoutEspecialidadInput = {
    create?: XOR<EpisodioClincoCreateWithoutEspecialidadInput, EpisodioClincoUncheckedCreateWithoutEspecialidadInput> | EpisodioClincoCreateWithoutEspecialidadInput[] | EpisodioClincoUncheckedCreateWithoutEspecialidadInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutEspecialidadInput | EpisodioClincoCreateOrConnectWithoutEspecialidadInput[]
    createMany?: EpisodioClincoCreateManyEspecialidadInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type MedicoEspecialidadUncheckedCreateNestedManyWithoutEspecialidadInput = {
    create?: XOR<MedicoEspecialidadCreateWithoutEspecialidadInput, MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput> | MedicoEspecialidadCreateWithoutEspecialidadInput[] | MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput[]
    connectOrCreate?: MedicoEspecialidadCreateOrConnectWithoutEspecialidadInput | MedicoEspecialidadCreateOrConnectWithoutEspecialidadInput[]
    createMany?: MedicoEspecialidadCreateManyEspecialidadInputEnvelope
    connect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
  }

  export type EpisodioClincoUncheckedCreateNestedManyWithoutEspecialidadInput = {
    create?: XOR<EpisodioClincoCreateWithoutEspecialidadInput, EpisodioClincoUncheckedCreateWithoutEspecialidadInput> | EpisodioClincoCreateWithoutEspecialidadInput[] | EpisodioClincoUncheckedCreateWithoutEspecialidadInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutEspecialidadInput | EpisodioClincoCreateOrConnectWithoutEspecialidadInput[]
    createMany?: EpisodioClincoCreateManyEspecialidadInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type MedicoEspecialidadUpdateManyWithoutEspecialidadNestedInput = {
    create?: XOR<MedicoEspecialidadCreateWithoutEspecialidadInput, MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput> | MedicoEspecialidadCreateWithoutEspecialidadInput[] | MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput[]
    connectOrCreate?: MedicoEspecialidadCreateOrConnectWithoutEspecialidadInput | MedicoEspecialidadCreateOrConnectWithoutEspecialidadInput[]
    upsert?: MedicoEspecialidadUpsertWithWhereUniqueWithoutEspecialidadInput | MedicoEspecialidadUpsertWithWhereUniqueWithoutEspecialidadInput[]
    createMany?: MedicoEspecialidadCreateManyEspecialidadInputEnvelope
    set?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    disconnect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    delete?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    connect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    update?: MedicoEspecialidadUpdateWithWhereUniqueWithoutEspecialidadInput | MedicoEspecialidadUpdateWithWhereUniqueWithoutEspecialidadInput[]
    updateMany?: MedicoEspecialidadUpdateManyWithWhereWithoutEspecialidadInput | MedicoEspecialidadUpdateManyWithWhereWithoutEspecialidadInput[]
    deleteMany?: MedicoEspecialidadScalarWhereInput | MedicoEspecialidadScalarWhereInput[]
  }

  export type EpisodioClincoUpdateManyWithoutEspecialidadNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutEspecialidadInput, EpisodioClincoUncheckedCreateWithoutEspecialidadInput> | EpisodioClincoCreateWithoutEspecialidadInput[] | EpisodioClincoUncheckedCreateWithoutEspecialidadInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutEspecialidadInput | EpisodioClincoCreateOrConnectWithoutEspecialidadInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutEspecialidadInput | EpisodioClincoUpsertWithWhereUniqueWithoutEspecialidadInput[]
    createMany?: EpisodioClincoCreateManyEspecialidadInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutEspecialidadInput | EpisodioClincoUpdateWithWhereUniqueWithoutEspecialidadInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutEspecialidadInput | EpisodioClincoUpdateManyWithWhereWithoutEspecialidadInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type MedicoEspecialidadUncheckedUpdateManyWithoutEspecialidadNestedInput = {
    create?: XOR<MedicoEspecialidadCreateWithoutEspecialidadInput, MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput> | MedicoEspecialidadCreateWithoutEspecialidadInput[] | MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput[]
    connectOrCreate?: MedicoEspecialidadCreateOrConnectWithoutEspecialidadInput | MedicoEspecialidadCreateOrConnectWithoutEspecialidadInput[]
    upsert?: MedicoEspecialidadUpsertWithWhereUniqueWithoutEspecialidadInput | MedicoEspecialidadUpsertWithWhereUniqueWithoutEspecialidadInput[]
    createMany?: MedicoEspecialidadCreateManyEspecialidadInputEnvelope
    set?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    disconnect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    delete?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    connect?: MedicoEspecialidadWhereUniqueInput | MedicoEspecialidadWhereUniqueInput[]
    update?: MedicoEspecialidadUpdateWithWhereUniqueWithoutEspecialidadInput | MedicoEspecialidadUpdateWithWhereUniqueWithoutEspecialidadInput[]
    updateMany?: MedicoEspecialidadUpdateManyWithWhereWithoutEspecialidadInput | MedicoEspecialidadUpdateManyWithWhereWithoutEspecialidadInput[]
    deleteMany?: MedicoEspecialidadScalarWhereInput | MedicoEspecialidadScalarWhereInput[]
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutEspecialidadNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutEspecialidadInput, EpisodioClincoUncheckedCreateWithoutEspecialidadInput> | EpisodioClincoCreateWithoutEspecialidadInput[] | EpisodioClincoUncheckedCreateWithoutEspecialidadInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutEspecialidadInput | EpisodioClincoCreateOrConnectWithoutEspecialidadInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutEspecialidadInput | EpisodioClincoUpsertWithWhereUniqueWithoutEspecialidadInput[]
    createMany?: EpisodioClincoCreateManyEspecialidadInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutEspecialidadInput | EpisodioClincoUpdateWithWhereUniqueWithoutEspecialidadInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutEspecialidadInput | EpisodioClincoUpdateManyWithWhereWithoutEspecialidadInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type MedicoCreateNestedOneWithoutEspecialidadesInput = {
    create?: XOR<MedicoCreateWithoutEspecialidadesInput, MedicoUncheckedCreateWithoutEspecialidadesInput>
    connectOrCreate?: MedicoCreateOrConnectWithoutEspecialidadesInput
    connect?: MedicoWhereUniqueInput
  }

  export type EspecialidadCreateNestedOneWithoutMedicoEspecialidadInput = {
    create?: XOR<EspecialidadCreateWithoutMedicoEspecialidadInput, EspecialidadUncheckedCreateWithoutMedicoEspecialidadInput>
    connectOrCreate?: EspecialidadCreateOrConnectWithoutMedicoEspecialidadInput
    connect?: EspecialidadWhereUniqueInput
  }

  export type MedicoUpdateOneRequiredWithoutEspecialidadesNestedInput = {
    create?: XOR<MedicoCreateWithoutEspecialidadesInput, MedicoUncheckedCreateWithoutEspecialidadesInput>
    connectOrCreate?: MedicoCreateOrConnectWithoutEspecialidadesInput
    upsert?: MedicoUpsertWithoutEspecialidadesInput
    connect?: MedicoWhereUniqueInput
    update?: XOR<XOR<MedicoUpdateToOneWithWhereWithoutEspecialidadesInput, MedicoUpdateWithoutEspecialidadesInput>, MedicoUncheckedUpdateWithoutEspecialidadesInput>
  }

  export type EspecialidadUpdateOneRequiredWithoutMedicoEspecialidadNestedInput = {
    create?: XOR<EspecialidadCreateWithoutMedicoEspecialidadInput, EspecialidadUncheckedCreateWithoutMedicoEspecialidadInput>
    connectOrCreate?: EspecialidadCreateOrConnectWithoutMedicoEspecialidadInput
    upsert?: EspecialidadUpsertWithoutMedicoEspecialidadInput
    connect?: EspecialidadWhereUniqueInput
    update?: XOR<XOR<EspecialidadUpdateToOneWithWhereWithoutMedicoEspecialidadInput, EspecialidadUpdateWithoutMedicoEspecialidadInput>, EspecialidadUncheckedUpdateWithoutMedicoEspecialidadInput>
  }

  export type ProgramaAcademicoCreateNestedOneWithoutPacientesInput = {
    create?: XOR<ProgramaAcademicoCreateWithoutPacientesInput, ProgramaAcademicoUncheckedCreateWithoutPacientesInput>
    connectOrCreate?: ProgramaAcademicoCreateOrConnectWithoutPacientesInput
    connect?: ProgramaAcademicoWhereUniqueInput
  }

  export type ContactoEmergenciaCreateNestedManyWithoutPacienteInput = {
    create?: XOR<ContactoEmergenciaCreateWithoutPacienteInput, ContactoEmergenciaUncheckedCreateWithoutPacienteInput> | ContactoEmergenciaCreateWithoutPacienteInput[] | ContactoEmergenciaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: ContactoEmergenciaCreateOrConnectWithoutPacienteInput | ContactoEmergenciaCreateOrConnectWithoutPacienteInput[]
    createMany?: ContactoEmergenciaCreateManyPacienteInputEnvelope
    connect?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
  }

  export type HistoriaClinicaCreateNestedManyWithoutPacienteInput = {
    create?: XOR<HistoriaClinicaCreateWithoutPacienteInput, HistoriaClinicaUncheckedCreateWithoutPacienteInput> | HistoriaClinicaCreateWithoutPacienteInput[] | HistoriaClinicaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: HistoriaClinicaCreateOrConnectWithoutPacienteInput | HistoriaClinicaCreateOrConnectWithoutPacienteInput[]
    createMany?: HistoriaClinicaCreateManyPacienteInputEnvelope
    connect?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
  }

  export type ContactoEmergenciaUncheckedCreateNestedManyWithoutPacienteInput = {
    create?: XOR<ContactoEmergenciaCreateWithoutPacienteInput, ContactoEmergenciaUncheckedCreateWithoutPacienteInput> | ContactoEmergenciaCreateWithoutPacienteInput[] | ContactoEmergenciaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: ContactoEmergenciaCreateOrConnectWithoutPacienteInput | ContactoEmergenciaCreateOrConnectWithoutPacienteInput[]
    createMany?: ContactoEmergenciaCreateManyPacienteInputEnvelope
    connect?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
  }

  export type HistoriaClinicaUncheckedCreateNestedManyWithoutPacienteInput = {
    create?: XOR<HistoriaClinicaCreateWithoutPacienteInput, HistoriaClinicaUncheckedCreateWithoutPacienteInput> | HistoriaClinicaCreateWithoutPacienteInput[] | HistoriaClinicaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: HistoriaClinicaCreateOrConnectWithoutPacienteInput | HistoriaClinicaCreateOrConnectWithoutPacienteInput[]
    createMany?: HistoriaClinicaCreateManyPacienteInputEnvelope
    connect?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
  }

  export type ProgramaAcademicoUpdateOneRequiredWithoutPacientesNestedInput = {
    create?: XOR<ProgramaAcademicoCreateWithoutPacientesInput, ProgramaAcademicoUncheckedCreateWithoutPacientesInput>
    connectOrCreate?: ProgramaAcademicoCreateOrConnectWithoutPacientesInput
    upsert?: ProgramaAcademicoUpsertWithoutPacientesInput
    connect?: ProgramaAcademicoWhereUniqueInput
    update?: XOR<XOR<ProgramaAcademicoUpdateToOneWithWhereWithoutPacientesInput, ProgramaAcademicoUpdateWithoutPacientesInput>, ProgramaAcademicoUncheckedUpdateWithoutPacientesInput>
  }

  export type ContactoEmergenciaUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<ContactoEmergenciaCreateWithoutPacienteInput, ContactoEmergenciaUncheckedCreateWithoutPacienteInput> | ContactoEmergenciaCreateWithoutPacienteInput[] | ContactoEmergenciaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: ContactoEmergenciaCreateOrConnectWithoutPacienteInput | ContactoEmergenciaCreateOrConnectWithoutPacienteInput[]
    upsert?: ContactoEmergenciaUpsertWithWhereUniqueWithoutPacienteInput | ContactoEmergenciaUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: ContactoEmergenciaCreateManyPacienteInputEnvelope
    set?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
    disconnect?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
    delete?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
    connect?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
    update?: ContactoEmergenciaUpdateWithWhereUniqueWithoutPacienteInput | ContactoEmergenciaUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: ContactoEmergenciaUpdateManyWithWhereWithoutPacienteInput | ContactoEmergenciaUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: ContactoEmergenciaScalarWhereInput | ContactoEmergenciaScalarWhereInput[]
  }

  export type HistoriaClinicaUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<HistoriaClinicaCreateWithoutPacienteInput, HistoriaClinicaUncheckedCreateWithoutPacienteInput> | HistoriaClinicaCreateWithoutPacienteInput[] | HistoriaClinicaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: HistoriaClinicaCreateOrConnectWithoutPacienteInput | HistoriaClinicaCreateOrConnectWithoutPacienteInput[]
    upsert?: HistoriaClinicaUpsertWithWhereUniqueWithoutPacienteInput | HistoriaClinicaUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: HistoriaClinicaCreateManyPacienteInputEnvelope
    set?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
    disconnect?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
    delete?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
    connect?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
    update?: HistoriaClinicaUpdateWithWhereUniqueWithoutPacienteInput | HistoriaClinicaUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: HistoriaClinicaUpdateManyWithWhereWithoutPacienteInput | HistoriaClinicaUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: HistoriaClinicaScalarWhereInput | HistoriaClinicaScalarWhereInput[]
  }

  export type ContactoEmergenciaUncheckedUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<ContactoEmergenciaCreateWithoutPacienteInput, ContactoEmergenciaUncheckedCreateWithoutPacienteInput> | ContactoEmergenciaCreateWithoutPacienteInput[] | ContactoEmergenciaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: ContactoEmergenciaCreateOrConnectWithoutPacienteInput | ContactoEmergenciaCreateOrConnectWithoutPacienteInput[]
    upsert?: ContactoEmergenciaUpsertWithWhereUniqueWithoutPacienteInput | ContactoEmergenciaUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: ContactoEmergenciaCreateManyPacienteInputEnvelope
    set?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
    disconnect?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
    delete?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
    connect?: ContactoEmergenciaWhereUniqueInput | ContactoEmergenciaWhereUniqueInput[]
    update?: ContactoEmergenciaUpdateWithWhereUniqueWithoutPacienteInput | ContactoEmergenciaUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: ContactoEmergenciaUpdateManyWithWhereWithoutPacienteInput | ContactoEmergenciaUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: ContactoEmergenciaScalarWhereInput | ContactoEmergenciaScalarWhereInput[]
  }

  export type HistoriaClinicaUncheckedUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<HistoriaClinicaCreateWithoutPacienteInput, HistoriaClinicaUncheckedCreateWithoutPacienteInput> | HistoriaClinicaCreateWithoutPacienteInput[] | HistoriaClinicaUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: HistoriaClinicaCreateOrConnectWithoutPacienteInput | HistoriaClinicaCreateOrConnectWithoutPacienteInput[]
    upsert?: HistoriaClinicaUpsertWithWhereUniqueWithoutPacienteInput | HistoriaClinicaUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: HistoriaClinicaCreateManyPacienteInputEnvelope
    set?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
    disconnect?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
    delete?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
    connect?: HistoriaClinicaWhereUniqueInput | HistoriaClinicaWhereUniqueInput[]
    update?: HistoriaClinicaUpdateWithWhereUniqueWithoutPacienteInput | HistoriaClinicaUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: HistoriaClinicaUpdateManyWithWhereWithoutPacienteInput | HistoriaClinicaUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: HistoriaClinicaScalarWhereInput | HistoriaClinicaScalarWhereInput[]
  }

  export type PacienteCreateNestedOneWithoutContactosEmergenciaInput = {
    create?: XOR<PacienteCreateWithoutContactosEmergenciaInput, PacienteUncheckedCreateWithoutContactosEmergenciaInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutContactosEmergenciaInput
    connect?: PacienteWhereUniqueInput
  }

  export type PacienteUpdateOneRequiredWithoutContactosEmergenciaNestedInput = {
    create?: XOR<PacienteCreateWithoutContactosEmergenciaInput, PacienteUncheckedCreateWithoutContactosEmergenciaInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutContactosEmergenciaInput
    upsert?: PacienteUpsertWithoutContactosEmergenciaInput
    connect?: PacienteWhereUniqueInput
    update?: XOR<XOR<PacienteUpdateToOneWithWhereWithoutContactosEmergenciaInput, PacienteUpdateWithoutContactosEmergenciaInput>, PacienteUncheckedUpdateWithoutContactosEmergenciaInput>
  }

  export type PacienteCreateNestedOneWithoutHistoriasClinicasInput = {
    create?: XOR<PacienteCreateWithoutHistoriasClinicasInput, PacienteUncheckedCreateWithoutHistoriasClinicasInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutHistoriasClinicasInput
    connect?: PacienteWhereUniqueInput
  }

  export type EpisodioClincoCreateNestedManyWithoutHistoriaClinicaInput = {
    create?: XOR<EpisodioClincoCreateWithoutHistoriaClinicaInput, EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput> | EpisodioClincoCreateWithoutHistoriaClinicaInput[] | EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutHistoriaClinicaInput | EpisodioClincoCreateOrConnectWithoutHistoriaClinicaInput[]
    createMany?: EpisodioClincoCreateManyHistoriaClinicaInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type AuditoriaHistoriaCreateNestedManyWithoutHistoriaClinicaInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutHistoriaClinicaInput, AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput> | AuditoriaHistoriaCreateWithoutHistoriaClinicaInput[] | AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutHistoriaClinicaInput | AuditoriaHistoriaCreateOrConnectWithoutHistoriaClinicaInput[]
    createMany?: AuditoriaHistoriaCreateManyHistoriaClinicaInputEnvelope
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
  }

  export type EpisodioClincoUncheckedCreateNestedManyWithoutHistoriaClinicaInput = {
    create?: XOR<EpisodioClincoCreateWithoutHistoriaClinicaInput, EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput> | EpisodioClincoCreateWithoutHistoriaClinicaInput[] | EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutHistoriaClinicaInput | EpisodioClincoCreateOrConnectWithoutHistoriaClinicaInput[]
    createMany?: EpisodioClincoCreateManyHistoriaClinicaInputEnvelope
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
  }

  export type AuditoriaHistoriaUncheckedCreateNestedManyWithoutHistoriaClinicaInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutHistoriaClinicaInput, AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput> | AuditoriaHistoriaCreateWithoutHistoriaClinicaInput[] | AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutHistoriaClinicaInput | AuditoriaHistoriaCreateOrConnectWithoutHistoriaClinicaInput[]
    createMany?: AuditoriaHistoriaCreateManyHistoriaClinicaInputEnvelope
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
  }

  export type PacienteUpdateOneRequiredWithoutHistoriasClinicasNestedInput = {
    create?: XOR<PacienteCreateWithoutHistoriasClinicasInput, PacienteUncheckedCreateWithoutHistoriasClinicasInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutHistoriasClinicasInput
    upsert?: PacienteUpsertWithoutHistoriasClinicasInput
    connect?: PacienteWhereUniqueInput
    update?: XOR<XOR<PacienteUpdateToOneWithWhereWithoutHistoriasClinicasInput, PacienteUpdateWithoutHistoriasClinicasInput>, PacienteUncheckedUpdateWithoutHistoriasClinicasInput>
  }

  export type EpisodioClincoUpdateManyWithoutHistoriaClinicaNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutHistoriaClinicaInput, EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput> | EpisodioClincoCreateWithoutHistoriaClinicaInput[] | EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutHistoriaClinicaInput | EpisodioClincoCreateOrConnectWithoutHistoriaClinicaInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutHistoriaClinicaInput | EpisodioClincoUpsertWithWhereUniqueWithoutHistoriaClinicaInput[]
    createMany?: EpisodioClincoCreateManyHistoriaClinicaInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutHistoriaClinicaInput | EpisodioClincoUpdateWithWhereUniqueWithoutHistoriaClinicaInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutHistoriaClinicaInput | EpisodioClincoUpdateManyWithWhereWithoutHistoriaClinicaInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type AuditoriaHistoriaUpdateManyWithoutHistoriaClinicaNestedInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutHistoriaClinicaInput, AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput> | AuditoriaHistoriaCreateWithoutHistoriaClinicaInput[] | AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutHistoriaClinicaInput | AuditoriaHistoriaCreateOrConnectWithoutHistoriaClinicaInput[]
    upsert?: AuditoriaHistoriaUpsertWithWhereUniqueWithoutHistoriaClinicaInput | AuditoriaHistoriaUpsertWithWhereUniqueWithoutHistoriaClinicaInput[]
    createMany?: AuditoriaHistoriaCreateManyHistoriaClinicaInputEnvelope
    set?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    disconnect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    delete?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    update?: AuditoriaHistoriaUpdateWithWhereUniqueWithoutHistoriaClinicaInput | AuditoriaHistoriaUpdateWithWhereUniqueWithoutHistoriaClinicaInput[]
    updateMany?: AuditoriaHistoriaUpdateManyWithWhereWithoutHistoriaClinicaInput | AuditoriaHistoriaUpdateManyWithWhereWithoutHistoriaClinicaInput[]
    deleteMany?: AuditoriaHistoriaScalarWhereInput | AuditoriaHistoriaScalarWhereInput[]
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutHistoriaClinicaNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutHistoriaClinicaInput, EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput> | EpisodioClincoCreateWithoutHistoriaClinicaInput[] | EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput[]
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutHistoriaClinicaInput | EpisodioClincoCreateOrConnectWithoutHistoriaClinicaInput[]
    upsert?: EpisodioClincoUpsertWithWhereUniqueWithoutHistoriaClinicaInput | EpisodioClincoUpsertWithWhereUniqueWithoutHistoriaClinicaInput[]
    createMany?: EpisodioClincoCreateManyHistoriaClinicaInputEnvelope
    set?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    disconnect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    delete?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    connect?: EpisodioClincoWhereUniqueInput | EpisodioClincoWhereUniqueInput[]
    update?: EpisodioClincoUpdateWithWhereUniqueWithoutHistoriaClinicaInput | EpisodioClincoUpdateWithWhereUniqueWithoutHistoriaClinicaInput[]
    updateMany?: EpisodioClincoUpdateManyWithWhereWithoutHistoriaClinicaInput | EpisodioClincoUpdateManyWithWhereWithoutHistoriaClinicaInput[]
    deleteMany?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
  }

  export type AuditoriaHistoriaUncheckedUpdateManyWithoutHistoriaClinicaNestedInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutHistoriaClinicaInput, AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput> | AuditoriaHistoriaCreateWithoutHistoriaClinicaInput[] | AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutHistoriaClinicaInput | AuditoriaHistoriaCreateOrConnectWithoutHistoriaClinicaInput[]
    upsert?: AuditoriaHistoriaUpsertWithWhereUniqueWithoutHistoriaClinicaInput | AuditoriaHistoriaUpsertWithWhereUniqueWithoutHistoriaClinicaInput[]
    createMany?: AuditoriaHistoriaCreateManyHistoriaClinicaInputEnvelope
    set?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    disconnect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    delete?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    update?: AuditoriaHistoriaUpdateWithWhereUniqueWithoutHistoriaClinicaInput | AuditoriaHistoriaUpdateWithWhereUniqueWithoutHistoriaClinicaInput[]
    updateMany?: AuditoriaHistoriaUpdateManyWithWhereWithoutHistoriaClinicaInput | AuditoriaHistoriaUpdateManyWithWhereWithoutHistoriaClinicaInput[]
    deleteMany?: AuditoriaHistoriaScalarWhereInput | AuditoriaHistoriaScalarWhereInput[]
  }

  export type HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput = {
    create?: XOR<HistoriaClinicaCreateWithoutEpisodiosClinicosInput, HistoriaClinicaUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: HistoriaClinicaCreateOrConnectWithoutEpisodiosClinicosInput
    connect?: HistoriaClinicaWhereUniqueInput
  }

  export type EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput = {
    create?: XOR<EspecialidadCreateWithoutEpisodiosClinicosInput, EspecialidadUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: EspecialidadCreateOrConnectWithoutEpisodiosClinicosInput
    connect?: EspecialidadWhereUniqueInput
  }

  export type MedicoCreateNestedOneWithoutEpisodiosClinicosInput = {
    create?: XOR<MedicoCreateWithoutEpisodiosClinicosInput, MedicoUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: MedicoCreateOrConnectWithoutEpisodiosClinicosInput
    connect?: MedicoWhereUniqueInput
  }

  export type EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput = {
    create?: XOR<EnfermeraCreateWithoutEpisodiosClinicosInput, EnfermeraUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: EnfermeraCreateOrConnectWithoutEpisodiosClinicosInput
    connect?: EnfermeraWhereUniqueInput
  }

  export type ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput = {
    create?: XOR<ConsultorioCreateWithoutEpisodiosClinicosInput, ConsultorioUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutEpisodiosClinicosInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<SignosVitalesCreateWithoutEpisodioClinicoInput, SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput> | SignosVitalesCreateWithoutEpisodioClinicoInput[] | SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: SignosVitalesCreateOrConnectWithoutEpisodioClinicoInput | SignosVitalesCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: SignosVitalesCreateManyEpisodioClinicoInputEnvelope
    connect?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
  }

  export type DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<DiagnosticoCreateWithoutEpisodioClinicoInput, DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput> | DiagnosticoCreateWithoutEpisodioClinicoInput[] | DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: DiagnosticoCreateOrConnectWithoutEpisodioClinicoInput | DiagnosticoCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: DiagnosticoCreateManyEpisodioClinicoInputEnvelope
    connect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
  }

  export type PrescripcionCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<PrescripcionCreateWithoutEpisodioClinicoInput, PrescripcionUncheckedCreateWithoutEpisodioClinicoInput> | PrescripcionCreateWithoutEpisodioClinicoInput[] | PrescripcionUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: PrescripcionCreateOrConnectWithoutEpisodioClinicoInput | PrescripcionCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: PrescripcionCreateManyEpisodioClinicoInputEnvelope
    connect?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
  }

  export type DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<DocumentoClinicoCreateWithoutEpisodioClinicoInput, DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput> | DocumentoClinicoCreateWithoutEpisodioClinicoInput[] | DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: DocumentoClinicoCreateOrConnectWithoutEpisodioClinicoInput | DocumentoClinicoCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: DocumentoClinicoCreateManyEpisodioClinicoInputEnvelope
    connect?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
  }

  export type ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<ConsentimientoInformadoCreateWithoutEpisodioClinicoInput, ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput> | ConsentimientoInformadoCreateWithoutEpisodioClinicoInput[] | ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: ConsentimientoInformadoCreateOrConnectWithoutEpisodioClinicoInput | ConsentimientoInformadoCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: ConsentimientoInformadoCreateManyEpisodioClinicoInputEnvelope
    connect?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
  }

  export type OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput = {
    create?: XOR<OdontologiaDetalleCreateWithoutEpisodioClinicoInput, OdontologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: OdontologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    connect?: OdontologiaDetalleWhereUniqueInput
  }

  export type OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput = {
    create?: XOR<OftalmologiaDetalleCreateWithoutEpisodioClinicoInput, OftalmologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: OftalmologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    connect?: OftalmologiaDetalleWhereUniqueInput
  }

  export type PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput = {
    create?: XOR<PsicologiaDetalleCreateWithoutEpisodioClinicoInput, PsicologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: PsicologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    connect?: PsicologiaDetalleWhereUniqueInput
  }

  export type TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput = {
    create?: XOR<TrabajoSocialDetalleCreateWithoutEpisodioClinicoInput, TrabajoSocialDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: TrabajoSocialDetalleCreateOrConnectWithoutEpisodioClinicoInput
    connect?: TrabajoSocialDetalleWhereUniqueInput
  }

  export type AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutEpisodioClinicoInput, AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput> | AuditoriaHistoriaCreateWithoutEpisodioClinicoInput[] | AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutEpisodioClinicoInput | AuditoriaHistoriaCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: AuditoriaHistoriaCreateManyEpisodioClinicoInputEnvelope
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
  }

  export type SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<SignosVitalesCreateWithoutEpisodioClinicoInput, SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput> | SignosVitalesCreateWithoutEpisodioClinicoInput[] | SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: SignosVitalesCreateOrConnectWithoutEpisodioClinicoInput | SignosVitalesCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: SignosVitalesCreateManyEpisodioClinicoInputEnvelope
    connect?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
  }

  export type DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<DiagnosticoCreateWithoutEpisodioClinicoInput, DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput> | DiagnosticoCreateWithoutEpisodioClinicoInput[] | DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: DiagnosticoCreateOrConnectWithoutEpisodioClinicoInput | DiagnosticoCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: DiagnosticoCreateManyEpisodioClinicoInputEnvelope
    connect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
  }

  export type PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<PrescripcionCreateWithoutEpisodioClinicoInput, PrescripcionUncheckedCreateWithoutEpisodioClinicoInput> | PrescripcionCreateWithoutEpisodioClinicoInput[] | PrescripcionUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: PrescripcionCreateOrConnectWithoutEpisodioClinicoInput | PrescripcionCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: PrescripcionCreateManyEpisodioClinicoInputEnvelope
    connect?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
  }

  export type DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<DocumentoClinicoCreateWithoutEpisodioClinicoInput, DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput> | DocumentoClinicoCreateWithoutEpisodioClinicoInput[] | DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: DocumentoClinicoCreateOrConnectWithoutEpisodioClinicoInput | DocumentoClinicoCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: DocumentoClinicoCreateManyEpisodioClinicoInputEnvelope
    connect?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
  }

  export type ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<ConsentimientoInformadoCreateWithoutEpisodioClinicoInput, ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput> | ConsentimientoInformadoCreateWithoutEpisodioClinicoInput[] | ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: ConsentimientoInformadoCreateOrConnectWithoutEpisodioClinicoInput | ConsentimientoInformadoCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: ConsentimientoInformadoCreateManyEpisodioClinicoInputEnvelope
    connect?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
  }

  export type OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput = {
    create?: XOR<OdontologiaDetalleCreateWithoutEpisodioClinicoInput, OdontologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: OdontologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    connect?: OdontologiaDetalleWhereUniqueInput
  }

  export type OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput = {
    create?: XOR<OftalmologiaDetalleCreateWithoutEpisodioClinicoInput, OftalmologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: OftalmologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    connect?: OftalmologiaDetalleWhereUniqueInput
  }

  export type PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput = {
    create?: XOR<PsicologiaDetalleCreateWithoutEpisodioClinicoInput, PsicologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: PsicologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    connect?: PsicologiaDetalleWhereUniqueInput
  }

  export type TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput = {
    create?: XOR<TrabajoSocialDetalleCreateWithoutEpisodioClinicoInput, TrabajoSocialDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: TrabajoSocialDetalleCreateOrConnectWithoutEpisodioClinicoInput
    connect?: TrabajoSocialDetalleWhereUniqueInput
  }

  export type AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutEpisodioClinicoInput, AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput> | AuditoriaHistoriaCreateWithoutEpisodioClinicoInput[] | AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutEpisodioClinicoInput | AuditoriaHistoriaCreateOrConnectWithoutEpisodioClinicoInput[]
    createMany?: AuditoriaHistoriaCreateManyEpisodioClinicoInputEnvelope
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
  }

  export type HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput = {
    create?: XOR<HistoriaClinicaCreateWithoutEpisodiosClinicosInput, HistoriaClinicaUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: HistoriaClinicaCreateOrConnectWithoutEpisodiosClinicosInput
    upsert?: HistoriaClinicaUpsertWithoutEpisodiosClinicosInput
    connect?: HistoriaClinicaWhereUniqueInput
    update?: XOR<XOR<HistoriaClinicaUpdateToOneWithWhereWithoutEpisodiosClinicosInput, HistoriaClinicaUpdateWithoutEpisodiosClinicosInput>, HistoriaClinicaUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput = {
    create?: XOR<EspecialidadCreateWithoutEpisodiosClinicosInput, EspecialidadUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: EspecialidadCreateOrConnectWithoutEpisodiosClinicosInput
    upsert?: EspecialidadUpsertWithoutEpisodiosClinicosInput
    connect?: EspecialidadWhereUniqueInput
    update?: XOR<XOR<EspecialidadUpdateToOneWithWhereWithoutEpisodiosClinicosInput, EspecialidadUpdateWithoutEpisodiosClinicosInput>, EspecialidadUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type MedicoUpdateOneWithoutEpisodiosClinicosNestedInput = {
    create?: XOR<MedicoCreateWithoutEpisodiosClinicosInput, MedicoUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: MedicoCreateOrConnectWithoutEpisodiosClinicosInput
    upsert?: MedicoUpsertWithoutEpisodiosClinicosInput
    disconnect?: MedicoWhereInput | boolean
    delete?: MedicoWhereInput | boolean
    connect?: MedicoWhereUniqueInput
    update?: XOR<XOR<MedicoUpdateToOneWithWhereWithoutEpisodiosClinicosInput, MedicoUpdateWithoutEpisodiosClinicosInput>, MedicoUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput = {
    create?: XOR<EnfermeraCreateWithoutEpisodiosClinicosInput, EnfermeraUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: EnfermeraCreateOrConnectWithoutEpisodiosClinicosInput
    upsert?: EnfermeraUpsertWithoutEpisodiosClinicosInput
    connect?: EnfermeraWhereUniqueInput
    update?: XOR<XOR<EnfermeraUpdateToOneWithWhereWithoutEpisodiosClinicosInput, EnfermeraUpdateWithoutEpisodiosClinicosInput>, EnfermeraUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput = {
    create?: XOR<ConsultorioCreateWithoutEpisodiosClinicosInput, ConsultorioUncheckedCreateWithoutEpisodiosClinicosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutEpisodiosClinicosInput
    upsert?: ConsultorioUpsertWithoutEpisodiosClinicosInput
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutEpisodiosClinicosInput, ConsultorioUpdateWithoutEpisodiosClinicosInput>, ConsultorioUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<SignosVitalesCreateWithoutEpisodioClinicoInput, SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput> | SignosVitalesCreateWithoutEpisodioClinicoInput[] | SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: SignosVitalesCreateOrConnectWithoutEpisodioClinicoInput | SignosVitalesCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: SignosVitalesUpsertWithWhereUniqueWithoutEpisodioClinicoInput | SignosVitalesUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: SignosVitalesCreateManyEpisodioClinicoInputEnvelope
    set?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
    disconnect?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
    delete?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
    connect?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
    update?: SignosVitalesUpdateWithWhereUniqueWithoutEpisodioClinicoInput | SignosVitalesUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: SignosVitalesUpdateManyWithWhereWithoutEpisodioClinicoInput | SignosVitalesUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: SignosVitalesScalarWhereInput | SignosVitalesScalarWhereInput[]
  }

  export type DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<DiagnosticoCreateWithoutEpisodioClinicoInput, DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput> | DiagnosticoCreateWithoutEpisodioClinicoInput[] | DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: DiagnosticoCreateOrConnectWithoutEpisodioClinicoInput | DiagnosticoCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: DiagnosticoUpsertWithWhereUniqueWithoutEpisodioClinicoInput | DiagnosticoUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: DiagnosticoCreateManyEpisodioClinicoInputEnvelope
    set?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    disconnect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    delete?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    connect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    update?: DiagnosticoUpdateWithWhereUniqueWithoutEpisodioClinicoInput | DiagnosticoUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: DiagnosticoUpdateManyWithWhereWithoutEpisodioClinicoInput | DiagnosticoUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: DiagnosticoScalarWhereInput | DiagnosticoScalarWhereInput[]
  }

  export type PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<PrescripcionCreateWithoutEpisodioClinicoInput, PrescripcionUncheckedCreateWithoutEpisodioClinicoInput> | PrescripcionCreateWithoutEpisodioClinicoInput[] | PrescripcionUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: PrescripcionCreateOrConnectWithoutEpisodioClinicoInput | PrescripcionCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: PrescripcionUpsertWithWhereUniqueWithoutEpisodioClinicoInput | PrescripcionUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: PrescripcionCreateManyEpisodioClinicoInputEnvelope
    set?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
    disconnect?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
    delete?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
    connect?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
    update?: PrescripcionUpdateWithWhereUniqueWithoutEpisodioClinicoInput | PrescripcionUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: PrescripcionUpdateManyWithWhereWithoutEpisodioClinicoInput | PrescripcionUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: PrescripcionScalarWhereInput | PrescripcionScalarWhereInput[]
  }

  export type DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<DocumentoClinicoCreateWithoutEpisodioClinicoInput, DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput> | DocumentoClinicoCreateWithoutEpisodioClinicoInput[] | DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: DocumentoClinicoCreateOrConnectWithoutEpisodioClinicoInput | DocumentoClinicoCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: DocumentoClinicoUpsertWithWhereUniqueWithoutEpisodioClinicoInput | DocumentoClinicoUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: DocumentoClinicoCreateManyEpisodioClinicoInputEnvelope
    set?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
    disconnect?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
    delete?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
    connect?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
    update?: DocumentoClinicoUpdateWithWhereUniqueWithoutEpisodioClinicoInput | DocumentoClinicoUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: DocumentoClinicoUpdateManyWithWhereWithoutEpisodioClinicoInput | DocumentoClinicoUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: DocumentoClinicoScalarWhereInput | DocumentoClinicoScalarWhereInput[]
  }

  export type ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<ConsentimientoInformadoCreateWithoutEpisodioClinicoInput, ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput> | ConsentimientoInformadoCreateWithoutEpisodioClinicoInput[] | ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: ConsentimientoInformadoCreateOrConnectWithoutEpisodioClinicoInput | ConsentimientoInformadoCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: ConsentimientoInformadoUpsertWithWhereUniqueWithoutEpisodioClinicoInput | ConsentimientoInformadoUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: ConsentimientoInformadoCreateManyEpisodioClinicoInputEnvelope
    set?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
    disconnect?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
    delete?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
    connect?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
    update?: ConsentimientoInformadoUpdateWithWhereUniqueWithoutEpisodioClinicoInput | ConsentimientoInformadoUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: ConsentimientoInformadoUpdateManyWithWhereWithoutEpisodioClinicoInput | ConsentimientoInformadoUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: ConsentimientoInformadoScalarWhereInput | ConsentimientoInformadoScalarWhereInput[]
  }

  export type OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput = {
    create?: XOR<OdontologiaDetalleCreateWithoutEpisodioClinicoInput, OdontologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: OdontologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    upsert?: OdontologiaDetalleUpsertWithoutEpisodioClinicoInput
    disconnect?: OdontologiaDetalleWhereInput | boolean
    delete?: OdontologiaDetalleWhereInput | boolean
    connect?: OdontologiaDetalleWhereUniqueInput
    update?: XOR<XOR<OdontologiaDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput, OdontologiaDetalleUpdateWithoutEpisodioClinicoInput>, OdontologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput = {
    create?: XOR<OftalmologiaDetalleCreateWithoutEpisodioClinicoInput, OftalmologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: OftalmologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    upsert?: OftalmologiaDetalleUpsertWithoutEpisodioClinicoInput
    disconnect?: OftalmologiaDetalleWhereInput | boolean
    delete?: OftalmologiaDetalleWhereInput | boolean
    connect?: OftalmologiaDetalleWhereUniqueInput
    update?: XOR<XOR<OftalmologiaDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput, OftalmologiaDetalleUpdateWithoutEpisodioClinicoInput>, OftalmologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput = {
    create?: XOR<PsicologiaDetalleCreateWithoutEpisodioClinicoInput, PsicologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: PsicologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    upsert?: PsicologiaDetalleUpsertWithoutEpisodioClinicoInput
    disconnect?: PsicologiaDetalleWhereInput | boolean
    delete?: PsicologiaDetalleWhereInput | boolean
    connect?: PsicologiaDetalleWhereUniqueInput
    update?: XOR<XOR<PsicologiaDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput, PsicologiaDetalleUpdateWithoutEpisodioClinicoInput>, PsicologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput = {
    create?: XOR<TrabajoSocialDetalleCreateWithoutEpisodioClinicoInput, TrabajoSocialDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: TrabajoSocialDetalleCreateOrConnectWithoutEpisodioClinicoInput
    upsert?: TrabajoSocialDetalleUpsertWithoutEpisodioClinicoInput
    disconnect?: TrabajoSocialDetalleWhereInput | boolean
    delete?: TrabajoSocialDetalleWhereInput | boolean
    connect?: TrabajoSocialDetalleWhereUniqueInput
    update?: XOR<XOR<TrabajoSocialDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput, TrabajoSocialDetalleUpdateWithoutEpisodioClinicoInput>, TrabajoSocialDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutEpisodioClinicoInput, AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput> | AuditoriaHistoriaCreateWithoutEpisodioClinicoInput[] | AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutEpisodioClinicoInput | AuditoriaHistoriaCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: AuditoriaHistoriaUpsertWithWhereUniqueWithoutEpisodioClinicoInput | AuditoriaHistoriaUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: AuditoriaHistoriaCreateManyEpisodioClinicoInputEnvelope
    set?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    disconnect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    delete?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    update?: AuditoriaHistoriaUpdateWithWhereUniqueWithoutEpisodioClinicoInput | AuditoriaHistoriaUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: AuditoriaHistoriaUpdateManyWithWhereWithoutEpisodioClinicoInput | AuditoriaHistoriaUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: AuditoriaHistoriaScalarWhereInput | AuditoriaHistoriaScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<SignosVitalesCreateWithoutEpisodioClinicoInput, SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput> | SignosVitalesCreateWithoutEpisodioClinicoInput[] | SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: SignosVitalesCreateOrConnectWithoutEpisodioClinicoInput | SignosVitalesCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: SignosVitalesUpsertWithWhereUniqueWithoutEpisodioClinicoInput | SignosVitalesUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: SignosVitalesCreateManyEpisodioClinicoInputEnvelope
    set?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
    disconnect?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
    delete?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
    connect?: SignosVitalesWhereUniqueInput | SignosVitalesWhereUniqueInput[]
    update?: SignosVitalesUpdateWithWhereUniqueWithoutEpisodioClinicoInput | SignosVitalesUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: SignosVitalesUpdateManyWithWhereWithoutEpisodioClinicoInput | SignosVitalesUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: SignosVitalesScalarWhereInput | SignosVitalesScalarWhereInput[]
  }

  export type DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<DiagnosticoCreateWithoutEpisodioClinicoInput, DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput> | DiagnosticoCreateWithoutEpisodioClinicoInput[] | DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: DiagnosticoCreateOrConnectWithoutEpisodioClinicoInput | DiagnosticoCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: DiagnosticoUpsertWithWhereUniqueWithoutEpisodioClinicoInput | DiagnosticoUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: DiagnosticoCreateManyEpisodioClinicoInputEnvelope
    set?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    disconnect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    delete?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    connect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    update?: DiagnosticoUpdateWithWhereUniqueWithoutEpisodioClinicoInput | DiagnosticoUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: DiagnosticoUpdateManyWithWhereWithoutEpisodioClinicoInput | DiagnosticoUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: DiagnosticoScalarWhereInput | DiagnosticoScalarWhereInput[]
  }

  export type PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<PrescripcionCreateWithoutEpisodioClinicoInput, PrescripcionUncheckedCreateWithoutEpisodioClinicoInput> | PrescripcionCreateWithoutEpisodioClinicoInput[] | PrescripcionUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: PrescripcionCreateOrConnectWithoutEpisodioClinicoInput | PrescripcionCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: PrescripcionUpsertWithWhereUniqueWithoutEpisodioClinicoInput | PrescripcionUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: PrescripcionCreateManyEpisodioClinicoInputEnvelope
    set?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
    disconnect?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
    delete?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
    connect?: PrescripcionWhereUniqueInput | PrescripcionWhereUniqueInput[]
    update?: PrescripcionUpdateWithWhereUniqueWithoutEpisodioClinicoInput | PrescripcionUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: PrescripcionUpdateManyWithWhereWithoutEpisodioClinicoInput | PrescripcionUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: PrescripcionScalarWhereInput | PrescripcionScalarWhereInput[]
  }

  export type DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<DocumentoClinicoCreateWithoutEpisodioClinicoInput, DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput> | DocumentoClinicoCreateWithoutEpisodioClinicoInput[] | DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: DocumentoClinicoCreateOrConnectWithoutEpisodioClinicoInput | DocumentoClinicoCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: DocumentoClinicoUpsertWithWhereUniqueWithoutEpisodioClinicoInput | DocumentoClinicoUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: DocumentoClinicoCreateManyEpisodioClinicoInputEnvelope
    set?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
    disconnect?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
    delete?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
    connect?: DocumentoClinicoWhereUniqueInput | DocumentoClinicoWhereUniqueInput[]
    update?: DocumentoClinicoUpdateWithWhereUniqueWithoutEpisodioClinicoInput | DocumentoClinicoUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: DocumentoClinicoUpdateManyWithWhereWithoutEpisodioClinicoInput | DocumentoClinicoUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: DocumentoClinicoScalarWhereInput | DocumentoClinicoScalarWhereInput[]
  }

  export type ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<ConsentimientoInformadoCreateWithoutEpisodioClinicoInput, ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput> | ConsentimientoInformadoCreateWithoutEpisodioClinicoInput[] | ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: ConsentimientoInformadoCreateOrConnectWithoutEpisodioClinicoInput | ConsentimientoInformadoCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: ConsentimientoInformadoUpsertWithWhereUniqueWithoutEpisodioClinicoInput | ConsentimientoInformadoUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: ConsentimientoInformadoCreateManyEpisodioClinicoInputEnvelope
    set?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
    disconnect?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
    delete?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
    connect?: ConsentimientoInformadoWhereUniqueInput | ConsentimientoInformadoWhereUniqueInput[]
    update?: ConsentimientoInformadoUpdateWithWhereUniqueWithoutEpisodioClinicoInput | ConsentimientoInformadoUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: ConsentimientoInformadoUpdateManyWithWhereWithoutEpisodioClinicoInput | ConsentimientoInformadoUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: ConsentimientoInformadoScalarWhereInput | ConsentimientoInformadoScalarWhereInput[]
  }

  export type OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput = {
    create?: XOR<OdontologiaDetalleCreateWithoutEpisodioClinicoInput, OdontologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: OdontologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    upsert?: OdontologiaDetalleUpsertWithoutEpisodioClinicoInput
    disconnect?: OdontologiaDetalleWhereInput | boolean
    delete?: OdontologiaDetalleWhereInput | boolean
    connect?: OdontologiaDetalleWhereUniqueInput
    update?: XOR<XOR<OdontologiaDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput, OdontologiaDetalleUpdateWithoutEpisodioClinicoInput>, OdontologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput = {
    create?: XOR<OftalmologiaDetalleCreateWithoutEpisodioClinicoInput, OftalmologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: OftalmologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    upsert?: OftalmologiaDetalleUpsertWithoutEpisodioClinicoInput
    disconnect?: OftalmologiaDetalleWhereInput | boolean
    delete?: OftalmologiaDetalleWhereInput | boolean
    connect?: OftalmologiaDetalleWhereUniqueInput
    update?: XOR<XOR<OftalmologiaDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput, OftalmologiaDetalleUpdateWithoutEpisodioClinicoInput>, OftalmologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput = {
    create?: XOR<PsicologiaDetalleCreateWithoutEpisodioClinicoInput, PsicologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: PsicologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput
    upsert?: PsicologiaDetalleUpsertWithoutEpisodioClinicoInput
    disconnect?: PsicologiaDetalleWhereInput | boolean
    delete?: PsicologiaDetalleWhereInput | boolean
    connect?: PsicologiaDetalleWhereUniqueInput
    update?: XOR<XOR<PsicologiaDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput, PsicologiaDetalleUpdateWithoutEpisodioClinicoInput>, PsicologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput = {
    create?: XOR<TrabajoSocialDetalleCreateWithoutEpisodioClinicoInput, TrabajoSocialDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    connectOrCreate?: TrabajoSocialDetalleCreateOrConnectWithoutEpisodioClinicoInput
    upsert?: TrabajoSocialDetalleUpsertWithoutEpisodioClinicoInput
    disconnect?: TrabajoSocialDetalleWhereInput | boolean
    delete?: TrabajoSocialDetalleWhereInput | boolean
    connect?: TrabajoSocialDetalleWhereUniqueInput
    update?: XOR<XOR<TrabajoSocialDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput, TrabajoSocialDetalleUpdateWithoutEpisodioClinicoInput>, TrabajoSocialDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput = {
    create?: XOR<AuditoriaHistoriaCreateWithoutEpisodioClinicoInput, AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput> | AuditoriaHistoriaCreateWithoutEpisodioClinicoInput[] | AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput[]
    connectOrCreate?: AuditoriaHistoriaCreateOrConnectWithoutEpisodioClinicoInput | AuditoriaHistoriaCreateOrConnectWithoutEpisodioClinicoInput[]
    upsert?: AuditoriaHistoriaUpsertWithWhereUniqueWithoutEpisodioClinicoInput | AuditoriaHistoriaUpsertWithWhereUniqueWithoutEpisodioClinicoInput[]
    createMany?: AuditoriaHistoriaCreateManyEpisodioClinicoInputEnvelope
    set?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    disconnect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    delete?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    connect?: AuditoriaHistoriaWhereUniqueInput | AuditoriaHistoriaWhereUniqueInput[]
    update?: AuditoriaHistoriaUpdateWithWhereUniqueWithoutEpisodioClinicoInput | AuditoriaHistoriaUpdateWithWhereUniqueWithoutEpisodioClinicoInput[]
    updateMany?: AuditoriaHistoriaUpdateManyWithWhereWithoutEpisodioClinicoInput | AuditoriaHistoriaUpdateManyWithWhereWithoutEpisodioClinicoInput[]
    deleteMany?: AuditoriaHistoriaScalarWhereInput | AuditoriaHistoriaScalarWhereInput[]
  }

  export type EpisodioClincoCreateNestedOneWithoutSignosVitalesInput = {
    create?: XOR<EpisodioClincoCreateWithoutSignosVitalesInput, EpisodioClincoUncheckedCreateWithoutSignosVitalesInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutSignosVitalesInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EpisodioClincoUpdateOneRequiredWithoutSignosVitalesNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutSignosVitalesInput, EpisodioClincoUncheckedCreateWithoutSignosVitalesInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutSignosVitalesInput
    upsert?: EpisodioClincoUpsertWithoutSignosVitalesInput
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutSignosVitalesInput, EpisodioClincoUpdateWithoutSignosVitalesInput>, EpisodioClincoUncheckedUpdateWithoutSignosVitalesInput>
  }

  export type DiagnosticoCreateNestedManyWithoutCodigoCIE10Input = {
    create?: XOR<DiagnosticoCreateWithoutCodigoCIE10Input, DiagnosticoUncheckedCreateWithoutCodigoCIE10Input> | DiagnosticoCreateWithoutCodigoCIE10Input[] | DiagnosticoUncheckedCreateWithoutCodigoCIE10Input[]
    connectOrCreate?: DiagnosticoCreateOrConnectWithoutCodigoCIE10Input | DiagnosticoCreateOrConnectWithoutCodigoCIE10Input[]
    createMany?: DiagnosticoCreateManyCodigoCIE10InputEnvelope
    connect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
  }

  export type DiagnosticoUncheckedCreateNestedManyWithoutCodigoCIE10Input = {
    create?: XOR<DiagnosticoCreateWithoutCodigoCIE10Input, DiagnosticoUncheckedCreateWithoutCodigoCIE10Input> | DiagnosticoCreateWithoutCodigoCIE10Input[] | DiagnosticoUncheckedCreateWithoutCodigoCIE10Input[]
    connectOrCreate?: DiagnosticoCreateOrConnectWithoutCodigoCIE10Input | DiagnosticoCreateOrConnectWithoutCodigoCIE10Input[]
    createMany?: DiagnosticoCreateManyCodigoCIE10InputEnvelope
    connect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
  }

  export type DiagnosticoUpdateManyWithoutCodigoCIE10NestedInput = {
    create?: XOR<DiagnosticoCreateWithoutCodigoCIE10Input, DiagnosticoUncheckedCreateWithoutCodigoCIE10Input> | DiagnosticoCreateWithoutCodigoCIE10Input[] | DiagnosticoUncheckedCreateWithoutCodigoCIE10Input[]
    connectOrCreate?: DiagnosticoCreateOrConnectWithoutCodigoCIE10Input | DiagnosticoCreateOrConnectWithoutCodigoCIE10Input[]
    upsert?: DiagnosticoUpsertWithWhereUniqueWithoutCodigoCIE10Input | DiagnosticoUpsertWithWhereUniqueWithoutCodigoCIE10Input[]
    createMany?: DiagnosticoCreateManyCodigoCIE10InputEnvelope
    set?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    disconnect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    delete?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    connect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    update?: DiagnosticoUpdateWithWhereUniqueWithoutCodigoCIE10Input | DiagnosticoUpdateWithWhereUniqueWithoutCodigoCIE10Input[]
    updateMany?: DiagnosticoUpdateManyWithWhereWithoutCodigoCIE10Input | DiagnosticoUpdateManyWithWhereWithoutCodigoCIE10Input[]
    deleteMany?: DiagnosticoScalarWhereInput | DiagnosticoScalarWhereInput[]
  }

  export type DiagnosticoUncheckedUpdateManyWithoutCodigoCIE10NestedInput = {
    create?: XOR<DiagnosticoCreateWithoutCodigoCIE10Input, DiagnosticoUncheckedCreateWithoutCodigoCIE10Input> | DiagnosticoCreateWithoutCodigoCIE10Input[] | DiagnosticoUncheckedCreateWithoutCodigoCIE10Input[]
    connectOrCreate?: DiagnosticoCreateOrConnectWithoutCodigoCIE10Input | DiagnosticoCreateOrConnectWithoutCodigoCIE10Input[]
    upsert?: DiagnosticoUpsertWithWhereUniqueWithoutCodigoCIE10Input | DiagnosticoUpsertWithWhereUniqueWithoutCodigoCIE10Input[]
    createMany?: DiagnosticoCreateManyCodigoCIE10InputEnvelope
    set?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    disconnect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    delete?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    connect?: DiagnosticoWhereUniqueInput | DiagnosticoWhereUniqueInput[]
    update?: DiagnosticoUpdateWithWhereUniqueWithoutCodigoCIE10Input | DiagnosticoUpdateWithWhereUniqueWithoutCodigoCIE10Input[]
    updateMany?: DiagnosticoUpdateManyWithWhereWithoutCodigoCIE10Input | DiagnosticoUpdateManyWithWhereWithoutCodigoCIE10Input[]
    deleteMany?: DiagnosticoScalarWhereInput | DiagnosticoScalarWhereInput[]
  }

  export type EpisodioClincoCreateNestedOneWithoutDiagnosticosInput = {
    create?: XOR<EpisodioClincoCreateWithoutDiagnosticosInput, EpisodioClincoUncheckedCreateWithoutDiagnosticosInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutDiagnosticosInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type CodigoCIE10CreateNestedOneWithoutDiagnosticosInput = {
    create?: XOR<CodigoCIE10CreateWithoutDiagnosticosInput, CodigoCIE10UncheckedCreateWithoutDiagnosticosInput>
    connectOrCreate?: CodigoCIE10CreateOrConnectWithoutDiagnosticosInput
    connect?: CodigoCIE10WhereUniqueInput
  }

  export type EnumTipoDiagnosticoFieldUpdateOperationsInput = {
    set?: $Enums.TipoDiagnostico
  }

  export type EpisodioClincoUpdateOneRequiredWithoutDiagnosticosNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutDiagnosticosInput, EpisodioClincoUncheckedCreateWithoutDiagnosticosInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutDiagnosticosInput
    upsert?: EpisodioClincoUpsertWithoutDiagnosticosInput
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutDiagnosticosInput, EpisodioClincoUpdateWithoutDiagnosticosInput>, EpisodioClincoUncheckedUpdateWithoutDiagnosticosInput>
  }

  export type CodigoCIE10UpdateOneRequiredWithoutDiagnosticosNestedInput = {
    create?: XOR<CodigoCIE10CreateWithoutDiagnosticosInput, CodigoCIE10UncheckedCreateWithoutDiagnosticosInput>
    connectOrCreate?: CodigoCIE10CreateOrConnectWithoutDiagnosticosInput
    upsert?: CodigoCIE10UpsertWithoutDiagnosticosInput
    connect?: CodigoCIE10WhereUniqueInput
    update?: XOR<XOR<CodigoCIE10UpdateToOneWithWhereWithoutDiagnosticosInput, CodigoCIE10UpdateWithoutDiagnosticosInput>, CodigoCIE10UncheckedUpdateWithoutDiagnosticosInput>
  }

  export type EpisodioClincoCreateNestedOneWithoutPrescripcionesInput = {
    create?: XOR<EpisodioClincoCreateWithoutPrescripcionesInput, EpisodioClincoUncheckedCreateWithoutPrescripcionesInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutPrescripcionesInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type EpisodioClincoUpdateOneRequiredWithoutPrescripcionesNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutPrescripcionesInput, EpisodioClincoUncheckedCreateWithoutPrescripcionesInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutPrescripcionesInput
    upsert?: EpisodioClincoUpsertWithoutPrescripcionesInput
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutPrescripcionesInput, EpisodioClincoUpdateWithoutPrescripcionesInput>, EpisodioClincoUncheckedUpdateWithoutPrescripcionesInput>
  }

  export type EpisodioClincoCreateNestedOneWithoutDocumentosClinicosInput = {
    create?: XOR<EpisodioClincoCreateWithoutDocumentosClinicosInput, EpisodioClincoUncheckedCreateWithoutDocumentosClinicosInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutDocumentosClinicosInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type EpisodioClincoUpdateOneRequiredWithoutDocumentosClinicosNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutDocumentosClinicosInput, EpisodioClincoUncheckedCreateWithoutDocumentosClinicosInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutDocumentosClinicosInput
    upsert?: EpisodioClincoUpsertWithoutDocumentosClinicosInput
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutDocumentosClinicosInput, EpisodioClincoUpdateWithoutDocumentosClinicosInput>, EpisodioClincoUncheckedUpdateWithoutDocumentosClinicosInput>
  }

  export type EpisodioClincoCreateNestedOneWithoutConsentimientosInput = {
    create?: XOR<EpisodioClincoCreateWithoutConsentimientosInput, EpisodioClincoUncheckedCreateWithoutConsentimientosInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutConsentimientosInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type EpisodioClincoUpdateOneRequiredWithoutConsentimientosNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutConsentimientosInput, EpisodioClincoUncheckedCreateWithoutConsentimientosInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutConsentimientosInput
    upsert?: EpisodioClincoUpsertWithoutConsentimientosInput
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutConsentimientosInput, EpisodioClincoUpdateWithoutConsentimientosInput>, EpisodioClincoUncheckedUpdateWithoutConsentimientosInput>
  }

  export type EpisodioClincoCreateNestedOneWithoutOdontologiaDetalleInput = {
    create?: XOR<EpisodioClincoCreateWithoutOdontologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutOdontologiaDetalleInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutOdontologiaDetalleInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type EpisodioClincoUpdateOneRequiredWithoutOdontologiaDetalleNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutOdontologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutOdontologiaDetalleInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutOdontologiaDetalleInput
    upsert?: EpisodioClincoUpsertWithoutOdontologiaDetalleInput
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutOdontologiaDetalleInput, EpisodioClincoUpdateWithoutOdontologiaDetalleInput>, EpisodioClincoUncheckedUpdateWithoutOdontologiaDetalleInput>
  }

  export type EpisodioClincoCreateNestedOneWithoutOftalmologiaDetalleInput = {
    create?: XOR<EpisodioClincoCreateWithoutOftalmologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutOftalmologiaDetalleInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutOftalmologiaDetalleInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type EpisodioClincoUpdateOneRequiredWithoutOftalmologiaDetalleNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutOftalmologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutOftalmologiaDetalleInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutOftalmologiaDetalleInput
    upsert?: EpisodioClincoUpsertWithoutOftalmologiaDetalleInput
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutOftalmologiaDetalleInput, EpisodioClincoUpdateWithoutOftalmologiaDetalleInput>, EpisodioClincoUncheckedUpdateWithoutOftalmologiaDetalleInput>
  }

  export type EpisodioClincoCreateNestedOneWithoutPsicologiaDetalleInput = {
    create?: XOR<EpisodioClincoCreateWithoutPsicologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutPsicologiaDetalleInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutPsicologiaDetalleInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type EpisodioClincoUpdateOneRequiredWithoutPsicologiaDetalleNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutPsicologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutPsicologiaDetalleInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutPsicologiaDetalleInput
    upsert?: EpisodioClincoUpsertWithoutPsicologiaDetalleInput
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutPsicologiaDetalleInput, EpisodioClincoUpdateWithoutPsicologiaDetalleInput>, EpisodioClincoUncheckedUpdateWithoutPsicologiaDetalleInput>
  }

  export type EpisodioClincoCreateNestedOneWithoutTrabajoSocialDetalleInput = {
    create?: XOR<EpisodioClincoCreateWithoutTrabajoSocialDetalleInput, EpisodioClincoUncheckedCreateWithoutTrabajoSocialDetalleInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutTrabajoSocialDetalleInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type EpisodioClincoUpdateOneRequiredWithoutTrabajoSocialDetalleNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutTrabajoSocialDetalleInput, EpisodioClincoUncheckedCreateWithoutTrabajoSocialDetalleInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutTrabajoSocialDetalleInput
    upsert?: EpisodioClincoUpsertWithoutTrabajoSocialDetalleInput
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutTrabajoSocialDetalleInput, EpisodioClincoUpdateWithoutTrabajoSocialDetalleInput>, EpisodioClincoUncheckedUpdateWithoutTrabajoSocialDetalleInput>
  }

  export type HistoriaClinicaCreateNestedOneWithoutAuditoriasInput = {
    create?: XOR<HistoriaClinicaCreateWithoutAuditoriasInput, HistoriaClinicaUncheckedCreateWithoutAuditoriasInput>
    connectOrCreate?: HistoriaClinicaCreateOrConnectWithoutAuditoriasInput
    connect?: HistoriaClinicaWhereUniqueInput
  }

  export type EpisodioClincoCreateNestedOneWithoutAuditoriasInput = {
    create?: XOR<EpisodioClincoCreateWithoutAuditoriasInput, EpisodioClincoUncheckedCreateWithoutAuditoriasInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutAuditoriasInput
    connect?: EpisodioClincoWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutAuditoriasInput = {
    create?: XOR<UsuarioCreateWithoutAuditoriasInput, UsuarioUncheckedCreateWithoutAuditoriasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAuditoriasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type HistoriaClinicaUpdateOneWithoutAuditoriasNestedInput = {
    create?: XOR<HistoriaClinicaCreateWithoutAuditoriasInput, HistoriaClinicaUncheckedCreateWithoutAuditoriasInput>
    connectOrCreate?: HistoriaClinicaCreateOrConnectWithoutAuditoriasInput
    upsert?: HistoriaClinicaUpsertWithoutAuditoriasInput
    disconnect?: HistoriaClinicaWhereInput | boolean
    delete?: HistoriaClinicaWhereInput | boolean
    connect?: HistoriaClinicaWhereUniqueInput
    update?: XOR<XOR<HistoriaClinicaUpdateToOneWithWhereWithoutAuditoriasInput, HistoriaClinicaUpdateWithoutAuditoriasInput>, HistoriaClinicaUncheckedUpdateWithoutAuditoriasInput>
  }

  export type EpisodioClincoUpdateOneWithoutAuditoriasNestedInput = {
    create?: XOR<EpisodioClincoCreateWithoutAuditoriasInput, EpisodioClincoUncheckedCreateWithoutAuditoriasInput>
    connectOrCreate?: EpisodioClincoCreateOrConnectWithoutAuditoriasInput
    upsert?: EpisodioClincoUpsertWithoutAuditoriasInput
    disconnect?: EpisodioClincoWhereInput | boolean
    delete?: EpisodioClincoWhereInput | boolean
    connect?: EpisodioClincoWhereUniqueInput
    update?: XOR<XOR<EpisodioClincoUpdateToOneWithWhereWithoutAuditoriasInput, EpisodioClincoUpdateWithoutAuditoriasInput>, EpisodioClincoUncheckedUpdateWithoutAuditoriasInput>
  }

  export type UsuarioUpdateOneRequiredWithoutAuditoriasNestedInput = {
    create?: XOR<UsuarioCreateWithoutAuditoriasInput, UsuarioUncheckedCreateWithoutAuditoriasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAuditoriasInput
    upsert?: UsuarioUpsertWithoutAuditoriasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutAuditoriasInput, UsuarioUpdateWithoutAuditoriasInput>, UsuarioUncheckedUpdateWithoutAuditoriasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumTipoUsuarioFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoUsuario | EnumTipoUsuarioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoUsuario[] | ListEnumTipoUsuarioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoUsuario[] | ListEnumTipoUsuarioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoUsuarioFilter<$PrismaModel> | $Enums.TipoUsuario
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumTipoUsuarioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoUsuario | EnumTipoUsuarioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoUsuario[] | ListEnumTipoUsuarioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoUsuario[] | ListEnumTipoUsuarioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoUsuarioWithAggregatesFilter<$PrismaModel> | $Enums.TipoUsuario
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoUsuarioFilter<$PrismaModel>
    _max?: NestedEnumTipoUsuarioFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumTipoDiagnosticoFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoDiagnostico | EnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoDiagnostico[] | ListEnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoDiagnostico[] | ListEnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoDiagnosticoFilter<$PrismaModel> | $Enums.TipoDiagnostico
  }

  export type NestedEnumTipoDiagnosticoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoDiagnostico | EnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoDiagnostico[] | ListEnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoDiagnostico[] | ListEnumTipoDiagnosticoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoDiagnosticoWithAggregatesFilter<$PrismaModel> | $Enums.TipoDiagnostico
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoDiagnosticoFilter<$PrismaModel>
    _max?: NestedEnumTipoDiagnosticoFilter<$PrismaModel>
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type MedicoCreateWithoutUsuarioInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    especialidades?: MedicoEspecialidadCreateNestedManyWithoutMedicoInput
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutMedicoInput
  }

  export type MedicoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    especialidades?: MedicoEspecialidadUncheckedCreateNestedManyWithoutMedicoInput
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutMedicoInput
  }

  export type MedicoCreateOrConnectWithoutUsuarioInput = {
    where: MedicoWhereUniqueInput
    create: XOR<MedicoCreateWithoutUsuarioInput, MedicoUncheckedCreateWithoutUsuarioInput>
  }

  export type EnfermeraCreateWithoutUsuarioInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutEnfermeraInput
  }

  export type EnfermeraUncheckedCreateWithoutUsuarioInput = {
    id?: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutEnfermeraInput
  }

  export type EnfermeraCreateOrConnectWithoutUsuarioInput = {
    where: EnfermeraWhereUniqueInput
    create: XOR<EnfermeraCreateWithoutUsuarioInput, EnfermeraUncheckedCreateWithoutUsuarioInput>
  }

  export type AuditoriaHistoriaCreateWithoutUsuarioInput = {
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
    historiaClinica?: HistoriaClinicaCreateNestedOneWithoutAuditoriasInput
    episodioClinico?: EpisodioClincoCreateNestedOneWithoutAuditoriasInput
  }

  export type AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    historiaClinicaId?: number | null
    episodioClinicoId?: number | null
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
  }

  export type AuditoriaHistoriaCreateOrConnectWithoutUsuarioInput = {
    where: AuditoriaHistoriaWhereUniqueInput
    create: XOR<AuditoriaHistoriaCreateWithoutUsuarioInput, AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput>
  }

  export type AuditoriaHistoriaCreateManyUsuarioInputEnvelope = {
    data: AuditoriaHistoriaCreateManyUsuarioInput | AuditoriaHistoriaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type MedicoUpsertWithoutUsuarioInput = {
    update: XOR<MedicoUpdateWithoutUsuarioInput, MedicoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<MedicoCreateWithoutUsuarioInput, MedicoUncheckedCreateWithoutUsuarioInput>
    where?: MedicoWhereInput
  }

  export type MedicoUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: MedicoWhereInput
    data: XOR<MedicoUpdateWithoutUsuarioInput, MedicoUncheckedUpdateWithoutUsuarioInput>
  }

  export type MedicoUpdateWithoutUsuarioInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    especialidades?: MedicoEspecialidadUpdateManyWithoutMedicoNestedInput
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutMedicoNestedInput
  }

  export type MedicoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    especialidades?: MedicoEspecialidadUncheckedUpdateManyWithoutMedicoNestedInput
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutMedicoNestedInput
  }

  export type EnfermeraUpsertWithoutUsuarioInput = {
    update: XOR<EnfermeraUpdateWithoutUsuarioInput, EnfermeraUncheckedUpdateWithoutUsuarioInput>
    create: XOR<EnfermeraCreateWithoutUsuarioInput, EnfermeraUncheckedCreateWithoutUsuarioInput>
    where?: EnfermeraWhereInput
  }

  export type EnfermeraUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: EnfermeraWhereInput
    data: XOR<EnfermeraUpdateWithoutUsuarioInput, EnfermeraUncheckedUpdateWithoutUsuarioInput>
  }

  export type EnfermeraUpdateWithoutUsuarioInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutEnfermeraNestedInput
  }

  export type EnfermeraUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutEnfermeraNestedInput
  }

  export type AuditoriaHistoriaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: AuditoriaHistoriaWhereUniqueInput
    update: XOR<AuditoriaHistoriaUpdateWithoutUsuarioInput, AuditoriaHistoriaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<AuditoriaHistoriaCreateWithoutUsuarioInput, AuditoriaHistoriaUncheckedCreateWithoutUsuarioInput>
  }

  export type AuditoriaHistoriaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: AuditoriaHistoriaWhereUniqueInput
    data: XOR<AuditoriaHistoriaUpdateWithoutUsuarioInput, AuditoriaHistoriaUncheckedUpdateWithoutUsuarioInput>
  }

  export type AuditoriaHistoriaUpdateManyWithWhereWithoutUsuarioInput = {
    where: AuditoriaHistoriaScalarWhereInput
    data: XOR<AuditoriaHistoriaUpdateManyMutationInput, AuditoriaHistoriaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type AuditoriaHistoriaScalarWhereInput = {
    AND?: AuditoriaHistoriaScalarWhereInput | AuditoriaHistoriaScalarWhereInput[]
    OR?: AuditoriaHistoriaScalarWhereInput[]
    NOT?: AuditoriaHistoriaScalarWhereInput | AuditoriaHistoriaScalarWhereInput[]
    id?: IntFilter<"AuditoriaHistoria"> | number
    historiaClinicaId?: IntNullableFilter<"AuditoriaHistoria"> | number | null
    episodioClinicoId?: IntNullableFilter<"AuditoriaHistoria"> | number | null
    usuarioId?: IntFilter<"AuditoriaHistoria"> | number
    fechaAccion?: DateTimeFilter<"AuditoriaHistoria"> | Date | string
    tipoAccion?: StringFilter<"AuditoriaHistoria"> | string
    descripcion?: StringNullableFilter<"AuditoriaHistoria"> | string | null
    tablaAfectada?: StringFilter<"AuditoriaHistoria"> | string
    idRegistro?: IntFilter<"AuditoriaHistoria"> | number
    datosAntiguos?: StringNullableFilter<"AuditoriaHistoria"> | string | null
    datosNuevos?: StringNullableFilter<"AuditoriaHistoria"> | string | null
    direccionIp?: StringFilter<"AuditoriaHistoria"> | string
  }

  export type UsuarioCreateWithoutMedicoInput = {
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso?: Date | string | null
    activo?: boolean
    fechaRegistro?: Date | string
    enfermera?: EnfermeraCreateNestedOneWithoutUsuarioInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutMedicoInput = {
    id?: number
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso?: Date | string | null
    activo?: boolean
    fechaRegistro?: Date | string
    enfermera?: EnfermeraUncheckedCreateNestedOneWithoutUsuarioInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutMedicoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutMedicoInput, UsuarioUncheckedCreateWithoutMedicoInput>
  }

  export type MedicoEspecialidadCreateWithoutMedicoInput = {
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    activo?: boolean
    especialidad: EspecialidadCreateNestedOneWithoutMedicoEspecialidadInput
  }

  export type MedicoEspecialidadUncheckedCreateWithoutMedicoInput = {
    id?: number
    especialidadId: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    activo?: boolean
  }

  export type MedicoEspecialidadCreateOrConnectWithoutMedicoInput = {
    where: MedicoEspecialidadWhereUniqueInput
    create: XOR<MedicoEspecialidadCreateWithoutMedicoInput, MedicoEspecialidadUncheckedCreateWithoutMedicoInput>
  }

  export type MedicoEspecialidadCreateManyMedicoInputEnvelope = {
    data: MedicoEspecialidadCreateManyMedicoInput | MedicoEspecialidadCreateManyMedicoInput[]
    skipDuplicates?: boolean
  }

  export type EpisodioClincoCreateWithoutMedicoInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutMedicoInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutMedicoInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutMedicoInput, EpisodioClincoUncheckedCreateWithoutMedicoInput>
  }

  export type EpisodioClincoCreateManyMedicoInputEnvelope = {
    data: EpisodioClincoCreateManyMedicoInput | EpisodioClincoCreateManyMedicoInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutMedicoInput = {
    update: XOR<UsuarioUpdateWithoutMedicoInput, UsuarioUncheckedUpdateWithoutMedicoInput>
    create: XOR<UsuarioCreateWithoutMedicoInput, UsuarioUncheckedCreateWithoutMedicoInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutMedicoInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutMedicoInput, UsuarioUncheckedUpdateWithoutMedicoInput>
  }

  export type UsuarioUpdateWithoutMedicoInput = {
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    enfermera?: EnfermeraUpdateOneWithoutUsuarioNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutMedicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    enfermera?: EnfermeraUncheckedUpdateOneWithoutUsuarioNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type MedicoEspecialidadUpsertWithWhereUniqueWithoutMedicoInput = {
    where: MedicoEspecialidadWhereUniqueInput
    update: XOR<MedicoEspecialidadUpdateWithoutMedicoInput, MedicoEspecialidadUncheckedUpdateWithoutMedicoInput>
    create: XOR<MedicoEspecialidadCreateWithoutMedicoInput, MedicoEspecialidadUncheckedCreateWithoutMedicoInput>
  }

  export type MedicoEspecialidadUpdateWithWhereUniqueWithoutMedicoInput = {
    where: MedicoEspecialidadWhereUniqueInput
    data: XOR<MedicoEspecialidadUpdateWithoutMedicoInput, MedicoEspecialidadUncheckedUpdateWithoutMedicoInput>
  }

  export type MedicoEspecialidadUpdateManyWithWhereWithoutMedicoInput = {
    where: MedicoEspecialidadScalarWhereInput
    data: XOR<MedicoEspecialidadUpdateManyMutationInput, MedicoEspecialidadUncheckedUpdateManyWithoutMedicoInput>
  }

  export type MedicoEspecialidadScalarWhereInput = {
    AND?: MedicoEspecialidadScalarWhereInput | MedicoEspecialidadScalarWhereInput[]
    OR?: MedicoEspecialidadScalarWhereInput[]
    NOT?: MedicoEspecialidadScalarWhereInput | MedicoEspecialidadScalarWhereInput[]
    id?: IntFilter<"MedicoEspecialidad"> | number
    medicoId?: IntFilter<"MedicoEspecialidad"> | number
    especialidadId?: IntFilter<"MedicoEspecialidad"> | number
    fechaInicio?: DateTimeFilter<"MedicoEspecialidad"> | Date | string
    fechaFin?: DateTimeNullableFilter<"MedicoEspecialidad"> | Date | string | null
    activo?: BoolFilter<"MedicoEspecialidad"> | boolean
  }

  export type EpisodioClincoUpsertWithWhereUniqueWithoutMedicoInput = {
    where: EpisodioClincoWhereUniqueInput
    update: XOR<EpisodioClincoUpdateWithoutMedicoInput, EpisodioClincoUncheckedUpdateWithoutMedicoInput>
    create: XOR<EpisodioClincoCreateWithoutMedicoInput, EpisodioClincoUncheckedCreateWithoutMedicoInput>
  }

  export type EpisodioClincoUpdateWithWhereUniqueWithoutMedicoInput = {
    where: EpisodioClincoWhereUniqueInput
    data: XOR<EpisodioClincoUpdateWithoutMedicoInput, EpisodioClincoUncheckedUpdateWithoutMedicoInput>
  }

  export type EpisodioClincoUpdateManyWithWhereWithoutMedicoInput = {
    where: EpisodioClincoScalarWhereInput
    data: XOR<EpisodioClincoUpdateManyMutationInput, EpisodioClincoUncheckedUpdateManyWithoutMedicoInput>
  }

  export type EpisodioClincoScalarWhereInput = {
    AND?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
    OR?: EpisodioClincoScalarWhereInput[]
    NOT?: EpisodioClincoScalarWhereInput | EpisodioClincoScalarWhereInput[]
    id?: IntFilter<"EpisodioClinco"> | number
    historiaClinicaId?: IntFilter<"EpisodioClinco"> | number
    especialidadId?: IntFilter<"EpisodioClinco"> | number
    medicoId?: IntNullableFilter<"EpisodioClinco"> | number | null
    enfermeraId?: IntFilter<"EpisodioClinco"> | number
    consultorioId?: IntFilter<"EpisodioClinco"> | number
    fechaEpisodio?: DateTimeFilter<"EpisodioClinco"> | Date | string
    motivoConsulta?: StringFilter<"EpisodioClinco"> | string
    sintomas?: StringNullableFilter<"EpisodioClinco"> | string | null
    tratamiento?: StringNullableFilter<"EpisodioClinco"> | string | null
    observaciones?: StringNullableFilter<"EpisodioClinco"> | string | null
  }

  export type UsuarioCreateWithoutEnfermeraInput = {
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso?: Date | string | null
    activo?: boolean
    fechaRegistro?: Date | string
    medico?: MedicoCreateNestedOneWithoutUsuarioInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutEnfermeraInput = {
    id?: number
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso?: Date | string | null
    activo?: boolean
    fechaRegistro?: Date | string
    medico?: MedicoUncheckedCreateNestedOneWithoutUsuarioInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutEnfermeraInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutEnfermeraInput, UsuarioUncheckedCreateWithoutEnfermeraInput>
  }

  export type EpisodioClincoCreateWithoutEnfermeraInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutEnfermeraInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutEnfermeraInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutEnfermeraInput, EpisodioClincoUncheckedCreateWithoutEnfermeraInput>
  }

  export type EpisodioClincoCreateManyEnfermeraInputEnvelope = {
    data: EpisodioClincoCreateManyEnfermeraInput | EpisodioClincoCreateManyEnfermeraInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutEnfermeraInput = {
    update: XOR<UsuarioUpdateWithoutEnfermeraInput, UsuarioUncheckedUpdateWithoutEnfermeraInput>
    create: XOR<UsuarioCreateWithoutEnfermeraInput, UsuarioUncheckedCreateWithoutEnfermeraInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutEnfermeraInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutEnfermeraInput, UsuarioUncheckedUpdateWithoutEnfermeraInput>
  }

  export type UsuarioUpdateWithoutEnfermeraInput = {
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    medico?: MedicoUpdateOneWithoutUsuarioNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutEnfermeraInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    medico?: MedicoUncheckedUpdateOneWithoutUsuarioNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type EpisodioClincoUpsertWithWhereUniqueWithoutEnfermeraInput = {
    where: EpisodioClincoWhereUniqueInput
    update: XOR<EpisodioClincoUpdateWithoutEnfermeraInput, EpisodioClincoUncheckedUpdateWithoutEnfermeraInput>
    create: XOR<EpisodioClincoCreateWithoutEnfermeraInput, EpisodioClincoUncheckedCreateWithoutEnfermeraInput>
  }

  export type EpisodioClincoUpdateWithWhereUniqueWithoutEnfermeraInput = {
    where: EpisodioClincoWhereUniqueInput
    data: XOR<EpisodioClincoUpdateWithoutEnfermeraInput, EpisodioClincoUncheckedUpdateWithoutEnfermeraInput>
  }

  export type EpisodioClincoUpdateManyWithWhereWithoutEnfermeraInput = {
    where: EpisodioClincoScalarWhereInput
    data: XOR<EpisodioClincoUpdateManyMutationInput, EpisodioClincoUncheckedUpdateManyWithoutEnfermeraInput>
  }

  export type ProgramaAcademicoCreateWithoutFacultadInput = {
    nombre: string
    codigo: string
    descripcion?: string | null
    nivel: string
    activo?: boolean
    pacientes?: PacienteCreateNestedManyWithoutProgramaAcademicoInput
  }

  export type ProgramaAcademicoUncheckedCreateWithoutFacultadInput = {
    id?: number
    nombre: string
    codigo: string
    descripcion?: string | null
    nivel: string
    activo?: boolean
    pacientes?: PacienteUncheckedCreateNestedManyWithoutProgramaAcademicoInput
  }

  export type ProgramaAcademicoCreateOrConnectWithoutFacultadInput = {
    where: ProgramaAcademicoWhereUniqueInput
    create: XOR<ProgramaAcademicoCreateWithoutFacultadInput, ProgramaAcademicoUncheckedCreateWithoutFacultadInput>
  }

  export type ProgramaAcademicoCreateManyFacultadInputEnvelope = {
    data: ProgramaAcademicoCreateManyFacultadInput | ProgramaAcademicoCreateManyFacultadInput[]
    skipDuplicates?: boolean
  }

  export type ProgramaAcademicoUpsertWithWhereUniqueWithoutFacultadInput = {
    where: ProgramaAcademicoWhereUniqueInput
    update: XOR<ProgramaAcademicoUpdateWithoutFacultadInput, ProgramaAcademicoUncheckedUpdateWithoutFacultadInput>
    create: XOR<ProgramaAcademicoCreateWithoutFacultadInput, ProgramaAcademicoUncheckedCreateWithoutFacultadInput>
  }

  export type ProgramaAcademicoUpdateWithWhereUniqueWithoutFacultadInput = {
    where: ProgramaAcademicoWhereUniqueInput
    data: XOR<ProgramaAcademicoUpdateWithoutFacultadInput, ProgramaAcademicoUncheckedUpdateWithoutFacultadInput>
  }

  export type ProgramaAcademicoUpdateManyWithWhereWithoutFacultadInput = {
    where: ProgramaAcademicoScalarWhereInput
    data: XOR<ProgramaAcademicoUpdateManyMutationInput, ProgramaAcademicoUncheckedUpdateManyWithoutFacultadInput>
  }

  export type ProgramaAcademicoScalarWhereInput = {
    AND?: ProgramaAcademicoScalarWhereInput | ProgramaAcademicoScalarWhereInput[]
    OR?: ProgramaAcademicoScalarWhereInput[]
    NOT?: ProgramaAcademicoScalarWhereInput | ProgramaAcademicoScalarWhereInput[]
    id?: IntFilter<"ProgramaAcademico"> | number
    facultadId?: IntFilter<"ProgramaAcademico"> | number
    nombre?: StringFilter<"ProgramaAcademico"> | string
    codigo?: StringFilter<"ProgramaAcademico"> | string
    descripcion?: StringNullableFilter<"ProgramaAcademico"> | string | null
    nivel?: StringFilter<"ProgramaAcademico"> | string
    activo?: BoolFilter<"ProgramaAcademico"> | boolean
  }

  export type FacultadCreateWithoutProgramasAcademicosInput = {
    nombre: string
    codigo: string
    descripcion?: string | null
    activo?: boolean
  }

  export type FacultadUncheckedCreateWithoutProgramasAcademicosInput = {
    id?: number
    nombre: string
    codigo: string
    descripcion?: string | null
    activo?: boolean
  }

  export type FacultadCreateOrConnectWithoutProgramasAcademicosInput = {
    where: FacultadWhereUniqueInput
    create: XOR<FacultadCreateWithoutProgramasAcademicosInput, FacultadUncheckedCreateWithoutProgramasAcademicosInput>
  }

  export type PacienteCreateWithoutProgramaAcademicoInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    contactosEmergencia?: ContactoEmergenciaCreateNestedManyWithoutPacienteInput
    historiasClinicas?: HistoriaClinicaCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateWithoutProgramaAcademicoInput = {
    id?: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    contactosEmergencia?: ContactoEmergenciaUncheckedCreateNestedManyWithoutPacienteInput
    historiasClinicas?: HistoriaClinicaUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutProgramaAcademicoInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutProgramaAcademicoInput, PacienteUncheckedCreateWithoutProgramaAcademicoInput>
  }

  export type PacienteCreateManyProgramaAcademicoInputEnvelope = {
    data: PacienteCreateManyProgramaAcademicoInput | PacienteCreateManyProgramaAcademicoInput[]
    skipDuplicates?: boolean
  }

  export type FacultadUpsertWithoutProgramasAcademicosInput = {
    update: XOR<FacultadUpdateWithoutProgramasAcademicosInput, FacultadUncheckedUpdateWithoutProgramasAcademicosInput>
    create: XOR<FacultadCreateWithoutProgramasAcademicosInput, FacultadUncheckedCreateWithoutProgramasAcademicosInput>
    where?: FacultadWhereInput
  }

  export type FacultadUpdateToOneWithWhereWithoutProgramasAcademicosInput = {
    where?: FacultadWhereInput
    data: XOR<FacultadUpdateWithoutProgramasAcademicosInput, FacultadUncheckedUpdateWithoutProgramasAcademicosInput>
  }

  export type FacultadUpdateWithoutProgramasAcademicosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FacultadUncheckedUpdateWithoutProgramasAcademicosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PacienteUpsertWithWhereUniqueWithoutProgramaAcademicoInput = {
    where: PacienteWhereUniqueInput
    update: XOR<PacienteUpdateWithoutProgramaAcademicoInput, PacienteUncheckedUpdateWithoutProgramaAcademicoInput>
    create: XOR<PacienteCreateWithoutProgramaAcademicoInput, PacienteUncheckedCreateWithoutProgramaAcademicoInput>
  }

  export type PacienteUpdateWithWhereUniqueWithoutProgramaAcademicoInput = {
    where: PacienteWhereUniqueInput
    data: XOR<PacienteUpdateWithoutProgramaAcademicoInput, PacienteUncheckedUpdateWithoutProgramaAcademicoInput>
  }

  export type PacienteUpdateManyWithWhereWithoutProgramaAcademicoInput = {
    where: PacienteScalarWhereInput
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyWithoutProgramaAcademicoInput>
  }

  export type PacienteScalarWhereInput = {
    AND?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
    OR?: PacienteScalarWhereInput[]
    NOT?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
    id?: IntFilter<"Paciente"> | number
    tipoDocumento?: StringFilter<"Paciente"> | string
    numDocumento?: StringFilter<"Paciente"> | string
    nombres?: StringFilter<"Paciente"> | string
    apellidos?: StringFilter<"Paciente"> | string
    fechaNacimiento?: DateTimeFilter<"Paciente"> | Date | string
    genero?: StringFilter<"Paciente"> | string
    direccion?: StringNullableFilter<"Paciente"> | string | null
    telefono?: StringNullableFilter<"Paciente"> | string | null
    correo?: StringNullableFilter<"Paciente"> | string | null
    grupoSanguineo?: StringNullableFilter<"Paciente"> | string | null
    alergias?: StringNullableFilter<"Paciente"> | string | null
    antecedentesFamiliares?: StringNullableFilter<"Paciente"> | string | null
    estadoCivil?: StringNullableFilter<"Paciente"> | string | null
    fechaRegistro?: DateTimeFilter<"Paciente"> | Date | string
    activo?: BoolFilter<"Paciente"> | boolean
    programaAcademicoId?: IntFilter<"Paciente"> | number
  }

  export type ConsultorioCreateWithoutSedeInput = {
    nombre: string
    codigo: string
    tipo: string
    activo?: boolean
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateWithoutSedeInput = {
    id?: number
    nombre: string
    codigo: string
    tipo: string
    activo?: boolean
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioCreateOrConnectWithoutSedeInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutSedeInput, ConsultorioUncheckedCreateWithoutSedeInput>
  }

  export type ConsultorioCreateManySedeInputEnvelope = {
    data: ConsultorioCreateManySedeInput | ConsultorioCreateManySedeInput[]
    skipDuplicates?: boolean
  }

  export type ConsultorioUpsertWithWhereUniqueWithoutSedeInput = {
    where: ConsultorioWhereUniqueInput
    update: XOR<ConsultorioUpdateWithoutSedeInput, ConsultorioUncheckedUpdateWithoutSedeInput>
    create: XOR<ConsultorioCreateWithoutSedeInput, ConsultorioUncheckedCreateWithoutSedeInput>
  }

  export type ConsultorioUpdateWithWhereUniqueWithoutSedeInput = {
    where: ConsultorioWhereUniqueInput
    data: XOR<ConsultorioUpdateWithoutSedeInput, ConsultorioUncheckedUpdateWithoutSedeInput>
  }

  export type ConsultorioUpdateManyWithWhereWithoutSedeInput = {
    where: ConsultorioScalarWhereInput
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyWithoutSedeInput>
  }

  export type ConsultorioScalarWhereInput = {
    AND?: ConsultorioScalarWhereInput | ConsultorioScalarWhereInput[]
    OR?: ConsultorioScalarWhereInput[]
    NOT?: ConsultorioScalarWhereInput | ConsultorioScalarWhereInput[]
    id?: IntFilter<"Consultorio"> | number
    sedeId?: IntFilter<"Consultorio"> | number
    nombre?: StringFilter<"Consultorio"> | string
    codigo?: StringFilter<"Consultorio"> | string
    tipo?: StringFilter<"Consultorio"> | string
    activo?: BoolFilter<"Consultorio"> | boolean
  }

  export type SedeCreateWithoutConsultoriosInput = {
    nombre: string
    direccion: string
    telefono?: string | null
    horarioAtencion?: string | null
    activo?: boolean
  }

  export type SedeUncheckedCreateWithoutConsultoriosInput = {
    id?: number
    nombre: string
    direccion: string
    telefono?: string | null
    horarioAtencion?: string | null
    activo?: boolean
  }

  export type SedeCreateOrConnectWithoutConsultoriosInput = {
    where: SedeWhereUniqueInput
    create: XOR<SedeCreateWithoutConsultoriosInput, SedeUncheckedCreateWithoutConsultoriosInput>
  }

  export type EpisodioClincoCreateWithoutConsultorioInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutConsultorioInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutConsultorioInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutConsultorioInput, EpisodioClincoUncheckedCreateWithoutConsultorioInput>
  }

  export type EpisodioClincoCreateManyConsultorioInputEnvelope = {
    data: EpisodioClincoCreateManyConsultorioInput | EpisodioClincoCreateManyConsultorioInput[]
    skipDuplicates?: boolean
  }

  export type SedeUpsertWithoutConsultoriosInput = {
    update: XOR<SedeUpdateWithoutConsultoriosInput, SedeUncheckedUpdateWithoutConsultoriosInput>
    create: XOR<SedeCreateWithoutConsultoriosInput, SedeUncheckedCreateWithoutConsultoriosInput>
    where?: SedeWhereInput
  }

  export type SedeUpdateToOneWithWhereWithoutConsultoriosInput = {
    where?: SedeWhereInput
    data: XOR<SedeUpdateWithoutConsultoriosInput, SedeUncheckedUpdateWithoutConsultoriosInput>
  }

  export type SedeUpdateWithoutConsultoriosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    horarioAtencion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SedeUncheckedUpdateWithoutConsultoriosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    horarioAtencion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EpisodioClincoUpsertWithWhereUniqueWithoutConsultorioInput = {
    where: EpisodioClincoWhereUniqueInput
    update: XOR<EpisodioClincoUpdateWithoutConsultorioInput, EpisodioClincoUncheckedUpdateWithoutConsultorioInput>
    create: XOR<EpisodioClincoCreateWithoutConsultorioInput, EpisodioClincoUncheckedCreateWithoutConsultorioInput>
  }

  export type EpisodioClincoUpdateWithWhereUniqueWithoutConsultorioInput = {
    where: EpisodioClincoWhereUniqueInput
    data: XOR<EpisodioClincoUpdateWithoutConsultorioInput, EpisodioClincoUncheckedUpdateWithoutConsultorioInput>
  }

  export type EpisodioClincoUpdateManyWithWhereWithoutConsultorioInput = {
    where: EpisodioClincoScalarWhereInput
    data: XOR<EpisodioClincoUpdateManyMutationInput, EpisodioClincoUncheckedUpdateManyWithoutConsultorioInput>
  }

  export type MedicoEspecialidadCreateWithoutEspecialidadInput = {
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    activo?: boolean
    medico: MedicoCreateNestedOneWithoutEspecialidadesInput
  }

  export type MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput = {
    id?: number
    medicoId: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    activo?: boolean
  }

  export type MedicoEspecialidadCreateOrConnectWithoutEspecialidadInput = {
    where: MedicoEspecialidadWhereUniqueInput
    create: XOR<MedicoEspecialidadCreateWithoutEspecialidadInput, MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput>
  }

  export type MedicoEspecialidadCreateManyEspecialidadInputEnvelope = {
    data: MedicoEspecialidadCreateManyEspecialidadInput | MedicoEspecialidadCreateManyEspecialidadInput[]
    skipDuplicates?: boolean
  }

  export type EpisodioClincoCreateWithoutEspecialidadInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutEspecialidadInput = {
    id?: number
    historiaClinicaId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutEspecialidadInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutEspecialidadInput, EpisodioClincoUncheckedCreateWithoutEspecialidadInput>
  }

  export type EpisodioClincoCreateManyEspecialidadInputEnvelope = {
    data: EpisodioClincoCreateManyEspecialidadInput | EpisodioClincoCreateManyEspecialidadInput[]
    skipDuplicates?: boolean
  }

  export type MedicoEspecialidadUpsertWithWhereUniqueWithoutEspecialidadInput = {
    where: MedicoEspecialidadWhereUniqueInput
    update: XOR<MedicoEspecialidadUpdateWithoutEspecialidadInput, MedicoEspecialidadUncheckedUpdateWithoutEspecialidadInput>
    create: XOR<MedicoEspecialidadCreateWithoutEspecialidadInput, MedicoEspecialidadUncheckedCreateWithoutEspecialidadInput>
  }

  export type MedicoEspecialidadUpdateWithWhereUniqueWithoutEspecialidadInput = {
    where: MedicoEspecialidadWhereUniqueInput
    data: XOR<MedicoEspecialidadUpdateWithoutEspecialidadInput, MedicoEspecialidadUncheckedUpdateWithoutEspecialidadInput>
  }

  export type MedicoEspecialidadUpdateManyWithWhereWithoutEspecialidadInput = {
    where: MedicoEspecialidadScalarWhereInput
    data: XOR<MedicoEspecialidadUpdateManyMutationInput, MedicoEspecialidadUncheckedUpdateManyWithoutEspecialidadInput>
  }

  export type EpisodioClincoUpsertWithWhereUniqueWithoutEspecialidadInput = {
    where: EpisodioClincoWhereUniqueInput
    update: XOR<EpisodioClincoUpdateWithoutEspecialidadInput, EpisodioClincoUncheckedUpdateWithoutEspecialidadInput>
    create: XOR<EpisodioClincoCreateWithoutEspecialidadInput, EpisodioClincoUncheckedCreateWithoutEspecialidadInput>
  }

  export type EpisodioClincoUpdateWithWhereUniqueWithoutEspecialidadInput = {
    where: EpisodioClincoWhereUniqueInput
    data: XOR<EpisodioClincoUpdateWithoutEspecialidadInput, EpisodioClincoUncheckedUpdateWithoutEspecialidadInput>
  }

  export type EpisodioClincoUpdateManyWithWhereWithoutEspecialidadInput = {
    where: EpisodioClincoScalarWhereInput
    data: XOR<EpisodioClincoUpdateManyMutationInput, EpisodioClincoUncheckedUpdateManyWithoutEspecialidadInput>
  }

  export type MedicoCreateWithoutEspecialidadesInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    usuario: UsuarioCreateNestedOneWithoutMedicoInput
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutMedicoInput
  }

  export type MedicoUncheckedCreateWithoutEspecialidadesInput = {
    id?: number
    usuarioId: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutMedicoInput
  }

  export type MedicoCreateOrConnectWithoutEspecialidadesInput = {
    where: MedicoWhereUniqueInput
    create: XOR<MedicoCreateWithoutEspecialidadesInput, MedicoUncheckedCreateWithoutEspecialidadesInput>
  }

  export type EspecialidadCreateWithoutMedicoEspecialidadInput = {
    nombre: string
    descripcion?: string | null
    codigo: string
    activo?: boolean
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutEspecialidadInput
  }

  export type EspecialidadUncheckedCreateWithoutMedicoEspecialidadInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    codigo: string
    activo?: boolean
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutEspecialidadInput
  }

  export type EspecialidadCreateOrConnectWithoutMedicoEspecialidadInput = {
    where: EspecialidadWhereUniqueInput
    create: XOR<EspecialidadCreateWithoutMedicoEspecialidadInput, EspecialidadUncheckedCreateWithoutMedicoEspecialidadInput>
  }

  export type MedicoUpsertWithoutEspecialidadesInput = {
    update: XOR<MedicoUpdateWithoutEspecialidadesInput, MedicoUncheckedUpdateWithoutEspecialidadesInput>
    create: XOR<MedicoCreateWithoutEspecialidadesInput, MedicoUncheckedCreateWithoutEspecialidadesInput>
    where?: MedicoWhereInput
  }

  export type MedicoUpdateToOneWithWhereWithoutEspecialidadesInput = {
    where?: MedicoWhereInput
    data: XOR<MedicoUpdateWithoutEspecialidadesInput, MedicoUncheckedUpdateWithoutEspecialidadesInput>
  }

  export type MedicoUpdateWithoutEspecialidadesInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutMedicoNestedInput
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutMedicoNestedInput
  }

  export type MedicoUncheckedUpdateWithoutEspecialidadesInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutMedicoNestedInput
  }

  export type EspecialidadUpsertWithoutMedicoEspecialidadInput = {
    update: XOR<EspecialidadUpdateWithoutMedicoEspecialidadInput, EspecialidadUncheckedUpdateWithoutMedicoEspecialidadInput>
    create: XOR<EspecialidadCreateWithoutMedicoEspecialidadInput, EspecialidadUncheckedCreateWithoutMedicoEspecialidadInput>
    where?: EspecialidadWhereInput
  }

  export type EspecialidadUpdateToOneWithWhereWithoutMedicoEspecialidadInput = {
    where?: EspecialidadWhereInput
    data: XOR<EspecialidadUpdateWithoutMedicoEspecialidadInput, EspecialidadUncheckedUpdateWithoutMedicoEspecialidadInput>
  }

  export type EspecialidadUpdateWithoutMedicoEspecialidadInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutEspecialidadNestedInput
  }

  export type EspecialidadUncheckedUpdateWithoutMedicoEspecialidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutEspecialidadNestedInput
  }

  export type ProgramaAcademicoCreateWithoutPacientesInput = {
    nombre: string
    codigo: string
    descripcion?: string | null
    nivel: string
    activo?: boolean
    facultad: FacultadCreateNestedOneWithoutProgramasAcademicosInput
  }

  export type ProgramaAcademicoUncheckedCreateWithoutPacientesInput = {
    id?: number
    facultadId: number
    nombre: string
    codigo: string
    descripcion?: string | null
    nivel: string
    activo?: boolean
  }

  export type ProgramaAcademicoCreateOrConnectWithoutPacientesInput = {
    where: ProgramaAcademicoWhereUniqueInput
    create: XOR<ProgramaAcademicoCreateWithoutPacientesInput, ProgramaAcademicoUncheckedCreateWithoutPacientesInput>
  }

  export type ContactoEmergenciaCreateWithoutPacienteInput = {
    nombres: string
    apellidos: string
    parentesco: string
    telefonoPrincipal: string
    telefonoSecundario?: string | null
    direccion?: string | null
    activo?: boolean
  }

  export type ContactoEmergenciaUncheckedCreateWithoutPacienteInput = {
    id?: number
    nombres: string
    apellidos: string
    parentesco: string
    telefonoPrincipal: string
    telefonoSecundario?: string | null
    direccion?: string | null
    activo?: boolean
  }

  export type ContactoEmergenciaCreateOrConnectWithoutPacienteInput = {
    where: ContactoEmergenciaWhereUniqueInput
    create: XOR<ContactoEmergenciaCreateWithoutPacienteInput, ContactoEmergenciaUncheckedCreateWithoutPacienteInput>
  }

  export type ContactoEmergenciaCreateManyPacienteInputEnvelope = {
    data: ContactoEmergenciaCreateManyPacienteInput | ContactoEmergenciaCreateManyPacienteInput[]
    skipDuplicates?: boolean
  }

  export type HistoriaClinicaCreateWithoutPacienteInput = {
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutHistoriaClinicaInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutHistoriaClinicaInput
  }

  export type HistoriaClinicaUncheckedCreateWithoutPacienteInput = {
    id?: number
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutHistoriaClinicaInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutHistoriaClinicaInput
  }

  export type HistoriaClinicaCreateOrConnectWithoutPacienteInput = {
    where: HistoriaClinicaWhereUniqueInput
    create: XOR<HistoriaClinicaCreateWithoutPacienteInput, HistoriaClinicaUncheckedCreateWithoutPacienteInput>
  }

  export type HistoriaClinicaCreateManyPacienteInputEnvelope = {
    data: HistoriaClinicaCreateManyPacienteInput | HistoriaClinicaCreateManyPacienteInput[]
    skipDuplicates?: boolean
  }

  export type ProgramaAcademicoUpsertWithoutPacientesInput = {
    update: XOR<ProgramaAcademicoUpdateWithoutPacientesInput, ProgramaAcademicoUncheckedUpdateWithoutPacientesInput>
    create: XOR<ProgramaAcademicoCreateWithoutPacientesInput, ProgramaAcademicoUncheckedCreateWithoutPacientesInput>
    where?: ProgramaAcademicoWhereInput
  }

  export type ProgramaAcademicoUpdateToOneWithWhereWithoutPacientesInput = {
    where?: ProgramaAcademicoWhereInput
    data: XOR<ProgramaAcademicoUpdateWithoutPacientesInput, ProgramaAcademicoUncheckedUpdateWithoutPacientesInput>
  }

  export type ProgramaAcademicoUpdateWithoutPacientesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    nivel?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    facultad?: FacultadUpdateOneRequiredWithoutProgramasAcademicosNestedInput
  }

  export type ProgramaAcademicoUncheckedUpdateWithoutPacientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    facultadId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    nivel?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactoEmergenciaUpsertWithWhereUniqueWithoutPacienteInput = {
    where: ContactoEmergenciaWhereUniqueInput
    update: XOR<ContactoEmergenciaUpdateWithoutPacienteInput, ContactoEmergenciaUncheckedUpdateWithoutPacienteInput>
    create: XOR<ContactoEmergenciaCreateWithoutPacienteInput, ContactoEmergenciaUncheckedCreateWithoutPacienteInput>
  }

  export type ContactoEmergenciaUpdateWithWhereUniqueWithoutPacienteInput = {
    where: ContactoEmergenciaWhereUniqueInput
    data: XOR<ContactoEmergenciaUpdateWithoutPacienteInput, ContactoEmergenciaUncheckedUpdateWithoutPacienteInput>
  }

  export type ContactoEmergenciaUpdateManyWithWhereWithoutPacienteInput = {
    where: ContactoEmergenciaScalarWhereInput
    data: XOR<ContactoEmergenciaUpdateManyMutationInput, ContactoEmergenciaUncheckedUpdateManyWithoutPacienteInput>
  }

  export type ContactoEmergenciaScalarWhereInput = {
    AND?: ContactoEmergenciaScalarWhereInput | ContactoEmergenciaScalarWhereInput[]
    OR?: ContactoEmergenciaScalarWhereInput[]
    NOT?: ContactoEmergenciaScalarWhereInput | ContactoEmergenciaScalarWhereInput[]
    id?: IntFilter<"ContactoEmergencia"> | number
    pacienteId?: IntFilter<"ContactoEmergencia"> | number
    nombres?: StringFilter<"ContactoEmergencia"> | string
    apellidos?: StringFilter<"ContactoEmergencia"> | string
    parentesco?: StringFilter<"ContactoEmergencia"> | string
    telefonoPrincipal?: StringFilter<"ContactoEmergencia"> | string
    telefonoSecundario?: StringNullableFilter<"ContactoEmergencia"> | string | null
    direccion?: StringNullableFilter<"ContactoEmergencia"> | string | null
    activo?: BoolFilter<"ContactoEmergencia"> | boolean
  }

  export type HistoriaClinicaUpsertWithWhereUniqueWithoutPacienteInput = {
    where: HistoriaClinicaWhereUniqueInput
    update: XOR<HistoriaClinicaUpdateWithoutPacienteInput, HistoriaClinicaUncheckedUpdateWithoutPacienteInput>
    create: XOR<HistoriaClinicaCreateWithoutPacienteInput, HistoriaClinicaUncheckedCreateWithoutPacienteInput>
  }

  export type HistoriaClinicaUpdateWithWhereUniqueWithoutPacienteInput = {
    where: HistoriaClinicaWhereUniqueInput
    data: XOR<HistoriaClinicaUpdateWithoutPacienteInput, HistoriaClinicaUncheckedUpdateWithoutPacienteInput>
  }

  export type HistoriaClinicaUpdateManyWithWhereWithoutPacienteInput = {
    where: HistoriaClinicaScalarWhereInput
    data: XOR<HistoriaClinicaUpdateManyMutationInput, HistoriaClinicaUncheckedUpdateManyWithoutPacienteInput>
  }

  export type HistoriaClinicaScalarWhereInput = {
    AND?: HistoriaClinicaScalarWhereInput | HistoriaClinicaScalarWhereInput[]
    OR?: HistoriaClinicaScalarWhereInput[]
    NOT?: HistoriaClinicaScalarWhereInput | HistoriaClinicaScalarWhereInput[]
    id?: IntFilter<"HistoriaClinica"> | number
    pacienteId?: IntFilter<"HistoriaClinica"> | number
    fechaApertura?: DateTimeFilter<"HistoriaClinica"> | Date | string
    estado?: StringFilter<"HistoriaClinica"> | string
    observacionesGenerales?: StringNullableFilter<"HistoriaClinica"> | string | null
    ultimaActualizacion?: DateTimeFilter<"HistoriaClinica"> | Date | string
  }

  export type PacienteCreateWithoutContactosEmergenciaInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    programaAcademico: ProgramaAcademicoCreateNestedOneWithoutPacientesInput
    historiasClinicas?: HistoriaClinicaCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateWithoutContactosEmergenciaInput = {
    id?: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    programaAcademicoId: number
    historiasClinicas?: HistoriaClinicaUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutContactosEmergenciaInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutContactosEmergenciaInput, PacienteUncheckedCreateWithoutContactosEmergenciaInput>
  }

  export type PacienteUpsertWithoutContactosEmergenciaInput = {
    update: XOR<PacienteUpdateWithoutContactosEmergenciaInput, PacienteUncheckedUpdateWithoutContactosEmergenciaInput>
    create: XOR<PacienteCreateWithoutContactosEmergenciaInput, PacienteUncheckedCreateWithoutContactosEmergenciaInput>
    where?: PacienteWhereInput
  }

  export type PacienteUpdateToOneWithWhereWithoutContactosEmergenciaInput = {
    where?: PacienteWhereInput
    data: XOR<PacienteUpdateWithoutContactosEmergenciaInput, PacienteUncheckedUpdateWithoutContactosEmergenciaInput>
  }

  export type PacienteUpdateWithoutContactosEmergenciaInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    programaAcademico?: ProgramaAcademicoUpdateOneRequiredWithoutPacientesNestedInput
    historiasClinicas?: HistoriaClinicaUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateWithoutContactosEmergenciaInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    programaAcademicoId?: IntFieldUpdateOperationsInput | number
    historiasClinicas?: HistoriaClinicaUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteCreateWithoutHistoriasClinicasInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    programaAcademico: ProgramaAcademicoCreateNestedOneWithoutPacientesInput
    contactosEmergencia?: ContactoEmergenciaCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUncheckedCreateWithoutHistoriasClinicasInput = {
    id?: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    programaAcademicoId: number
    contactosEmergencia?: ContactoEmergenciaUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutHistoriasClinicasInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutHistoriasClinicasInput, PacienteUncheckedCreateWithoutHistoriasClinicasInput>
  }

  export type EpisodioClincoCreateWithoutHistoriaClinicaInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput = {
    id?: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutHistoriaClinicaInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutHistoriaClinicaInput, EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput>
  }

  export type EpisodioClincoCreateManyHistoriaClinicaInputEnvelope = {
    data: EpisodioClincoCreateManyHistoriaClinicaInput | EpisodioClincoCreateManyHistoriaClinicaInput[]
    skipDuplicates?: boolean
  }

  export type AuditoriaHistoriaCreateWithoutHistoriaClinicaInput = {
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
    episodioClinico?: EpisodioClincoCreateNestedOneWithoutAuditoriasInput
    usuario: UsuarioCreateNestedOneWithoutAuditoriasInput
  }

  export type AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput = {
    id?: number
    episodioClinicoId?: number | null
    usuarioId: number
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
  }

  export type AuditoriaHistoriaCreateOrConnectWithoutHistoriaClinicaInput = {
    where: AuditoriaHistoriaWhereUniqueInput
    create: XOR<AuditoriaHistoriaCreateWithoutHistoriaClinicaInput, AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput>
  }

  export type AuditoriaHistoriaCreateManyHistoriaClinicaInputEnvelope = {
    data: AuditoriaHistoriaCreateManyHistoriaClinicaInput | AuditoriaHistoriaCreateManyHistoriaClinicaInput[]
    skipDuplicates?: boolean
  }

  export type PacienteUpsertWithoutHistoriasClinicasInput = {
    update: XOR<PacienteUpdateWithoutHistoriasClinicasInput, PacienteUncheckedUpdateWithoutHistoriasClinicasInput>
    create: XOR<PacienteCreateWithoutHistoriasClinicasInput, PacienteUncheckedCreateWithoutHistoriasClinicasInput>
    where?: PacienteWhereInput
  }

  export type PacienteUpdateToOneWithWhereWithoutHistoriasClinicasInput = {
    where?: PacienteWhereInput
    data: XOR<PacienteUpdateWithoutHistoriasClinicasInput, PacienteUncheckedUpdateWithoutHistoriasClinicasInput>
  }

  export type PacienteUpdateWithoutHistoriasClinicasInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    programaAcademico?: ProgramaAcademicoUpdateOneRequiredWithoutPacientesNestedInput
    contactosEmergencia?: ContactoEmergenciaUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateWithoutHistoriasClinicasInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    programaAcademicoId?: IntFieldUpdateOperationsInput | number
    contactosEmergencia?: ContactoEmergenciaUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type EpisodioClincoUpsertWithWhereUniqueWithoutHistoriaClinicaInput = {
    where: EpisodioClincoWhereUniqueInput
    update: XOR<EpisodioClincoUpdateWithoutHistoriaClinicaInput, EpisodioClincoUncheckedUpdateWithoutHistoriaClinicaInput>
    create: XOR<EpisodioClincoCreateWithoutHistoriaClinicaInput, EpisodioClincoUncheckedCreateWithoutHistoriaClinicaInput>
  }

  export type EpisodioClincoUpdateWithWhereUniqueWithoutHistoriaClinicaInput = {
    where: EpisodioClincoWhereUniqueInput
    data: XOR<EpisodioClincoUpdateWithoutHistoriaClinicaInput, EpisodioClincoUncheckedUpdateWithoutHistoriaClinicaInput>
  }

  export type EpisodioClincoUpdateManyWithWhereWithoutHistoriaClinicaInput = {
    where: EpisodioClincoScalarWhereInput
    data: XOR<EpisodioClincoUpdateManyMutationInput, EpisodioClincoUncheckedUpdateManyWithoutHistoriaClinicaInput>
  }

  export type AuditoriaHistoriaUpsertWithWhereUniqueWithoutHistoriaClinicaInput = {
    where: AuditoriaHistoriaWhereUniqueInput
    update: XOR<AuditoriaHistoriaUpdateWithoutHistoriaClinicaInput, AuditoriaHistoriaUncheckedUpdateWithoutHistoriaClinicaInput>
    create: XOR<AuditoriaHistoriaCreateWithoutHistoriaClinicaInput, AuditoriaHistoriaUncheckedCreateWithoutHistoriaClinicaInput>
  }

  export type AuditoriaHistoriaUpdateWithWhereUniqueWithoutHistoriaClinicaInput = {
    where: AuditoriaHistoriaWhereUniqueInput
    data: XOR<AuditoriaHistoriaUpdateWithoutHistoriaClinicaInput, AuditoriaHistoriaUncheckedUpdateWithoutHistoriaClinicaInput>
  }

  export type AuditoriaHistoriaUpdateManyWithWhereWithoutHistoriaClinicaInput = {
    where: AuditoriaHistoriaScalarWhereInput
    data: XOR<AuditoriaHistoriaUpdateManyMutationInput, AuditoriaHistoriaUncheckedUpdateManyWithoutHistoriaClinicaInput>
  }

  export type HistoriaClinicaCreateWithoutEpisodiosClinicosInput = {
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
    paciente: PacienteCreateNestedOneWithoutHistoriasClinicasInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutHistoriaClinicaInput
  }

  export type HistoriaClinicaUncheckedCreateWithoutEpisodiosClinicosInput = {
    id?: number
    pacienteId: number
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutHistoriaClinicaInput
  }

  export type HistoriaClinicaCreateOrConnectWithoutEpisodiosClinicosInput = {
    where: HistoriaClinicaWhereUniqueInput
    create: XOR<HistoriaClinicaCreateWithoutEpisodiosClinicosInput, HistoriaClinicaUncheckedCreateWithoutEpisodiosClinicosInput>
  }

  export type EspecialidadCreateWithoutEpisodiosClinicosInput = {
    nombre: string
    descripcion?: string | null
    codigo: string
    activo?: boolean
    medicoEspecialidad?: MedicoEspecialidadCreateNestedManyWithoutEspecialidadInput
  }

  export type EspecialidadUncheckedCreateWithoutEpisodiosClinicosInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    codigo: string
    activo?: boolean
    medicoEspecialidad?: MedicoEspecialidadUncheckedCreateNestedManyWithoutEspecialidadInput
  }

  export type EspecialidadCreateOrConnectWithoutEpisodiosClinicosInput = {
    where: EspecialidadWhereUniqueInput
    create: XOR<EspecialidadCreateWithoutEpisodiosClinicosInput, EspecialidadUncheckedCreateWithoutEpisodiosClinicosInput>
  }

  export type MedicoCreateWithoutEpisodiosClinicosInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    usuario: UsuarioCreateNestedOneWithoutMedicoInput
    especialidades?: MedicoEspecialidadCreateNestedManyWithoutMedicoInput
  }

  export type MedicoUncheckedCreateWithoutEpisodiosClinicosInput = {
    id?: number
    usuarioId: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    especialidades?: MedicoEspecialidadUncheckedCreateNestedManyWithoutMedicoInput
  }

  export type MedicoCreateOrConnectWithoutEpisodiosClinicosInput = {
    where: MedicoWhereUniqueInput
    create: XOR<MedicoCreateWithoutEpisodiosClinicosInput, MedicoUncheckedCreateWithoutEpisodiosClinicosInput>
  }

  export type EnfermeraCreateWithoutEpisodiosClinicosInput = {
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
    usuario: UsuarioCreateNestedOneWithoutEnfermeraInput
  }

  export type EnfermeraUncheckedCreateWithoutEpisodiosClinicosInput = {
    id?: number
    usuarioId: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    numLicencia: string
    telefono?: string | null
    correo?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
  }

  export type EnfermeraCreateOrConnectWithoutEpisodiosClinicosInput = {
    where: EnfermeraWhereUniqueInput
    create: XOR<EnfermeraCreateWithoutEpisodiosClinicosInput, EnfermeraUncheckedCreateWithoutEpisodiosClinicosInput>
  }

  export type ConsultorioCreateWithoutEpisodiosClinicosInput = {
    nombre: string
    codigo: string
    tipo: string
    activo?: boolean
    sede: SedeCreateNestedOneWithoutConsultoriosInput
  }

  export type ConsultorioUncheckedCreateWithoutEpisodiosClinicosInput = {
    id?: number
    sedeId: number
    nombre: string
    codigo: string
    tipo: string
    activo?: boolean
  }

  export type ConsultorioCreateOrConnectWithoutEpisodiosClinicosInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutEpisodiosClinicosInput, ConsultorioUncheckedCreateWithoutEpisodiosClinicosInput>
  }

  export type SignosVitalesCreateWithoutEpisodioClinicoInput = {
    presionArterial?: string | null
    temperatura?: Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: number | null
    frecuenciaRespiratoria?: number | null
    saturacionOxigeno?: Decimal | DecimalJsLike | number | string | null
    peso?: Decimal | DecimalJsLike | number | string | null
    altura?: Decimal | DecimalJsLike | number | string | null
    imc?: Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: Date | string
  }

  export type SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    presionArterial?: string | null
    temperatura?: Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: number | null
    frecuenciaRespiratoria?: number | null
    saturacionOxigeno?: Decimal | DecimalJsLike | number | string | null
    peso?: Decimal | DecimalJsLike | number | string | null
    altura?: Decimal | DecimalJsLike | number | string | null
    imc?: Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: Date | string
  }

  export type SignosVitalesCreateOrConnectWithoutEpisodioClinicoInput = {
    where: SignosVitalesWhereUniqueInput
    create: XOR<SignosVitalesCreateWithoutEpisodioClinicoInput, SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type SignosVitalesCreateManyEpisodioClinicoInputEnvelope = {
    data: SignosVitalesCreateManyEpisodioClinicoInput | SignosVitalesCreateManyEpisodioClinicoInput[]
    skipDuplicates?: boolean
  }

  export type DiagnosticoCreateWithoutEpisodioClinicoInput = {
    tipo?: $Enums.TipoDiagnostico
    descripcionAdicional?: string | null
    fechaRegistro?: Date | string
    codigoCIE10: CodigoCIE10CreateNestedOneWithoutDiagnosticosInput
  }

  export type DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    codigoCIE10Id: string
    tipo?: $Enums.TipoDiagnostico
    descripcionAdicional?: string | null
    fechaRegistro?: Date | string
  }

  export type DiagnosticoCreateOrConnectWithoutEpisodioClinicoInput = {
    where: DiagnosticoWhereUniqueInput
    create: XOR<DiagnosticoCreateWithoutEpisodioClinicoInput, DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type DiagnosticoCreateManyEpisodioClinicoInputEnvelope = {
    data: DiagnosticoCreateManyEpisodioClinicoInput | DiagnosticoCreateManyEpisodioClinicoInput[]
    skipDuplicates?: boolean
  }

  export type PrescripcionCreateWithoutEpisodioClinicoInput = {
    nombreMedicamento: string
    dosis: string
    viaAdministracion: string
    frecuencia: string
    duracion: string
    indicaciones?: string | null
    fechaPrescripcion?: Date | string
  }

  export type PrescripcionUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    nombreMedicamento: string
    dosis: string
    viaAdministracion: string
    frecuencia: string
    duracion: string
    indicaciones?: string | null
    fechaPrescripcion?: Date | string
  }

  export type PrescripcionCreateOrConnectWithoutEpisodioClinicoInput = {
    where: PrescripcionWhereUniqueInput
    create: XOR<PrescripcionCreateWithoutEpisodioClinicoInput, PrescripcionUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type PrescripcionCreateManyEpisodioClinicoInputEnvelope = {
    data: PrescripcionCreateManyEpisodioClinicoInput | PrescripcionCreateManyEpisodioClinicoInput[]
    skipDuplicates?: boolean
  }

  export type DocumentoClinicoCreateWithoutEpisodioClinicoInput = {
    tipoDocumento: string
    titulo: string
    rutaArchivo: string
    contenido?: Uint8Array | null
    formato: string
    fechaDocumento: Date | string
    fechaRegistro?: Date | string
    observaciones?: string | null
  }

  export type DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    tipoDocumento: string
    titulo: string
    rutaArchivo: string
    contenido?: Uint8Array | null
    formato: string
    fechaDocumento: Date | string
    fechaRegistro?: Date | string
    observaciones?: string | null
  }

  export type DocumentoClinicoCreateOrConnectWithoutEpisodioClinicoInput = {
    where: DocumentoClinicoWhereUniqueInput
    create: XOR<DocumentoClinicoCreateWithoutEpisodioClinicoInput, DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type DocumentoClinicoCreateManyEpisodioClinicoInputEnvelope = {
    data: DocumentoClinicoCreateManyEpisodioClinicoInput | DocumentoClinicoCreateManyEpisodioClinicoInput[]
    skipDuplicates?: boolean
  }

  export type ConsentimientoInformadoCreateWithoutEpisodioClinicoInput = {
    tipoProcedimiento: string
    contenido: string
    fechaFirma?: Date | string | null
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: string | null
    documentoRepresentante?: string | null
    documentoDigitalizado?: Uint8Array | null
  }

  export type ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    tipoProcedimiento: string
    contenido: string
    fechaFirma?: Date | string | null
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: string | null
    documentoRepresentante?: string | null
    documentoDigitalizado?: Uint8Array | null
  }

  export type ConsentimientoInformadoCreateOrConnectWithoutEpisodioClinicoInput = {
    where: ConsentimientoInformadoWhereUniqueInput
    create: XOR<ConsentimientoInformadoCreateWithoutEpisodioClinicoInput, ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type ConsentimientoInformadoCreateManyEpisodioClinicoInputEnvelope = {
    data: ConsentimientoInformadoCreateManyEpisodioClinicoInput | ConsentimientoInformadoCreateManyEpisodioClinicoInput[]
    skipDuplicates?: boolean
  }

  export type OdontologiaDetalleCreateWithoutEpisodioClinicoInput = {
    odontograma?: Uint8Array | null
    indiceCPOD?: Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: string | null
    procedimientosRealizados?: string | null
  }

  export type OdontologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    odontograma?: Uint8Array | null
    indiceCPOD?: Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: string | null
    procedimientosRealizados?: string | null
  }

  export type OdontologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput = {
    where: OdontologiaDetalleWhereUniqueInput
    create: XOR<OdontologiaDetalleCreateWithoutEpisodioClinicoInput, OdontologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type OftalmologiaDetalleCreateWithoutEpisodioClinicoInput = {
    agudezaVisualOD?: string | null
    agudezaVisualOI?: string | null
    presionIntraocularOD?: Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: Decimal | DecimalJsLike | number | string | null
    fondoOjo?: string | null
    formulaOptica?: string | null
  }

  export type OftalmologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    agudezaVisualOD?: string | null
    agudezaVisualOI?: string | null
    presionIntraocularOD?: Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: Decimal | DecimalJsLike | number | string | null
    fondoOjo?: string | null
    formulaOptica?: string | null
  }

  export type OftalmologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput = {
    where: OftalmologiaDetalleWhereUniqueInput
    create: XOR<OftalmologiaDetalleCreateWithoutEpisodioClinicoInput, OftalmologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type PsicologiaDetalleCreateWithoutEpisodioClinicoInput = {
    evaluacionMental?: string | null
    testAplicados?: string | null
    impresionDiagnostica?: string | null
    planIntervencion?: string | null
    evolucion?: string | null
  }

  export type PsicologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    evaluacionMental?: string | null
    testAplicados?: string | null
    impresionDiagnostica?: string | null
    planIntervencion?: string | null
    evolucion?: string | null
  }

  export type PsicologiaDetalleCreateOrConnectWithoutEpisodioClinicoInput = {
    where: PsicologiaDetalleWhereUniqueInput
    create: XOR<PsicologiaDetalleCreateWithoutEpisodioClinicoInput, PsicologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type TrabajoSocialDetalleCreateWithoutEpisodioClinicoInput = {
    evaluacionSocioeconomica?: string | null
    dinamicaFamiliar?: string | null
    redesApoyo?: string | null
    intervencionRealizada?: string | null
    seguimientoCaso?: string | null
  }

  export type TrabajoSocialDetalleUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    evaluacionSocioeconomica?: string | null
    dinamicaFamiliar?: string | null
    redesApoyo?: string | null
    intervencionRealizada?: string | null
    seguimientoCaso?: string | null
  }

  export type TrabajoSocialDetalleCreateOrConnectWithoutEpisodioClinicoInput = {
    where: TrabajoSocialDetalleWhereUniqueInput
    create: XOR<TrabajoSocialDetalleCreateWithoutEpisodioClinicoInput, TrabajoSocialDetalleUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type AuditoriaHistoriaCreateWithoutEpisodioClinicoInput = {
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
    historiaClinica?: HistoriaClinicaCreateNestedOneWithoutAuditoriasInput
    usuario: UsuarioCreateNestedOneWithoutAuditoriasInput
  }

  export type AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput = {
    id?: number
    historiaClinicaId?: number | null
    usuarioId: number
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
  }

  export type AuditoriaHistoriaCreateOrConnectWithoutEpisodioClinicoInput = {
    where: AuditoriaHistoriaWhereUniqueInput
    create: XOR<AuditoriaHistoriaCreateWithoutEpisodioClinicoInput, AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type AuditoriaHistoriaCreateManyEpisodioClinicoInputEnvelope = {
    data: AuditoriaHistoriaCreateManyEpisodioClinicoInput | AuditoriaHistoriaCreateManyEpisodioClinicoInput[]
    skipDuplicates?: boolean
  }

  export type HistoriaClinicaUpsertWithoutEpisodiosClinicosInput = {
    update: XOR<HistoriaClinicaUpdateWithoutEpisodiosClinicosInput, HistoriaClinicaUncheckedUpdateWithoutEpisodiosClinicosInput>
    create: XOR<HistoriaClinicaCreateWithoutEpisodiosClinicosInput, HistoriaClinicaUncheckedCreateWithoutEpisodiosClinicosInput>
    where?: HistoriaClinicaWhereInput
  }

  export type HistoriaClinicaUpdateToOneWithWhereWithoutEpisodiosClinicosInput = {
    where?: HistoriaClinicaWhereInput
    data: XOR<HistoriaClinicaUpdateWithoutEpisodiosClinicosInput, HistoriaClinicaUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type HistoriaClinicaUpdateWithoutEpisodiosClinicosInput = {
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente?: PacienteUpdateOneRequiredWithoutHistoriasClinicasNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutHistoriaClinicaNestedInput
  }

  export type HistoriaClinicaUncheckedUpdateWithoutEpisodiosClinicosInput = {
    id?: IntFieldUpdateOperationsInput | number
    pacienteId?: IntFieldUpdateOperationsInput | number
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutHistoriaClinicaNestedInput
  }

  export type EspecialidadUpsertWithoutEpisodiosClinicosInput = {
    update: XOR<EspecialidadUpdateWithoutEpisodiosClinicosInput, EspecialidadUncheckedUpdateWithoutEpisodiosClinicosInput>
    create: XOR<EspecialidadCreateWithoutEpisodiosClinicosInput, EspecialidadUncheckedCreateWithoutEpisodiosClinicosInput>
    where?: EspecialidadWhereInput
  }

  export type EspecialidadUpdateToOneWithWhereWithoutEpisodiosClinicosInput = {
    where?: EspecialidadWhereInput
    data: XOR<EspecialidadUpdateWithoutEpisodiosClinicosInput, EspecialidadUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type EspecialidadUpdateWithoutEpisodiosClinicosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    medicoEspecialidad?: MedicoEspecialidadUpdateManyWithoutEspecialidadNestedInput
  }

  export type EspecialidadUncheckedUpdateWithoutEpisodiosClinicosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    medicoEspecialidad?: MedicoEspecialidadUncheckedUpdateManyWithoutEspecialidadNestedInput
  }

  export type MedicoUpsertWithoutEpisodiosClinicosInput = {
    update: XOR<MedicoUpdateWithoutEpisodiosClinicosInput, MedicoUncheckedUpdateWithoutEpisodiosClinicosInput>
    create: XOR<MedicoCreateWithoutEpisodiosClinicosInput, MedicoUncheckedCreateWithoutEpisodiosClinicosInput>
    where?: MedicoWhereInput
  }

  export type MedicoUpdateToOneWithWhereWithoutEpisodiosClinicosInput = {
    where?: MedicoWhereInput
    data: XOR<MedicoUpdateWithoutEpisodiosClinicosInput, MedicoUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type MedicoUpdateWithoutEpisodiosClinicosInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutMedicoNestedInput
    especialidades?: MedicoEspecialidadUpdateManyWithoutMedicoNestedInput
  }

  export type MedicoUncheckedUpdateWithoutEpisodiosClinicosInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    especialidades?: MedicoEspecialidadUncheckedUpdateManyWithoutMedicoNestedInput
  }

  export type EnfermeraUpsertWithoutEpisodiosClinicosInput = {
    update: XOR<EnfermeraUpdateWithoutEpisodiosClinicosInput, EnfermeraUncheckedUpdateWithoutEpisodiosClinicosInput>
    create: XOR<EnfermeraCreateWithoutEpisodiosClinicosInput, EnfermeraUncheckedCreateWithoutEpisodiosClinicosInput>
    where?: EnfermeraWhereInput
  }

  export type EnfermeraUpdateToOneWithWhereWithoutEpisodiosClinicosInput = {
    where?: EnfermeraWhereInput
    data: XOR<EnfermeraUpdateWithoutEpisodiosClinicosInput, EnfermeraUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type EnfermeraUpdateWithoutEpisodiosClinicosInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutEnfermeraNestedInput
  }

  export type EnfermeraUncheckedUpdateWithoutEpisodiosClinicosInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    numLicencia?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConsultorioUpsertWithoutEpisodiosClinicosInput = {
    update: XOR<ConsultorioUpdateWithoutEpisodiosClinicosInput, ConsultorioUncheckedUpdateWithoutEpisodiosClinicosInput>
    create: XOR<ConsultorioCreateWithoutEpisodiosClinicosInput, ConsultorioUncheckedCreateWithoutEpisodiosClinicosInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutEpisodiosClinicosInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutEpisodiosClinicosInput, ConsultorioUncheckedUpdateWithoutEpisodiosClinicosInput>
  }

  export type ConsultorioUpdateWithoutEpisodiosClinicosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sede?: SedeUpdateOneRequiredWithoutConsultoriosNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutEpisodiosClinicosInput = {
    id?: IntFieldUpdateOperationsInput | number
    sedeId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SignosVitalesUpsertWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: SignosVitalesWhereUniqueInput
    update: XOR<SignosVitalesUpdateWithoutEpisodioClinicoInput, SignosVitalesUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<SignosVitalesCreateWithoutEpisodioClinicoInput, SignosVitalesUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type SignosVitalesUpdateWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: SignosVitalesWhereUniqueInput
    data: XOR<SignosVitalesUpdateWithoutEpisodioClinicoInput, SignosVitalesUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type SignosVitalesUpdateManyWithWhereWithoutEpisodioClinicoInput = {
    where: SignosVitalesScalarWhereInput
    data: XOR<SignosVitalesUpdateManyMutationInput, SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoInput>
  }

  export type SignosVitalesScalarWhereInput = {
    AND?: SignosVitalesScalarWhereInput | SignosVitalesScalarWhereInput[]
    OR?: SignosVitalesScalarWhereInput[]
    NOT?: SignosVitalesScalarWhereInput | SignosVitalesScalarWhereInput[]
    id?: IntFilter<"SignosVitales"> | number
    episodioClinicoId?: IntFilter<"SignosVitales"> | number
    presionArterial?: StringNullableFilter<"SignosVitales"> | string | null
    temperatura?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: IntNullableFilter<"SignosVitales"> | number | null
    frecuenciaRespiratoria?: IntNullableFilter<"SignosVitales"> | number | null
    saturacionOxigeno?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    peso?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    altura?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    imc?: DecimalNullableFilter<"SignosVitales"> | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFilter<"SignosVitales"> | Date | string
  }

  export type DiagnosticoUpsertWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: DiagnosticoWhereUniqueInput
    update: XOR<DiagnosticoUpdateWithoutEpisodioClinicoInput, DiagnosticoUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<DiagnosticoCreateWithoutEpisodioClinicoInput, DiagnosticoUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type DiagnosticoUpdateWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: DiagnosticoWhereUniqueInput
    data: XOR<DiagnosticoUpdateWithoutEpisodioClinicoInput, DiagnosticoUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type DiagnosticoUpdateManyWithWhereWithoutEpisodioClinicoInput = {
    where: DiagnosticoScalarWhereInput
    data: XOR<DiagnosticoUpdateManyMutationInput, DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoInput>
  }

  export type DiagnosticoScalarWhereInput = {
    AND?: DiagnosticoScalarWhereInput | DiagnosticoScalarWhereInput[]
    OR?: DiagnosticoScalarWhereInput[]
    NOT?: DiagnosticoScalarWhereInput | DiagnosticoScalarWhereInput[]
    id?: IntFilter<"Diagnostico"> | number
    episodioClinicoId?: IntFilter<"Diagnostico"> | number
    codigoCIE10Id?: StringFilter<"Diagnostico"> | string
    tipo?: EnumTipoDiagnosticoFilter<"Diagnostico"> | $Enums.TipoDiagnostico
    descripcionAdicional?: StringNullableFilter<"Diagnostico"> | string | null
    fechaRegistro?: DateTimeFilter<"Diagnostico"> | Date | string
  }

  export type PrescripcionUpsertWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: PrescripcionWhereUniqueInput
    update: XOR<PrescripcionUpdateWithoutEpisodioClinicoInput, PrescripcionUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<PrescripcionCreateWithoutEpisodioClinicoInput, PrescripcionUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type PrescripcionUpdateWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: PrescripcionWhereUniqueInput
    data: XOR<PrescripcionUpdateWithoutEpisodioClinicoInput, PrescripcionUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type PrescripcionUpdateManyWithWhereWithoutEpisodioClinicoInput = {
    where: PrescripcionScalarWhereInput
    data: XOR<PrescripcionUpdateManyMutationInput, PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoInput>
  }

  export type PrescripcionScalarWhereInput = {
    AND?: PrescripcionScalarWhereInput | PrescripcionScalarWhereInput[]
    OR?: PrescripcionScalarWhereInput[]
    NOT?: PrescripcionScalarWhereInput | PrescripcionScalarWhereInput[]
    id?: IntFilter<"Prescripcion"> | number
    episodioClinicoId?: IntFilter<"Prescripcion"> | number
    nombreMedicamento?: StringFilter<"Prescripcion"> | string
    dosis?: StringFilter<"Prescripcion"> | string
    viaAdministracion?: StringFilter<"Prescripcion"> | string
    frecuencia?: StringFilter<"Prescripcion"> | string
    duracion?: StringFilter<"Prescripcion"> | string
    indicaciones?: StringNullableFilter<"Prescripcion"> | string | null
    fechaPrescripcion?: DateTimeFilter<"Prescripcion"> | Date | string
  }

  export type DocumentoClinicoUpsertWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: DocumentoClinicoWhereUniqueInput
    update: XOR<DocumentoClinicoUpdateWithoutEpisodioClinicoInput, DocumentoClinicoUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<DocumentoClinicoCreateWithoutEpisodioClinicoInput, DocumentoClinicoUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type DocumentoClinicoUpdateWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: DocumentoClinicoWhereUniqueInput
    data: XOR<DocumentoClinicoUpdateWithoutEpisodioClinicoInput, DocumentoClinicoUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type DocumentoClinicoUpdateManyWithWhereWithoutEpisodioClinicoInput = {
    where: DocumentoClinicoScalarWhereInput
    data: XOR<DocumentoClinicoUpdateManyMutationInput, DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoInput>
  }

  export type DocumentoClinicoScalarWhereInput = {
    AND?: DocumentoClinicoScalarWhereInput | DocumentoClinicoScalarWhereInput[]
    OR?: DocumentoClinicoScalarWhereInput[]
    NOT?: DocumentoClinicoScalarWhereInput | DocumentoClinicoScalarWhereInput[]
    id?: IntFilter<"DocumentoClinico"> | number
    episodioClinicoId?: IntFilter<"DocumentoClinico"> | number
    tipoDocumento?: StringFilter<"DocumentoClinico"> | string
    titulo?: StringFilter<"DocumentoClinico"> | string
    rutaArchivo?: StringFilter<"DocumentoClinico"> | string
    contenido?: BytesNullableFilter<"DocumentoClinico"> | Uint8Array | null
    formato?: StringFilter<"DocumentoClinico"> | string
    fechaDocumento?: DateTimeFilter<"DocumentoClinico"> | Date | string
    fechaRegistro?: DateTimeFilter<"DocumentoClinico"> | Date | string
    observaciones?: StringNullableFilter<"DocumentoClinico"> | string | null
  }

  export type ConsentimientoInformadoUpsertWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: ConsentimientoInformadoWhereUniqueInput
    update: XOR<ConsentimientoInformadoUpdateWithoutEpisodioClinicoInput, ConsentimientoInformadoUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<ConsentimientoInformadoCreateWithoutEpisodioClinicoInput, ConsentimientoInformadoUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type ConsentimientoInformadoUpdateWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: ConsentimientoInformadoWhereUniqueInput
    data: XOR<ConsentimientoInformadoUpdateWithoutEpisodioClinicoInput, ConsentimientoInformadoUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type ConsentimientoInformadoUpdateManyWithWhereWithoutEpisodioClinicoInput = {
    where: ConsentimientoInformadoScalarWhereInput
    data: XOR<ConsentimientoInformadoUpdateManyMutationInput, ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoInput>
  }

  export type ConsentimientoInformadoScalarWhereInput = {
    AND?: ConsentimientoInformadoScalarWhereInput | ConsentimientoInformadoScalarWhereInput[]
    OR?: ConsentimientoInformadoScalarWhereInput[]
    NOT?: ConsentimientoInformadoScalarWhereInput | ConsentimientoInformadoScalarWhereInput[]
    id?: IntFilter<"ConsentimientoInformado"> | number
    episodioClinicoId?: IntFilter<"ConsentimientoInformado"> | number
    tipoProcedimiento?: StringFilter<"ConsentimientoInformado"> | string
    contenido?: StringFilter<"ConsentimientoInformado"> | string
    fechaFirma?: DateTimeNullableFilter<"ConsentimientoInformado"> | Date | string | null
    firmadoPaciente?: BoolFilter<"ConsentimientoInformado"> | boolean
    firmadoRepresentante?: BoolFilter<"ConsentimientoInformado"> | boolean
    nombreRepresentante?: StringNullableFilter<"ConsentimientoInformado"> | string | null
    documentoRepresentante?: StringNullableFilter<"ConsentimientoInformado"> | string | null
    documentoDigitalizado?: BytesNullableFilter<"ConsentimientoInformado"> | Uint8Array | null
  }

  export type OdontologiaDetalleUpsertWithoutEpisodioClinicoInput = {
    update: XOR<OdontologiaDetalleUpdateWithoutEpisodioClinicoInput, OdontologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<OdontologiaDetalleCreateWithoutEpisodioClinicoInput, OdontologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    where?: OdontologiaDetalleWhereInput
  }

  export type OdontologiaDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput = {
    where?: OdontologiaDetalleWhereInput
    data: XOR<OdontologiaDetalleUpdateWithoutEpisodioClinicoInput, OdontologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type OdontologiaDetalleUpdateWithoutEpisodioClinicoInput = {
    odontograma?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    indiceCPOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: NullableStringFieldUpdateOperationsInput | string | null
    procedimientosRealizados?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OdontologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    odontograma?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    indiceCPOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    observacionesDentales?: NullableStringFieldUpdateOperationsInput | string | null
    procedimientosRealizados?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OftalmologiaDetalleUpsertWithoutEpisodioClinicoInput = {
    update: XOR<OftalmologiaDetalleUpdateWithoutEpisodioClinicoInput, OftalmologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<OftalmologiaDetalleCreateWithoutEpisodioClinicoInput, OftalmologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    where?: OftalmologiaDetalleWhereInput
  }

  export type OftalmologiaDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput = {
    where?: OftalmologiaDetalleWhereInput
    data: XOR<OftalmologiaDetalleUpdateWithoutEpisodioClinicoInput, OftalmologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type OftalmologiaDetalleUpdateWithoutEpisodioClinicoInput = {
    agudezaVisualOD?: NullableStringFieldUpdateOperationsInput | string | null
    agudezaVisualOI?: NullableStringFieldUpdateOperationsInput | string | null
    presionIntraocularOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fondoOjo?: NullableStringFieldUpdateOperationsInput | string | null
    formulaOptica?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OftalmologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    agudezaVisualOD?: NullableStringFieldUpdateOperationsInput | string | null
    agudezaVisualOI?: NullableStringFieldUpdateOperationsInput | string | null
    presionIntraocularOD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    presionIntraocularOI?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fondoOjo?: NullableStringFieldUpdateOperationsInput | string | null
    formulaOptica?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsicologiaDetalleUpsertWithoutEpisodioClinicoInput = {
    update: XOR<PsicologiaDetalleUpdateWithoutEpisodioClinicoInput, PsicologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<PsicologiaDetalleCreateWithoutEpisodioClinicoInput, PsicologiaDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    where?: PsicologiaDetalleWhereInput
  }

  export type PsicologiaDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput = {
    where?: PsicologiaDetalleWhereInput
    data: XOR<PsicologiaDetalleUpdateWithoutEpisodioClinicoInput, PsicologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type PsicologiaDetalleUpdateWithoutEpisodioClinicoInput = {
    evaluacionMental?: NullableStringFieldUpdateOperationsInput | string | null
    testAplicados?: NullableStringFieldUpdateOperationsInput | string | null
    impresionDiagnostica?: NullableStringFieldUpdateOperationsInput | string | null
    planIntervencion?: NullableStringFieldUpdateOperationsInput | string | null
    evolucion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PsicologiaDetalleUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    evaluacionMental?: NullableStringFieldUpdateOperationsInput | string | null
    testAplicados?: NullableStringFieldUpdateOperationsInput | string | null
    impresionDiagnostica?: NullableStringFieldUpdateOperationsInput | string | null
    planIntervencion?: NullableStringFieldUpdateOperationsInput | string | null
    evolucion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrabajoSocialDetalleUpsertWithoutEpisodioClinicoInput = {
    update: XOR<TrabajoSocialDetalleUpdateWithoutEpisodioClinicoInput, TrabajoSocialDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<TrabajoSocialDetalleCreateWithoutEpisodioClinicoInput, TrabajoSocialDetalleUncheckedCreateWithoutEpisodioClinicoInput>
    where?: TrabajoSocialDetalleWhereInput
  }

  export type TrabajoSocialDetalleUpdateToOneWithWhereWithoutEpisodioClinicoInput = {
    where?: TrabajoSocialDetalleWhereInput
    data: XOR<TrabajoSocialDetalleUpdateWithoutEpisodioClinicoInput, TrabajoSocialDetalleUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type TrabajoSocialDetalleUpdateWithoutEpisodioClinicoInput = {
    evaluacionSocioeconomica?: NullableStringFieldUpdateOperationsInput | string | null
    dinamicaFamiliar?: NullableStringFieldUpdateOperationsInput | string | null
    redesApoyo?: NullableStringFieldUpdateOperationsInput | string | null
    intervencionRealizada?: NullableStringFieldUpdateOperationsInput | string | null
    seguimientoCaso?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrabajoSocialDetalleUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    evaluacionSocioeconomica?: NullableStringFieldUpdateOperationsInput | string | null
    dinamicaFamiliar?: NullableStringFieldUpdateOperationsInput | string | null
    redesApoyo?: NullableStringFieldUpdateOperationsInput | string | null
    intervencionRealizada?: NullableStringFieldUpdateOperationsInput | string | null
    seguimientoCaso?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditoriaHistoriaUpsertWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: AuditoriaHistoriaWhereUniqueInput
    update: XOR<AuditoriaHistoriaUpdateWithoutEpisodioClinicoInput, AuditoriaHistoriaUncheckedUpdateWithoutEpisodioClinicoInput>
    create: XOR<AuditoriaHistoriaCreateWithoutEpisodioClinicoInput, AuditoriaHistoriaUncheckedCreateWithoutEpisodioClinicoInput>
  }

  export type AuditoriaHistoriaUpdateWithWhereUniqueWithoutEpisodioClinicoInput = {
    where: AuditoriaHistoriaWhereUniqueInput
    data: XOR<AuditoriaHistoriaUpdateWithoutEpisodioClinicoInput, AuditoriaHistoriaUncheckedUpdateWithoutEpisodioClinicoInput>
  }

  export type AuditoriaHistoriaUpdateManyWithWhereWithoutEpisodioClinicoInput = {
    where: AuditoriaHistoriaScalarWhereInput
    data: XOR<AuditoriaHistoriaUpdateManyMutationInput, AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoInput>
  }

  export type EpisodioClincoCreateWithoutSignosVitalesInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutSignosVitalesInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutSignosVitalesInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutSignosVitalesInput, EpisodioClincoUncheckedCreateWithoutSignosVitalesInput>
  }

  export type EpisodioClincoUpsertWithoutSignosVitalesInput = {
    update: XOR<EpisodioClincoUpdateWithoutSignosVitalesInput, EpisodioClincoUncheckedUpdateWithoutSignosVitalesInput>
    create: XOR<EpisodioClincoCreateWithoutSignosVitalesInput, EpisodioClincoUncheckedCreateWithoutSignosVitalesInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutSignosVitalesInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutSignosVitalesInput, EpisodioClincoUncheckedUpdateWithoutSignosVitalesInput>
  }

  export type EpisodioClincoUpdateWithoutSignosVitalesInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutSignosVitalesInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type DiagnosticoCreateWithoutCodigoCIE10Input = {
    tipo?: $Enums.TipoDiagnostico
    descripcionAdicional?: string | null
    fechaRegistro?: Date | string
    episodioClinico: EpisodioClincoCreateNestedOneWithoutDiagnosticosInput
  }

  export type DiagnosticoUncheckedCreateWithoutCodigoCIE10Input = {
    id?: number
    episodioClinicoId: number
    tipo?: $Enums.TipoDiagnostico
    descripcionAdicional?: string | null
    fechaRegistro?: Date | string
  }

  export type DiagnosticoCreateOrConnectWithoutCodigoCIE10Input = {
    where: DiagnosticoWhereUniqueInput
    create: XOR<DiagnosticoCreateWithoutCodigoCIE10Input, DiagnosticoUncheckedCreateWithoutCodigoCIE10Input>
  }

  export type DiagnosticoCreateManyCodigoCIE10InputEnvelope = {
    data: DiagnosticoCreateManyCodigoCIE10Input | DiagnosticoCreateManyCodigoCIE10Input[]
    skipDuplicates?: boolean
  }

  export type DiagnosticoUpsertWithWhereUniqueWithoutCodigoCIE10Input = {
    where: DiagnosticoWhereUniqueInput
    update: XOR<DiagnosticoUpdateWithoutCodigoCIE10Input, DiagnosticoUncheckedUpdateWithoutCodigoCIE10Input>
    create: XOR<DiagnosticoCreateWithoutCodigoCIE10Input, DiagnosticoUncheckedCreateWithoutCodigoCIE10Input>
  }

  export type DiagnosticoUpdateWithWhereUniqueWithoutCodigoCIE10Input = {
    where: DiagnosticoWhereUniqueInput
    data: XOR<DiagnosticoUpdateWithoutCodigoCIE10Input, DiagnosticoUncheckedUpdateWithoutCodigoCIE10Input>
  }

  export type DiagnosticoUpdateManyWithWhereWithoutCodigoCIE10Input = {
    where: DiagnosticoScalarWhereInput
    data: XOR<DiagnosticoUpdateManyMutationInput, DiagnosticoUncheckedUpdateManyWithoutCodigoCIE10Input>
  }

  export type EpisodioClincoCreateWithoutDiagnosticosInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutDiagnosticosInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutDiagnosticosInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutDiagnosticosInput, EpisodioClincoUncheckedCreateWithoutDiagnosticosInput>
  }

  export type CodigoCIE10CreateWithoutDiagnosticosInput = {
    codigo: string
    descripcion: string
    categoria: string
    subcategoria?: string | null
    activo?: boolean
  }

  export type CodigoCIE10UncheckedCreateWithoutDiagnosticosInput = {
    codigo: string
    descripcion: string
    categoria: string
    subcategoria?: string | null
    activo?: boolean
  }

  export type CodigoCIE10CreateOrConnectWithoutDiagnosticosInput = {
    where: CodigoCIE10WhereUniqueInput
    create: XOR<CodigoCIE10CreateWithoutDiagnosticosInput, CodigoCIE10UncheckedCreateWithoutDiagnosticosInput>
  }

  export type EpisodioClincoUpsertWithoutDiagnosticosInput = {
    update: XOR<EpisodioClincoUpdateWithoutDiagnosticosInput, EpisodioClincoUncheckedUpdateWithoutDiagnosticosInput>
    create: XOR<EpisodioClincoCreateWithoutDiagnosticosInput, EpisodioClincoUncheckedCreateWithoutDiagnosticosInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutDiagnosticosInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutDiagnosticosInput, EpisodioClincoUncheckedUpdateWithoutDiagnosticosInput>
  }

  export type EpisodioClincoUpdateWithoutDiagnosticosInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutDiagnosticosInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type CodigoCIE10UpsertWithoutDiagnosticosInput = {
    update: XOR<CodigoCIE10UpdateWithoutDiagnosticosInput, CodigoCIE10UncheckedUpdateWithoutDiagnosticosInput>
    create: XOR<CodigoCIE10CreateWithoutDiagnosticosInput, CodigoCIE10UncheckedCreateWithoutDiagnosticosInput>
    where?: CodigoCIE10WhereInput
  }

  export type CodigoCIE10UpdateToOneWithWhereWithoutDiagnosticosInput = {
    where?: CodigoCIE10WhereInput
    data: XOR<CodigoCIE10UpdateWithoutDiagnosticosInput, CodigoCIE10UncheckedUpdateWithoutDiagnosticosInput>
  }

  export type CodigoCIE10UpdateWithoutDiagnosticosInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    subcategoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CodigoCIE10UncheckedUpdateWithoutDiagnosticosInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    subcategoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EpisodioClincoCreateWithoutPrescripcionesInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutPrescripcionesInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutPrescripcionesInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutPrescripcionesInput, EpisodioClincoUncheckedCreateWithoutPrescripcionesInput>
  }

  export type EpisodioClincoUpsertWithoutPrescripcionesInput = {
    update: XOR<EpisodioClincoUpdateWithoutPrescripcionesInput, EpisodioClincoUncheckedUpdateWithoutPrescripcionesInput>
    create: XOR<EpisodioClincoCreateWithoutPrescripcionesInput, EpisodioClincoUncheckedCreateWithoutPrescripcionesInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutPrescripcionesInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutPrescripcionesInput, EpisodioClincoUncheckedUpdateWithoutPrescripcionesInput>
  }

  export type EpisodioClincoUpdateWithoutPrescripcionesInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutPrescripcionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoCreateWithoutDocumentosClinicosInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutDocumentosClinicosInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutDocumentosClinicosInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutDocumentosClinicosInput, EpisodioClincoUncheckedCreateWithoutDocumentosClinicosInput>
  }

  export type EpisodioClincoUpsertWithoutDocumentosClinicosInput = {
    update: XOR<EpisodioClincoUpdateWithoutDocumentosClinicosInput, EpisodioClincoUncheckedUpdateWithoutDocumentosClinicosInput>
    create: XOR<EpisodioClincoCreateWithoutDocumentosClinicosInput, EpisodioClincoUncheckedCreateWithoutDocumentosClinicosInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutDocumentosClinicosInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutDocumentosClinicosInput, EpisodioClincoUncheckedUpdateWithoutDocumentosClinicosInput>
  }

  export type EpisodioClincoUpdateWithoutDocumentosClinicosInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutDocumentosClinicosInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoCreateWithoutConsentimientosInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutConsentimientosInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutConsentimientosInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutConsentimientosInput, EpisodioClincoUncheckedCreateWithoutConsentimientosInput>
  }

  export type EpisodioClincoUpsertWithoutConsentimientosInput = {
    update: XOR<EpisodioClincoUpdateWithoutConsentimientosInput, EpisodioClincoUncheckedUpdateWithoutConsentimientosInput>
    create: XOR<EpisodioClincoCreateWithoutConsentimientosInput, EpisodioClincoUncheckedCreateWithoutConsentimientosInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutConsentimientosInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutConsentimientosInput, EpisodioClincoUncheckedUpdateWithoutConsentimientosInput>
  }

  export type EpisodioClincoUpdateWithoutConsentimientosInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutConsentimientosInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoCreateWithoutOdontologiaDetalleInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutOdontologiaDetalleInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutOdontologiaDetalleInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutOdontologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutOdontologiaDetalleInput>
  }

  export type EpisodioClincoUpsertWithoutOdontologiaDetalleInput = {
    update: XOR<EpisodioClincoUpdateWithoutOdontologiaDetalleInput, EpisodioClincoUncheckedUpdateWithoutOdontologiaDetalleInput>
    create: XOR<EpisodioClincoCreateWithoutOdontologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutOdontologiaDetalleInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutOdontologiaDetalleInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutOdontologiaDetalleInput, EpisodioClincoUncheckedUpdateWithoutOdontologiaDetalleInput>
  }

  export type EpisodioClincoUpdateWithoutOdontologiaDetalleInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutOdontologiaDetalleInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoCreateWithoutOftalmologiaDetalleInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutOftalmologiaDetalleInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutOftalmologiaDetalleInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutOftalmologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutOftalmologiaDetalleInput>
  }

  export type EpisodioClincoUpsertWithoutOftalmologiaDetalleInput = {
    update: XOR<EpisodioClincoUpdateWithoutOftalmologiaDetalleInput, EpisodioClincoUncheckedUpdateWithoutOftalmologiaDetalleInput>
    create: XOR<EpisodioClincoCreateWithoutOftalmologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutOftalmologiaDetalleInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutOftalmologiaDetalleInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutOftalmologiaDetalleInput, EpisodioClincoUncheckedUpdateWithoutOftalmologiaDetalleInput>
  }

  export type EpisodioClincoUpdateWithoutOftalmologiaDetalleInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutOftalmologiaDetalleInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoCreateWithoutPsicologiaDetalleInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutPsicologiaDetalleInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutPsicologiaDetalleInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutPsicologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutPsicologiaDetalleInput>
  }

  export type EpisodioClincoUpsertWithoutPsicologiaDetalleInput = {
    update: XOR<EpisodioClincoUpdateWithoutPsicologiaDetalleInput, EpisodioClincoUncheckedUpdateWithoutPsicologiaDetalleInput>
    create: XOR<EpisodioClincoCreateWithoutPsicologiaDetalleInput, EpisodioClincoUncheckedCreateWithoutPsicologiaDetalleInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutPsicologiaDetalleInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutPsicologiaDetalleInput, EpisodioClincoUncheckedUpdateWithoutPsicologiaDetalleInput>
  }

  export type EpisodioClincoUpdateWithoutPsicologiaDetalleInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutPsicologiaDetalleInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoCreateWithoutTrabajoSocialDetalleInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutTrabajoSocialDetalleInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    auditorias?: AuditoriaHistoriaUncheckedCreateNestedManyWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutTrabajoSocialDetalleInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutTrabajoSocialDetalleInput, EpisodioClincoUncheckedCreateWithoutTrabajoSocialDetalleInput>
  }

  export type EpisodioClincoUpsertWithoutTrabajoSocialDetalleInput = {
    update: XOR<EpisodioClincoUpdateWithoutTrabajoSocialDetalleInput, EpisodioClincoUncheckedUpdateWithoutTrabajoSocialDetalleInput>
    create: XOR<EpisodioClincoCreateWithoutTrabajoSocialDetalleInput, EpisodioClincoUncheckedCreateWithoutTrabajoSocialDetalleInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutTrabajoSocialDetalleInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutTrabajoSocialDetalleInput, EpisodioClincoUncheckedUpdateWithoutTrabajoSocialDetalleInput>
  }

  export type EpisodioClincoUpdateWithoutTrabajoSocialDetalleInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutTrabajoSocialDetalleInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type HistoriaClinicaCreateWithoutAuditoriasInput = {
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
    paciente: PacienteCreateNestedOneWithoutHistoriasClinicasInput
    episodiosClinicos?: EpisodioClincoCreateNestedManyWithoutHistoriaClinicaInput
  }

  export type HistoriaClinicaUncheckedCreateWithoutAuditoriasInput = {
    id?: number
    pacienteId: number
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
    episodiosClinicos?: EpisodioClincoUncheckedCreateNestedManyWithoutHistoriaClinicaInput
  }

  export type HistoriaClinicaCreateOrConnectWithoutAuditoriasInput = {
    where: HistoriaClinicaWhereUniqueInput
    create: XOR<HistoriaClinicaCreateWithoutAuditoriasInput, HistoriaClinicaUncheckedCreateWithoutAuditoriasInput>
  }

  export type EpisodioClincoCreateWithoutAuditoriasInput = {
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    historiaClinica: HistoriaClinicaCreateNestedOneWithoutEpisodiosClinicosInput
    especialidad: EspecialidadCreateNestedOneWithoutEpisodiosClinicosInput
    medico?: MedicoCreateNestedOneWithoutEpisodiosClinicosInput
    enfermera: EnfermeraCreateNestedOneWithoutEpisodiosClinicosInput
    consultorio: ConsultorioCreateNestedOneWithoutEpisodiosClinicosInput
    signosVitales?: SignosVitalesCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleCreateNestedOneWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoUncheckedCreateWithoutAuditoriasInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
    signosVitales?: SignosVitalesUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    diagnosticos?: DiagnosticoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    prescripciones?: PrescripcionUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    documentosClinicos?: DocumentoClinicoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    consentimientos?: ConsentimientoInformadoUncheckedCreateNestedManyWithoutEpisodioClinicoInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedCreateNestedOneWithoutEpisodioClinicoInput
  }

  export type EpisodioClincoCreateOrConnectWithoutAuditoriasInput = {
    where: EpisodioClincoWhereUniqueInput
    create: XOR<EpisodioClincoCreateWithoutAuditoriasInput, EpisodioClincoUncheckedCreateWithoutAuditoriasInput>
  }

  export type UsuarioCreateWithoutAuditoriasInput = {
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso?: Date | string | null
    activo?: boolean
    fechaRegistro?: Date | string
    medico?: MedicoCreateNestedOneWithoutUsuarioInput
    enfermera?: EnfermeraCreateNestedOneWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutAuditoriasInput = {
    id?: number
    nombreUsuario: string
    contrasenaHash: string
    tipoUsuario: $Enums.TipoUsuario
    email: string
    ultimoAcceso?: Date | string | null
    activo?: boolean
    fechaRegistro?: Date | string
    medico?: MedicoUncheckedCreateNestedOneWithoutUsuarioInput
    enfermera?: EnfermeraUncheckedCreateNestedOneWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutAuditoriasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutAuditoriasInput, UsuarioUncheckedCreateWithoutAuditoriasInput>
  }

  export type HistoriaClinicaUpsertWithoutAuditoriasInput = {
    update: XOR<HistoriaClinicaUpdateWithoutAuditoriasInput, HistoriaClinicaUncheckedUpdateWithoutAuditoriasInput>
    create: XOR<HistoriaClinicaCreateWithoutAuditoriasInput, HistoriaClinicaUncheckedCreateWithoutAuditoriasInput>
    where?: HistoriaClinicaWhereInput
  }

  export type HistoriaClinicaUpdateToOneWithWhereWithoutAuditoriasInput = {
    where?: HistoriaClinicaWhereInput
    data: XOR<HistoriaClinicaUpdateWithoutAuditoriasInput, HistoriaClinicaUncheckedUpdateWithoutAuditoriasInput>
  }

  export type HistoriaClinicaUpdateWithoutAuditoriasInput = {
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    paciente?: PacienteUpdateOneRequiredWithoutHistoriasClinicasNestedInput
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutHistoriaClinicaNestedInput
  }

  export type HistoriaClinicaUncheckedUpdateWithoutAuditoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    pacienteId?: IntFieldUpdateOperationsInput | number
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutHistoriaClinicaNestedInput
  }

  export type EpisodioClincoUpsertWithoutAuditoriasInput = {
    update: XOR<EpisodioClincoUpdateWithoutAuditoriasInput, EpisodioClincoUncheckedUpdateWithoutAuditoriasInput>
    create: XOR<EpisodioClincoCreateWithoutAuditoriasInput, EpisodioClincoUncheckedCreateWithoutAuditoriasInput>
    where?: EpisodioClincoWhereInput
  }

  export type EpisodioClincoUpdateToOneWithWhereWithoutAuditoriasInput = {
    where?: EpisodioClincoWhereInput
    data: XOR<EpisodioClincoUpdateWithoutAuditoriasInput, EpisodioClincoUncheckedUpdateWithoutAuditoriasInput>
  }

  export type EpisodioClincoUpdateWithoutAuditoriasInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutAuditoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
  }

  export type UsuarioUpsertWithoutAuditoriasInput = {
    update: XOR<UsuarioUpdateWithoutAuditoriasInput, UsuarioUncheckedUpdateWithoutAuditoriasInput>
    create: XOR<UsuarioCreateWithoutAuditoriasInput, UsuarioUncheckedCreateWithoutAuditoriasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutAuditoriasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutAuditoriasInput, UsuarioUncheckedUpdateWithoutAuditoriasInput>
  }

  export type UsuarioUpdateWithoutAuditoriasInput = {
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    medico?: MedicoUpdateOneWithoutUsuarioNestedInput
    enfermera?: EnfermeraUpdateOneWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutAuditoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreUsuario?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: EnumTipoUsuarioFieldUpdateOperationsInput | $Enums.TipoUsuario
    email?: StringFieldUpdateOperationsInput | string
    ultimoAcceso?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    medico?: MedicoUncheckedUpdateOneWithoutUsuarioNestedInput
    enfermera?: EnfermeraUncheckedUpdateOneWithoutUsuarioNestedInput
  }

  export type AuditoriaHistoriaCreateManyUsuarioInput = {
    id?: number
    historiaClinicaId?: number | null
    episodioClinicoId?: number | null
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
  }

  export type AuditoriaHistoriaUpdateWithoutUsuarioInput = {
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
    historiaClinica?: HistoriaClinicaUpdateOneWithoutAuditoriasNestedInput
    episodioClinico?: EpisodioClincoUpdateOneWithoutAuditoriasNestedInput
  }

  export type AuditoriaHistoriaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: NullableIntFieldUpdateOperationsInput | number | null
    episodioClinicoId?: NullableIntFieldUpdateOperationsInput | number | null
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriaHistoriaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: NullableIntFieldUpdateOperationsInput | number | null
    episodioClinicoId?: NullableIntFieldUpdateOperationsInput | number | null
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
  }

  export type MedicoEspecialidadCreateManyMedicoInput = {
    id?: number
    especialidadId: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    activo?: boolean
  }

  export type EpisodioClincoCreateManyMedicoInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
  }

  export type MedicoEspecialidadUpdateWithoutMedicoInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    especialidad?: EspecialidadUpdateOneRequiredWithoutMedicoEspecialidadNestedInput
  }

  export type MedicoEspecialidadUncheckedUpdateWithoutMedicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicoEspecialidadUncheckedUpdateManyWithoutMedicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EpisodioClincoUpdateWithoutMedicoInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutMedicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutMedicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EpisodioClincoCreateManyEnfermeraInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
  }

  export type EpisodioClincoUpdateWithoutEnfermeraInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutEnfermeraInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutEnfermeraInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProgramaAcademicoCreateManyFacultadInput = {
    id?: number
    nombre: string
    codigo: string
    descripcion?: string | null
    nivel: string
    activo?: boolean
  }

  export type ProgramaAcademicoUpdateWithoutFacultadInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    nivel?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    pacientes?: PacienteUpdateManyWithoutProgramaAcademicoNestedInput
  }

  export type ProgramaAcademicoUncheckedUpdateWithoutFacultadInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    nivel?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    pacientes?: PacienteUncheckedUpdateManyWithoutProgramaAcademicoNestedInput
  }

  export type ProgramaAcademicoUncheckedUpdateManyWithoutFacultadInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    nivel?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PacienteCreateManyProgramaAcademicoInput = {
    id?: number
    tipoDocumento: string
    numDocumento: string
    nombres: string
    apellidos: string
    fechaNacimiento: Date | string
    genero: string
    direccion?: string | null
    telefono?: string | null
    correo?: string | null
    grupoSanguineo?: string | null
    alergias?: string | null
    antecedentesFamiliares?: string | null
    estadoCivil?: string | null
    fechaRegistro?: Date | string
    activo?: boolean
  }

  export type PacienteUpdateWithoutProgramaAcademicoInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    contactosEmergencia?: ContactoEmergenciaUpdateManyWithoutPacienteNestedInput
    historiasClinicas?: HistoriaClinicaUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateWithoutProgramaAcademicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    contactosEmergencia?: ContactoEmergenciaUncheckedUpdateManyWithoutPacienteNestedInput
    historiasClinicas?: HistoriaClinicaUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateManyWithoutProgramaAcademicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    numDocumento?: StringFieldUpdateOperationsInput | string
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    grupoSanguineo?: NullableStringFieldUpdateOperationsInput | string | null
    alergias?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesFamiliares?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConsultorioCreateManySedeInput = {
    id?: number
    nombre: string
    codigo: string
    tipo: string
    activo?: boolean
  }

  export type ConsultorioUpdateWithoutSedeInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutSedeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateManyWithoutSedeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EpisodioClincoCreateManyConsultorioInput = {
    id?: number
    historiaClinicaId: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
  }

  export type EpisodioClincoUpdateWithoutConsultorioInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutConsultorioInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutConsultorioInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MedicoEspecialidadCreateManyEspecialidadInput = {
    id?: number
    medicoId: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    activo?: boolean
  }

  export type EpisodioClincoCreateManyEspecialidadInput = {
    id?: number
    historiaClinicaId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
  }

  export type MedicoEspecialidadUpdateWithoutEspecialidadInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    medico?: MedicoUpdateOneRequiredWithoutEspecialidadesNestedInput
  }

  export type MedicoEspecialidadUncheckedUpdateWithoutEspecialidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicoEspecialidadUncheckedUpdateManyWithoutEspecialidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EpisodioClincoUpdateWithoutEspecialidadInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    historiaClinica?: HistoriaClinicaUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutEspecialidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutEspecialidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactoEmergenciaCreateManyPacienteInput = {
    id?: number
    nombres: string
    apellidos: string
    parentesco: string
    telefonoPrincipal: string
    telefonoSecundario?: string | null
    direccion?: string | null
    activo?: boolean
  }

  export type HistoriaClinicaCreateManyPacienteInput = {
    id?: number
    fechaApertura: Date | string
    estado: string
    observacionesGenerales?: string | null
    ultimaActualizacion?: Date | string
  }

  export type ContactoEmergenciaUpdateWithoutPacienteInput = {
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    parentesco?: StringFieldUpdateOperationsInput | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactoEmergenciaUncheckedUpdateWithoutPacienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    parentesco?: StringFieldUpdateOperationsInput | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactoEmergenciaUncheckedUpdateManyWithoutPacienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombres?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    parentesco?: StringFieldUpdateOperationsInput | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HistoriaClinicaUpdateWithoutPacienteInput = {
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    episodiosClinicos?: EpisodioClincoUpdateManyWithoutHistoriaClinicaNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutHistoriaClinicaNestedInput
  }

  export type HistoriaClinicaUncheckedUpdateWithoutPacienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    episodiosClinicos?: EpisodioClincoUncheckedUpdateManyWithoutHistoriaClinicaNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutHistoriaClinicaNestedInput
  }

  export type HistoriaClinicaUncheckedUpdateManyWithoutPacienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaApertura?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    observacionesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EpisodioClincoCreateManyHistoriaClinicaInput = {
    id?: number
    especialidadId: number
    medicoId?: number | null
    enfermeraId: number
    consultorioId: number
    fechaEpisodio: Date | string
    motivoConsulta: string
    sintomas?: string | null
    tratamiento?: string | null
    observaciones?: string | null
  }

  export type AuditoriaHistoriaCreateManyHistoriaClinicaInput = {
    id?: number
    episodioClinicoId?: number | null
    usuarioId: number
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
  }

  export type EpisodioClincoUpdateWithoutHistoriaClinicaInput = {
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    especialidad?: EspecialidadUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    medico?: MedicoUpdateOneWithoutEpisodiosClinicosNestedInput
    enfermera?: EnfermeraUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    consultorio?: ConsultorioUpdateOneRequiredWithoutEpisodiosClinicosNestedInput
    signosVitales?: SignosVitalesUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateWithoutHistoriaClinicaInput = {
    id?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    signosVitales?: SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    diagnosticos?: DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    prescripciones?: PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    documentosClinicos?: DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    consentimientos?: ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
    odontologiaDetalle?: OdontologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    oftalmologiaDetalle?: OftalmologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    psicologiaDetalle?: PsicologiaDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    trabajoSocialDetalle?: TrabajoSocialDetalleUncheckedUpdateOneWithoutEpisodioClinicoNestedInput
    auditorias?: AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoNestedInput
  }

  export type EpisodioClincoUncheckedUpdateManyWithoutHistoriaClinicaInput = {
    id?: IntFieldUpdateOperationsInput | number
    especialidadId?: IntFieldUpdateOperationsInput | number
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    enfermeraId?: IntFieldUpdateOperationsInput | number
    consultorioId?: IntFieldUpdateOperationsInput | number
    fechaEpisodio?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoConsulta?: StringFieldUpdateOperationsInput | string
    sintomas?: NullableStringFieldUpdateOperationsInput | string | null
    tratamiento?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditoriaHistoriaUpdateWithoutHistoriaClinicaInput = {
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
    episodioClinico?: EpisodioClincoUpdateOneWithoutAuditoriasNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutAuditoriasNestedInput
  }

  export type AuditoriaHistoriaUncheckedUpdateWithoutHistoriaClinicaInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: NullableIntFieldUpdateOperationsInput | number | null
    usuarioId?: IntFieldUpdateOperationsInput | number
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriaHistoriaUncheckedUpdateManyWithoutHistoriaClinicaInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: NullableIntFieldUpdateOperationsInput | number | null
    usuarioId?: IntFieldUpdateOperationsInput | number
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
  }

  export type SignosVitalesCreateManyEpisodioClinicoInput = {
    id?: number
    presionArterial?: string | null
    temperatura?: Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: number | null
    frecuenciaRespiratoria?: number | null
    saturacionOxigeno?: Decimal | DecimalJsLike | number | string | null
    peso?: Decimal | DecimalJsLike | number | string | null
    altura?: Decimal | DecimalJsLike | number | string | null
    imc?: Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: Date | string
  }

  export type DiagnosticoCreateManyEpisodioClinicoInput = {
    id?: number
    codigoCIE10Id: string
    tipo?: $Enums.TipoDiagnostico
    descripcionAdicional?: string | null
    fechaRegistro?: Date | string
  }

  export type PrescripcionCreateManyEpisodioClinicoInput = {
    id?: number
    nombreMedicamento: string
    dosis: string
    viaAdministracion: string
    frecuencia: string
    duracion: string
    indicaciones?: string | null
    fechaPrescripcion?: Date | string
  }

  export type DocumentoClinicoCreateManyEpisodioClinicoInput = {
    id?: number
    tipoDocumento: string
    titulo: string
    rutaArchivo: string
    contenido?: Uint8Array | null
    formato: string
    fechaDocumento: Date | string
    fechaRegistro?: Date | string
    observaciones?: string | null
  }

  export type ConsentimientoInformadoCreateManyEpisodioClinicoInput = {
    id?: number
    tipoProcedimiento: string
    contenido: string
    fechaFirma?: Date | string | null
    firmadoPaciente?: boolean
    firmadoRepresentante?: boolean
    nombreRepresentante?: string | null
    documentoRepresentante?: string | null
    documentoDigitalizado?: Uint8Array | null
  }

  export type AuditoriaHistoriaCreateManyEpisodioClinicoInput = {
    id?: number
    historiaClinicaId?: number | null
    usuarioId: number
    fechaAccion?: Date | string
    tipoAccion: string
    descripcion?: string | null
    tablaAfectada: string
    idRegistro: number
    datosAntiguos?: string | null
    datosNuevos?: string | null
    direccionIp: string
  }

  export type SignosVitalesUpdateWithoutEpisodioClinicoInput = {
    presionArterial?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: NullableIntFieldUpdateOperationsInput | number | null
    frecuenciaRespiratoria?: NullableIntFieldUpdateOperationsInput | number | null
    saturacionOxigeno?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    peso?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    altura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignosVitalesUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    presionArterial?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: NullableIntFieldUpdateOperationsInput | number | null
    frecuenciaRespiratoria?: NullableIntFieldUpdateOperationsInput | number | null
    saturacionOxigeno?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    peso?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    altura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignosVitalesUncheckedUpdateManyWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    presionArterial?: NullableStringFieldUpdateOperationsInput | string | null
    temperatura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    frecuenciaCardiaca?: NullableIntFieldUpdateOperationsInput | number | null
    frecuenciaRespiratoria?: NullableIntFieldUpdateOperationsInput | number | null
    saturacionOxigeno?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    peso?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    altura?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiagnosticoUpdateWithoutEpisodioClinicoInput = {
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    codigoCIE10?: CodigoCIE10UpdateOneRequiredWithoutDiagnosticosNestedInput
  }

  export type DiagnosticoUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    codigoCIE10Id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiagnosticoUncheckedUpdateManyWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    codigoCIE10Id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescripcionUpdateWithoutEpisodioClinicoInput = {
    nombreMedicamento?: StringFieldUpdateOperationsInput | string
    dosis?: StringFieldUpdateOperationsInput | string
    viaAdministracion?: StringFieldUpdateOperationsInput | string
    frecuencia?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    indicaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaPrescripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescripcionUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreMedicamento?: StringFieldUpdateOperationsInput | string
    dosis?: StringFieldUpdateOperationsInput | string
    viaAdministracion?: StringFieldUpdateOperationsInput | string
    frecuencia?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    indicaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaPrescripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescripcionUncheckedUpdateManyWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreMedicamento?: StringFieldUpdateOperationsInput | string
    dosis?: StringFieldUpdateOperationsInput | string
    viaAdministracion?: StringFieldUpdateOperationsInput | string
    frecuencia?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    indicaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaPrescripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoClinicoUpdateWithoutEpisodioClinicoInput = {
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    rutaArchivo?: StringFieldUpdateOperationsInput | string
    contenido?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    formato?: StringFieldUpdateOperationsInput | string
    fechaDocumento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentoClinicoUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    rutaArchivo?: StringFieldUpdateOperationsInput | string
    contenido?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    formato?: StringFieldUpdateOperationsInput | string
    fechaDocumento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentoClinicoUncheckedUpdateManyWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoDocumento?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    rutaArchivo?: StringFieldUpdateOperationsInput | string
    contenido?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    formato?: StringFieldUpdateOperationsInput | string
    fechaDocumento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsentimientoInformadoUpdateWithoutEpisodioClinicoInput = {
    tipoProcedimiento?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fechaFirma?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firmadoPaciente?: BoolFieldUpdateOperationsInput | boolean
    firmadoRepresentante?: BoolFieldUpdateOperationsInput | boolean
    nombreRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoDigitalizado?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type ConsentimientoInformadoUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoProcedimiento?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fechaFirma?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firmadoPaciente?: BoolFieldUpdateOperationsInput | boolean
    firmadoRepresentante?: BoolFieldUpdateOperationsInput | boolean
    nombreRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoDigitalizado?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type ConsentimientoInformadoUncheckedUpdateManyWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoProcedimiento?: StringFieldUpdateOperationsInput | string
    contenido?: StringFieldUpdateOperationsInput | string
    fechaFirma?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firmadoPaciente?: BoolFieldUpdateOperationsInput | boolean
    firmadoRepresentante?: BoolFieldUpdateOperationsInput | boolean
    nombreRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoRepresentante?: NullableStringFieldUpdateOperationsInput | string | null
    documentoDigitalizado?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type AuditoriaHistoriaUpdateWithoutEpisodioClinicoInput = {
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
    historiaClinica?: HistoriaClinicaUpdateOneWithoutAuditoriasNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutAuditoriasNestedInput
  }

  export type AuditoriaHistoriaUncheckedUpdateWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: NullableIntFieldUpdateOperationsInput | number | null
    usuarioId?: IntFieldUpdateOperationsInput | number
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
  }

  export type AuditoriaHistoriaUncheckedUpdateManyWithoutEpisodioClinicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    historiaClinicaId?: NullableIntFieldUpdateOperationsInput | number | null
    usuarioId?: IntFieldUpdateOperationsInput | number
    fechaAccion?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAccion?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tablaAfectada?: StringFieldUpdateOperationsInput | string
    idRegistro?: IntFieldUpdateOperationsInput | number
    datosAntiguos?: NullableStringFieldUpdateOperationsInput | string | null
    datosNuevos?: NullableStringFieldUpdateOperationsInput | string | null
    direccionIp?: StringFieldUpdateOperationsInput | string
  }

  export type DiagnosticoCreateManyCodigoCIE10Input = {
    id?: number
    episodioClinicoId: number
    tipo?: $Enums.TipoDiagnostico
    descripcionAdicional?: string | null
    fechaRegistro?: Date | string
  }

  export type DiagnosticoUpdateWithoutCodigoCIE10Input = {
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    episodioClinico?: EpisodioClincoUpdateOneRequiredWithoutDiagnosticosNestedInput
  }

  export type DiagnosticoUncheckedUpdateWithoutCodigoCIE10Input = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiagnosticoUncheckedUpdateManyWithoutCodigoCIE10Input = {
    id?: IntFieldUpdateOperationsInput | number
    episodioClinicoId?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoDiagnosticoFieldUpdateOperationsInput | $Enums.TipoDiagnostico
    descripcionAdicional?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}